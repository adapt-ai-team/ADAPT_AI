################################################################################
# sitecustomize.py
# Purpose: Force pip's vendored platformdirs on Windows to skip registry lookups
#          for CSIDL_COMMON_APPDATA, so we never get a problematic "winreg.QueryValueEx" call.
################################################################################
print("sitecustomize.py applied")
import os

# We already do environment variables in environment.bat, but let's ensure
# they're defined very early. In particular, PROGRAMDATA is used below.
if not os.environ.get("PROGRAMDATA"):
    os.environ["PROGRAMDATA"] = r"C:\ProgramData"

try:
    # pipâ€™s vendored platformdirs is typically pip._vendor.platformdirs
    import pip._vendor.platformdirs.windows as win
    
    # This monkey-patch function will be substituted for get_win_folder_from_registry
    # so that it *never* touches the registry.
    def _no_registry_folder(folder_name: str) -> str:
        # The minimal logic: if code tries to access "CSIDL_COMMON_APPDATA", 
        # we return the same fallback as your custom windows.py
        # (i.e., c:\ProgramData). You can expand this dictionary if desired.
        base_paths = {
            "CSIDL_COMMON_APPDATA": os.environ["PROGRAMDATA"],  
            # If you want to handle other "CSIDL_..." keys, add them here.
        }
        return base_paths.get(folder_name, os.environ["PROGRAMDATA"])

    # Now override the function that pip._vendor.platformdirs calls internally
    # so that it can never do a registry query.
    win.get_win_folder_from_registry = _no_registry_folder

except ImportError:
    # If pip/_vendor/platformdirs isn't present or changes location in the future,
    # gracefully do nothing.
    pass