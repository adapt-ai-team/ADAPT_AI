"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverModelStateApi = void 0;
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const utils_1 = require("../utils/utils");
class ShapeDiverModelStateApi extends sdk_geometry_api_sdk_core_1.BaseResourceApi {
    constructor(api) {
        super(api);
    }
    exists(modelStateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const [_, status] = yield this.api.head(this.buildModelStateUri(modelStateId), { disableAuthorization: true });
                    return status === 200;
                }
                catch (e) {
                    if (e instanceof sdk_geometry_api_sdk_core_1.ShapeDiverResponseError && e.status === 404)
                        return false;
                    else
                        throw e;
                }
            }));
        });
    }
    get(modelStateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(this.buildModelStateUri(modelStateId)))[1];
            }));
        });
    }
    delete(modelStateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                yield this.api.delete(this.buildModelStateUri(modelStateId));
            }));
        });
    }
    getData(modelStateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildModelStateUri(modelStateId)}/data`))[1];
            }));
        });
    }
    hasImage(modelStateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const [_, status] = yield this.api.head(`${this.buildModelStateUri(modelStateId)}/image`, { disableAuthorization: true });
                    return status === 200;
                }
                catch (e) {
                    if (e instanceof sdk_geometry_api_sdk_core_1.ShapeDiverResponseError && e.status === 404)
                        return false;
                    else
                        throw e;
                }
            }));
        });
    }
    getImage(modelStateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const [header, data] = yield this.api.get(`${this.buildModelStateUri(modelStateId)}/image`, undefined, {
                    responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA,
                    disableAuthorization: true,
                });
                const contentType = (_a = header["Content-Type"]) !== null && _a !== void 0 ? _a : header["content-type"];
                return [data, contentType];
            }));
        });
    }
    list(modelId, offset) {
        return __awaiter(this, void 0, void 0, function* () {
            const queries = [];
            if (offset !== undefined)
                queries.push("offset=" + offset);
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildModelStateUri()}/model/${modelId}/list`, queries))[1];
            }));
        });
    }
    create(sessionId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.post(`${this.buildSessionUri(sessionId)}/model-state`, undefined, body))[1];
            }));
        });
    }
}
exports.ShapeDiverModelStateApi = ShapeDiverModelStateApi;
//# sourceMappingURL=ShapeDiverModelStateApi.js.map