import { ShapeDiverRequestCustomization, ShapeDiverRequestExport, ShapeDiverResponseDto, ShapeDiverResponseAssetUploadHeaders } from "@shapediver/api.geometry-api-dto-v2";
import { BaseResourceApi, ShapeDiverSdkApi, ShapeDiverSdkApiResponseType } from "@shapediver/sdk.geometry-api-sdk-core";
import { ShapeDiverSdk } from "../ShapeDiverSdk";
type ShapeDiverSdkUtilsDownloadType<T extends ShapeDiverSdkApiResponseType> = T extends ShapeDiverSdkApiResponseType.TEXT ? string : T extends ShapeDiverSdkApiResponseType.JSON ? Record<string, any> : T extends ShapeDiverSdkApiResponseType.DATA ? ArrayBuffer : never;
export declare class ShapeDiverUtilsApi extends BaseResourceApi {
    constructor(api: ShapeDiverSdkApi);
    upload(url: string, data: ArrayBuffer | Record<string, any> | string, contentType: string, filename?: string): Promise<any>;
    uploadAsset(url: string, data: ArrayBuffer | Record<string, any> | string, headers: ShapeDiverResponseAssetUploadHeaders): Promise<any>;
    download<T extends ShapeDiverSdkApiResponseType>(url: string, responseType: T): Promise<[Record<string, any>, ShapeDiverSdkUtilsDownloadType<T>]>;
    submitAndWaitForCustomization(sdk: ShapeDiverSdk, sessionId: string, body: ShapeDiverRequestCustomization, maxWaitMsec?: number): Promise<ShapeDiverResponseDto>;
    submitAndWaitForExport(sdk: ShapeDiverSdk, sessionId: string, body: ShapeDiverRequestExport, maxWaitMsec?: number): Promise<ShapeDiverResponseDto>;
    private static waitForCustomizationResult;
    private static waitForExportResult;
    private static getMaxOutputDelay;
    private static getMaxExportDelay;
}
export {};
//# sourceMappingURL=ShapeDiverUtilsApi.d.ts.map