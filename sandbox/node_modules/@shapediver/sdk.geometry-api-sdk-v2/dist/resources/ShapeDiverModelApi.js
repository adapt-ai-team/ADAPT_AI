"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverModelApi = void 0;
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const utils_1 = require("../utils/utils");
class ShapeDiverModelApi extends sdk_geometry_api_sdk_core_1.BaseResourceApi {
    constructor(api) {
        super(api);
    }
    get(modelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(this.buildModelUri(modelId)))[1];
            }));
        });
    }
    create(body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.post(this.commonPath, undefined, body))[1];
            }));
        });
    }
    update(modelId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.put(this.buildModelUri(modelId), undefined, body))[1];
            }));
        });
    }
    delete(modelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.delete(this.buildModelUri(modelId)))[1];
            }));
        });
    }
    list(offset) {
        return __awaiter(this, void 0, void 0, function* () {
            const queries = [];
            if (offset !== undefined)
                queries.push("offset=" + offset);
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.commonPath}/list`, queries))[1];
            }));
        });
    }
    getConfig(modelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(this.buildModelUri(modelId) + "/config"))[1];
            }));
        });
    }
    createConfig(modelId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.post(this.buildModelUri(modelId) + "/config", undefined, body))[1];
            }));
        });
    }
    updateConfig(modelId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.patch(this.buildModelUri(modelId) + "/config", undefined, body))[1];
            }));
        });
    }
    getFile(modelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(this.buildModelUri(modelId) + "/file/download", undefined, {
                    contentType: "application/json",
                    responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA,
                }))[1];
            }));
        });
    }
    setDefaultParams(modelId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.patch(this.buildModelUri(modelId) + "/parameter/defval", undefined, body))[1];
            }));
        });
    }
    updateParameterDefinitions(modelId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.patch(this.buildModelUri(modelId) + "/parameter", undefined, body))[1];
            }));
        });
    }
    queryComputations(modelId, timestampFrom, timestampTo, limit, strictLimit, order, status, type, offset) {
        return __awaiter(this, void 0, void 0, function* () {
            const queries = [];
            if (timestampFrom !== undefined)
                queries.push("timestamp_from=" + timestampFrom);
            if (timestampTo !== undefined)
                queries.push("timestamp_to=" + timestampTo);
            if (limit !== undefined)
                queries.push("limit=" + limit);
            if (strictLimit !== undefined)
                queries.push("strict_limit=" + strictLimit);
            if (order !== undefined)
                queries.push("order=" + order);
            if (status !== undefined)
                queries.push("status=" + status);
            if (type !== undefined)
                queries.push("type=" + type);
            if (offset !== undefined)
                queries.push("offset=" + offset);
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(this.buildModelUri(modelId) + "/computations", queries))[1];
            }));
        });
    }
    enqueueCleanupExports(modelId, untilLastSeen) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.post(this.buildModelUri(modelId) + "/cleanup/export", [`untilLastSeen=${untilLastSeen}`]))[1];
            }));
        });
    }
    enqueueCleanupOutputs(modelId, untilLastSeen) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.post(this.buildModelUri(modelId) + "/cleanup/output", [`untilLastSeen=${untilLastSeen}`]))[1];
            }));
        });
    }
    enqueueCleanupTextures(modelId, untilLastSeen) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.post(this.buildModelUri(modelId) + "/cleanup/texture", [`untilLastSeen=${untilLastSeen}`]))[1];
            }));
        });
    }
    getCleanupStatus(modelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(this.buildModelUri(modelId) + "/cleanup/status"))[1];
            }));
        });
    }
}
exports.ShapeDiverModelApi = ShapeDiverModelApi;
//# sourceMappingURL=ShapeDiverModelApi.js.map