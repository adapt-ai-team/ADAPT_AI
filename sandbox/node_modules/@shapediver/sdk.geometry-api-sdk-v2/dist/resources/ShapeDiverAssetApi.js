"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverAssetApi = void 0;
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const utils_1 = require("../utils/utils");
const apiAssetExportUri = /.+\/session\/.+\/export\/.+/;
const apiAssetOutputUri = /.+\/session\/.+\/output\/.+/;
const apiAssetTextureUri = /.+\/session\/.+\/texture\/.+/;
const cdnAssetUri = /.+\/cdn-asset-(exports|outputs|textures)\/.+/;
const cdnAssetExportUri = /.+\/cdn-asset-exports\/.+/;
const cdnAssetOutputUri = /.+\/cdn-asset-outputs\/.+/;
const cdnAssetTextureUri = /.+\/cdn-asset-textures\/.+/;
const directDownloadUri = /^(http[s]?:\/\/)?(viewer|textures|downloads)\.shapediver\.com(\/.*)?$/;
class ShapeDiverAssetApi extends sdk_geometry_api_sdk_core_1.BaseResourceApi {
    constructor(api) {
        super(api);
    }
    getExport(sessionId, assetData) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const [header, data] = yield this.api.get(`${this.buildSessionUri(sessionId)}/export/${assetData}`, undefined, { responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA });
                const contentType = (_a = header["Content-Type"]) !== null && _a !== void 0 ? _a : header["content-type"];
                return [data, contentType];
            }));
        });
    }
    getOutput(sessionId, assetData) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const [header, data] = yield this.api.get(`${this.buildSessionUri(sessionId)}/output/${assetData}`, undefined, { responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA });
                const contentType = (_a = header["Content-Type"]) !== null && _a !== void 0 ? _a : header["content-type"];
                return [data, contentType];
            }));
        });
    }
    getSdtfJsonContent(sessionId, assetData) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildSessionUri(sessionId)}/output/${assetData}`, undefined, {
                    responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.JSON,
                    accept: "model/vnd.sdtf+json",
                }))[1];
            }));
        });
    }
    getTexture(sessionId, assetData) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const [header, data] = yield this.api.get(`${this.buildSessionUri(sessionId)}/texture/${assetData}`, undefined, { responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA });
                const contentType = (_a = header["Content-Type"]) !== null && _a !== void 0 ? _a : header["content-type"];
                return [data, contentType];
            }));
        });
    }
    getGltf(sessionId, assetData) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildSessionUri(sessionId)}/gltf/${assetData}`, undefined, { responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA }))[1];
            }));
        });
    }
    getUsdz(sessionId, assetData) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildSessionUri(sessionId)}/usdz/${assetData}`, undefined, { responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA }))[1];
            }));
        });
    }
    downloadImage(sessionId, url) {
        return __awaiter(this, void 0, void 0, function* () {
            let targetUrl, queries;
            if (apiAssetTextureUri.test(url) ||
                cdnAssetTextureUri.test(url) ||
                directDownloadUri.test(url)) {
                targetUrl = url;
                queries = [];
            }
            else {
                targetUrl = `${this.buildSessionUri(sessionId)}/image`;
                queries = [`url=${(0, utils_1.encodeBase64)(url)}`];
            }
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const [header, data] = yield this.api.get(targetUrl, queries, {
                    responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA,
                    disableAuthorization: cdnAssetUri.test(url) || directDownloadUri.test(url),
                    disableCustomHeaders: cdnAssetUri.test(url) || directDownloadUri.test(url),
                });
                const contentType = (_a = header["Content-Type"]) !== null && _a !== void 0 ? _a : header["content-type"];
                return [data, contentType];
            }));
        });
    }
    getAsset(url) {
        return __awaiter(this, void 0, void 0, function* () {
            let type;
            if (apiAssetExportUri.test(url) || cdnAssetExportUri.test(url))
                type = "export";
            else if (apiAssetOutputUri.test(url) || cdnAssetOutputUri.test(url))
                type = "output";
            else if (apiAssetTextureUri.test(url) || cdnAssetTextureUri.test(url))
                type = "texture";
            else
                throw new sdk_geometry_api_sdk_core_1.ShapeDiverError("Cannot fetch asset: Invalid URL (only ShapeDiver asset URLs are allowed).");
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const [header, data] = yield this.api.get(url, undefined, {
                    responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA,
                    disableAuthorization: cdnAssetUri.test(url),
                    disableCustomHeaders: cdnAssetUri.test(url),
                });
                const contentType = (_a = header["Content-Type"]) !== null && _a !== void 0 ? _a : header["content-type"];
                return [data, contentType, type];
            }));
        });
    }
}
exports.ShapeDiverAssetApi = ShapeDiverAssetApi;
//# sourceMappingURL=ShapeDiverAssetApi.js.map