"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverFileApi = void 0;
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const utils_1 = require("../utils/utils");
class ShapeDiverFileApi extends sdk_geometry_api_sdk_core_1.BaseResourceApi {
    constructor(api) {
        super(api);
    }
    list(sessionId, paramId, offset) {
        return __awaiter(this, void 0, void 0, function* () {
            const queries = [];
            if (offset !== undefined)
                queries.push("offset=" + offset);
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildSessionUri(sessionId)}/file/${paramId}/list`, queries))[1];
            }));
        });
    }
    info(sessionId, paramId, fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                const headers = (yield this.api.head(`${this.buildSessionUri(sessionId)}/file/${paramId}/${fileId}`))[0];
                const res = {
                    size: Number(headers.get("Content-Length") || headers.get("content-length")),
                };
                const contentDispositionHeader = headers.get("Content-Disposition") ||
                    headers.get("content-disposition");
                if (typeof contentDispositionHeader === "string")
                    res.filename = (0, utils_1.filenameFromContentDisposition)(contentDispositionHeader);
                return res;
            }));
        });
    }
    get(sessionId, paramId, fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.get(`${this.buildSessionUri(sessionId)}/file/${paramId}/${fileId}`, undefined, { responseType: sdk_geometry_api_sdk_core_1.ShapeDiverSdkApiResponseType.DATA }))[1];
            }));
        });
    }
    delete(sessionId, paramId, fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.delete(`${this.buildSessionUri(sessionId)}/file/${paramId}/${fileId}`))[1];
            }));
        });
    }
    requestUpload(sessionId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, utils_1.sendRequest)(() => __awaiter(this, void 0, void 0, function* () {
                return (yield this.api.post(this.buildSessionUri(sessionId) + "/file/upload", undefined, body))[1];
            }));
        });
    }
}
exports.ShapeDiverFileApi = ShapeDiverFileApi;
//# sourceMappingURL=ShapeDiverFileApi.js.map