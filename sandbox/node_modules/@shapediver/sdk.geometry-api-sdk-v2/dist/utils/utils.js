"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGBError = isGBError;
exports.isGBGenericError = isGBGenericError;
exports.isGBRequestError = isGBRequestError;
exports.isGBResponseError = isGBResponseError;
exports.sendRequest = sendRequest;
exports.sleep = sleep;
exports.encodeBase64 = encodeBase64;
exports.contentDispositionFromFilename = contentDispositionFromFilename;
exports.filenameFromContentDisposition = filenameFromContentDisposition;
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const ShapeDiverErrors_1 = require("../ShapeDiverErrors");
function isGBError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        Object.values(sdk_geometry_api_sdk_core_1.ShapeDiverErrorType).includes(e.errorType));
}
function isGBGenericError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType === sdk_geometry_api_sdk_core_1.ShapeDiverErrorType.Generic);
}
function isGBRequestError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType === sdk_geometry_api_sdk_core_1.ShapeDiverErrorType.Request);
}
function isGBResponseError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType === sdk_geometry_api_sdk_core_1.ShapeDiverErrorType.Response);
}
function sendRequest(call) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const retryLimit = 5;
        let retryCounter = 0;
        while (retryCounter < retryLimit) {
            try {
                return yield call();
            }
            catch (e) {
                retryCounter++;
                if (e instanceof sdk_geometry_api_sdk_core_1.ShapeDiverResponseError) {
                    if (e.status === 429) {
                        const seconds = (_a = e.headers["retry-after"]) !== null && _a !== void 0 ? _a : 60;
                        yield sleep(Number(seconds) * 1000);
                        continue;
                    }
                    else if (e.status === 502) {
                        yield sleep(1000);
                        continue;
                    }
                    throw new ShapeDiverErrors_1.ShapeDiverResponseError(e);
                }
                else {
                    throw e;
                }
            }
        }
        throw new sdk_geometry_api_sdk_core_1.ShapeDiverError("Could not send request: Retry-limit reached");
    });
}
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
function encodeBase64(str) {
    try {
        return btoa(str);
    }
    catch (err) {
        return Buffer.from(str).toString("base64");
    }
}
function contentDispositionFromFilename(filename) {
    const asciiName = filename.replace(/[^\x00-\x7F]/g, "");
    let header = `attachment; filename="${asciiName}"`;
    if (filename.length !== asciiName.length) {
        header += `; filename*=UTF-8''${encodeURIComponent(filename)}`;
    }
    return header;
}
function filenameFromContentDisposition(contentDisposition) {
    var _a;
    let filename, filenameStar;
    const match = contentDisposition.match(/filename="([^"]+)"/);
    if (match)
        filename = match[1];
    const matchStar = contentDisposition.match(/filename\*=([^\'\']+\'\')?(.+)/);
    if (matchStar) {
        const encoding = matchStar[1] ? matchStar[1] : "utf-8";
        const encodedName = (_a = matchStar[2]) !== null && _a !== void 0 ? _a : matchStar[1];
        if (encoding.toLowerCase().startsWith("utf-8")) {
            filenameStar = decodeURIComponent(encodedName);
        }
    }
    return filenameStar !== null && filenameStar !== void 0 ? filenameStar : filename;
}
//# sourceMappingURL=utils.js.map