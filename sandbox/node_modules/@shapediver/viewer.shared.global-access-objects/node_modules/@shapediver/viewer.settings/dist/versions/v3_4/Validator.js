"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const zod_1 = require("zod");
const orbitControlsSchema = zod_1.z.object({
    autoRotationSpeed: zod_1.z.number(),
    damping: zod_1.z.number(),
    enableAutoRotation: zod_1.z.boolean(),
    enableKeyPan: zod_1.z.boolean(),
    enablePan: zod_1.z.boolean(),
    enableRotation: zod_1.z.boolean(),
    enableZoom: zod_1.z.boolean(),
    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),
    keyPanSpeed: zod_1.z.number(),
    movementSmoothness: zod_1.z.number(),
    restrictions: zod_1.z.object({
        position: zod_1.z.object({
            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),
            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),
        }),
        target: zod_1.z.object({
            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),
            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),
        }),
        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),
        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),
    }),
    rotationSpeed: zod_1.z.number(),
    panSpeed: zod_1.z.number(),
    zoomSpeed: zod_1.z.number(),
});
const orthographicControlsSchema = zod_1.z.object({
    damping: zod_1.z.number(),
    enableKeyPan: zod_1.z.boolean(),
    enablePan: zod_1.z.boolean(),
    enableZoom: zod_1.z.boolean(),
    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),
    keyPanSpeed: zod_1.z.number(),
    movementSmoothness: zod_1.z.number(),
    panSpeed: zod_1.z.number(),
    zoomSpeed: zod_1.z.number(),
});
const orthographicCameraSchema = zod_1.z.object({
    name: zod_1.z.string().optional(),
    type: zod_1.z.string(),
    autoAdjust: zod_1.z.boolean(),
    cameraMovementDuration: zod_1.z.number(),
    controls: orthographicControlsSchema,
    enableCameraControls: zod_1.z.boolean(),
    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),
    revertAtMouseUp: zod_1.z.boolean(),
    revertAtMouseUpDuration: zod_1.z.number(),
    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),
    zoomExtentsFactor: zod_1.z.number().positive(),
});
const perspectiveCameraSchema = zod_1.z.object({
    name: zod_1.z.string().optional(),
    type: zod_1.z.string(),
    autoAdjust: zod_1.z.boolean(),
    cameraMovementDuration: zod_1.z.number(),
    controls: orbitControlsSchema,
    enableCameraControls: zod_1.z.boolean(),
    fov: zod_1.z.number().positive(),
    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),
    revertAtMouseUp: zod_1.z.boolean(),
    revertAtMouseUpDuration: zod_1.z.number(),
    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),
    zoomExtentsFactor: zod_1.z.number().positive(),
});
const cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, orthographicCameraSchema]));
const ambientLightSchema = zod_1.z.object({
    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),
    intensity: zod_1.z.number()
});
const directionalLightSchema = zod_1.z.object({
    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),
    intensity: zod_1.z.number(),
    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
    castShadow: zod_1.z.boolean(),
    shadowMapResolution: zod_1.z.number().optional(),
    shadowMapBias: zod_1.z.number().optional()
});
const hemisphereLightSchema = zod_1.z.object({
    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),
    intensity: zod_1.z.number(),
    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),
});
const pointLightSchema = zod_1.z.object({
    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),
    intensity: zod_1.z.number(),
    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
    distance: zod_1.z.number(),
    decay: zod_1.z.number(),
});
const spotLightSchema = zod_1.z.object({
    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),
    intensity: zod_1.z.number(),
    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
    distance: zod_1.z.number(),
    decay: zod_1.z.number(),
    angle: zod_1.z.number(),
    penumbra: zod_1.z.number(),
});
const lightSchema = zod_1.z.record(zod_1.z.object({
    name: zod_1.z.string().optional(),
    lights: zod_1.z.record(zod_1.z.object({
        name: zod_1.z.string().optional(),
        type: zod_1.z.string(),
        order: zod_1.z.number().optional(),
        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])
    }))
}));
const schema = zod_1.z.object({
    build_date: zod_1.z.string().optional(),
    build_version: zod_1.z.string().optional(),
    settings_version: zod_1.z.string(),
    ar: zod_1.z.object({
        enable: zod_1.z.boolean(),
        autoScaling: zod_1.z.boolean(),
    }).optional(),
    camera: zod_1.z.object({
        cameraId: zod_1.z.string(),
        cameras: cameraSchema
    }),
    environment: zod_1.z.object({
        clearAlpha: zod_1.z.number(),
        clearColor: zod_1.z.string(),
        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),
        mapAsBackground: zod_1.z.boolean(),
        mapResolution: zod_1.z.string(),
        rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number(), w: zod_1.z.number() }),
        blurriness: zod_1.z.number(),
        intensity: zod_1.z.number(),
    }),
    environmentGeometry: zod_1.z.object({
        gridColor: zod_1.z.string(),
        gridVisibility: zod_1.z.boolean(),
        groundPlaneColor: zod_1.z.string(),
        groundPlaneVisibility: zod_1.z.boolean(),
        groundPlaneShadowColor: zod_1.z.string(),
        groundPlaneShadowVisibility: zod_1.z.boolean(),
    }),
    general: zod_1.z.object({
        transformation: zod_1.z.object({
            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })
        }),
        blurWhenBusy: zod_1.z.boolean(),
        commitSettings: zod_1.z.boolean(),
        commitParameters: zod_1.z.boolean(),
        pointSize: zod_1.z.number(),
        showMessages: zod_1.z.boolean(),
        defaultMaterialColor: zod_1.z.string(),
    }),
    light: zod_1.z.object({
        lightSceneId: zod_1.z.string().optional(),
        lightScenes: lightSchema,
    }),
    rendering: zod_1.z.object({
        ambientOcclusion: zod_1.z.boolean(),
        ambientOcclusionIntensity: zod_1.z.number().min(0),
        automaticColorAdjustment: zod_1.z.boolean(),
        beautyRenderDelay: zod_1.z.number(),
        beautyRenderBlendingDuration: zod_1.z.number(),
        lights: zod_1.z.boolean(),
        outputEncoding: zod_1.z.string(),
        physicallyCorrectLights: zod_1.z.boolean(),
        shadows: zod_1.z.boolean(),
        textureEncoding: zod_1.z.string(),
        toneMapping: zod_1.z.string(),
        toneMappingExposure: zod_1.z.number(),
    }),
    session: zod_1.z.record(zod_1.z.object({
        order: zod_1.z.number().optional(),
        displayname: zod_1.z.string().optional(),
        hidden: zod_1.z.boolean().optional()
    })),
}).strict();
const validate = (s) => {
    const result = schema.parse(s);
    s = result;
};
exports.validate = validate;
//# sourceMappingURL=Validator.js.map