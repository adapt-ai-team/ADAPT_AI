import { z } from 'zod';
export declare const generalSettingsSchema: z.ZodObject<{
    transformation: z.ZodObject<{
        scale: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
        translation: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
        rotation: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    }, {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    }>;
    blurWhenBusy: z.ZodBoolean;
    commitSettings: z.ZodBoolean;
    commitParameters: z.ZodBoolean;
    pointSize: z.ZodNumber;
    showMessages: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    transformation: {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    };
    blurWhenBusy: boolean;
    commitSettings: boolean;
    commitParameters: boolean;
    pointSize: number;
    showMessages: boolean;
}, {
    transformation: {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    };
    blurWhenBusy: boolean;
    commitSettings: boolean;
    commitParameters: boolean;
    pointSize: number;
    showMessages: boolean;
}>;
export declare const materialSettingsSchema: z.ZodObject<{
    defaultMaterialColor: z.ZodString;
    materialOverrideType: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    defaultMaterialColor: string;
    materialOverrideType?: string | undefined;
}, {
    defaultMaterialColor: string;
    materialOverrideType?: string | undefined;
}>;
export declare const environmentGeometrySettingsSchema: z.ZodObject<{
    gridColor: z.ZodString;
    gridVisibility: z.ZodBoolean;
    groundPlaneColor: z.ZodString;
    groundPlaneVisibility: z.ZodBoolean;
    groundPlaneShadowColor: z.ZodString;
    groundPlaneShadowVisibility: z.ZodBoolean;
    contactShadowVisibility: z.ZodBoolean;
    contactShadowOpacity: z.ZodNumber;
    contactShadowBlur: z.ZodNumber;
    contactShadowHeight: z.ZodNumber;
    contactShadowDarkness: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    gridColor: string;
    gridVisibility: boolean;
    groundPlaneColor: string;
    groundPlaneVisibility: boolean;
    groundPlaneShadowColor: string;
    groundPlaneShadowVisibility: boolean;
    contactShadowVisibility: boolean;
    contactShadowOpacity: number;
    contactShadowBlur: number;
    contactShadowHeight: number;
    contactShadowDarkness: number;
}, {
    gridColor: string;
    gridVisibility: boolean;
    groundPlaneColor: string;
    groundPlaneVisibility: boolean;
    groundPlaneShadowColor: string;
    groundPlaneShadowVisibility: boolean;
    contactShadowVisibility: boolean;
    contactShadowOpacity: number;
    contactShadowBlur: number;
    contactShadowHeight: number;
    contactShadowDarkness: number;
}>;
export declare const validate: (s: unknown) => void;
//# sourceMappingURL=Validator.d.ts.map