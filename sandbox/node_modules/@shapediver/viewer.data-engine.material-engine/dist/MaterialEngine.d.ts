import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { MapData, MaterialStandardData } from '@shapediver/viewer.shared.types';
import { ShapeDiverResponseOutputContent } from '@shapediver/sdk.geometry-api-sdk-v2';
import { IMaterialContentDataV1, IMaterialContentDataV2, IMaterialContentDataV3, ITexture } from '@shapediver/viewer.data-engine.shared-types';
export declare class MaterialEngine {
    private readonly _converter;
    private readonly _httpClient;
    private readonly _logger;
    constructor();
    /**
       * Load the material content into a scene graph node.
       *
       * @param content the material content
       * @returns the scene graph node
       */
    loadContent(content: ShapeDiverResponseOutputContent): Promise<TreeNode>;
    private assignGeneralDefinition;
    private assignSpecificDefinition;
    private getClassAndSpecificID;
    loadMap(url: string, id?: string): Promise<MapData | null>;
    loadMapWithProperties(texture: ITexture): Promise<MapData | null>;
    loadMaterialV1(data: IMaterialContentDataV1, material: MaterialStandardData): Promise<void>;
    loadMaterialV2(data: IMaterialContentDataV2, material: MaterialStandardData): Promise<void>;
    loadMaterialV3(data: IMaterialContentDataV3, material: MaterialStandardData): Promise<void>;
    loadPresetMaterial(preset: number, material: MaterialStandardData): Promise<void>;
}
//# sourceMappingURL=MaterialEngine.d.ts.map