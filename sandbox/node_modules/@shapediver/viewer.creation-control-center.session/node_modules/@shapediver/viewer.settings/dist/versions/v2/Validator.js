"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const zod_1 = require("zod");
const lightSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional(),
    type: zod_1.z.string(),
    order: zod_1.z.number().optional(),
    properties: zod_1.z.object({
        color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),
        direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),
        position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),
        target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),
        castShadow: zod_1.z.boolean().optional(),
        skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),
        groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),
        intensity: zod_1.z.number().optional(),
        distance: zod_1.z.number().optional(),
        angle: zod_1.z.number().optional(),
        penumbra: zod_1.z.number().optional(),
        decay: zod_1.z.number().optional(),
        shadowMapResolution: zod_1.z.number().optional(),
        shadowMapBias: zod_1.z.number().optional()
    })
});
const lightScenesSchema = zod_1.z.record(zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional(),
    lights: zod_1.z.record(lightSchema)
}));
const schema = zod_1.z.object({
    build_date: zod_1.z.string().optional(),
    build_version: zod_1.z.string().optional(),
    settings_version: zod_1.z.string(),
    ar: zod_1.z.object({
        enableCameraSync: zod_1.z.boolean().optional(),
        enableCameraSyncInitial: zod_1.z.boolean().optional(),
        enableLightingEstimation: zod_1.z.boolean().optional(),
        enableTouchControls: zod_1.z.boolean().optional(),
        enableTouchControlRotation: zod_1.z.boolean().optional(),
        enableAutomaticPlacement: zod_1.z.boolean().optional(),
        defaultHitTestType: zod_1.z.string().optional(),
    }).optional(),
    defaultMaterial: zod_1.z.object({
        bumpAmplitude: zod_1.z.number().optional(),
        color: zod_1.z.union([zod_1.z.string(), zod_1.z.number().array()]).optional(),
        metalness: zod_1.z.number().optional(),
        roughness: zod_1.z.number().optional(),
    }),
    parameters: zod_1.z.object({
        controlOrder: zod_1.z.string().array().optional(),
        controlNames: zod_1.z.record(zod_1.z.string()).optional(),
        parametersHidden: zod_1.z.string().array().optional(),
    }).optional(),
    viewer: zod_1.z.object({
        blurSceneWhenBusy: zod_1.z.boolean(),
        ignoreSuperseded: zod_1.z.boolean().optional(),
        loggingLevel: zod_1.z.number().optional(),
        messageLoggingLevel: zod_1.z.number().optional(),
        viewerRuntimeId: zod_1.z.string().optional(),
        hasRestoredSettings: zod_1.z.boolean().optional(),
        useModelSettings: zod_1.z.boolean().optional(),
        showMessages: zod_1.z.boolean().optional(),
        commitSettings: zod_1.z.boolean(),
        commitParameters: zod_1.z.boolean(),
        scene: zod_1.z.object({
            show: zod_1.z.boolean().optional(),
            showSceneTransition: zod_1.z.string().optional(),
            duration: zod_1.z.number().optional(),
            fullscreen: zod_1.z.boolean().optional(),
            gridVisibility: zod_1.z.boolean(),
            groundPlaneReflectionThreshold: zod_1.z.number().optional(),
            groundPlaneReflectionVisibility: zod_1.z.boolean().optional(),
            groundPlaneVisibility: zod_1.z.boolean(),
            camera: zod_1.z.object({
                autoAdjust: zod_1.z.boolean(),
                cameraMovementDuration: zod_1.z.number(),
                cameraTypes: zod_1.z.object({
                    perspective: zod_1.z.object({
                        default: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }) }),
                        fov: zod_1.z.number(),
                        controls: zod_1.z.number().optional(),
                    }),
                    orthographic: zod_1.z.object({
                        default: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }) }),
                    }),
                    active: zod_1.z.number()
                }),
                controls: zod_1.z.object({
                    orbit: zod_1.z.object({
                        autoRotationSpeed: zod_1.z.number(),
                        damping: zod_1.z.number(),
                        enableAutoRotation: zod_1.z.boolean(),
                        enableKeyPan: zod_1.z.boolean(),
                        enablePan: zod_1.z.boolean(),
                        enableRotation: zod_1.z.boolean(),
                        enableZoom: zod_1.z.boolean(),
                        input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),
                        keyPanSpeed: zod_1.z.number(),
                        movementSmoothness: zod_1.z.number(),
                        restrictions: zod_1.z.object({
                            position: zod_1.z.object({
                                cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }).optional(),
                                sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }).optional(),
                            }).optional(),
                            target: zod_1.z.object({
                                cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }).optional(),
                                sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }).optional(),
                            }).optional(),
                            rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }).optional(),
                            zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }).optional(),
                        }),
                        rotationSpeed: zod_1.z.number(),
                        panSpeed: zod_1.z.number(),
                        zoomSpeed: zod_1.z.number(),
                    }),
                    fps: zod_1.z.object({}),
                    orthographic: zod_1.z.object({
                        damping: zod_1.z.number(),
                        enableKeyPan: zod_1.z.boolean(),
                        enablePan: zod_1.z.boolean(),
                        enableZoom: zod_1.z.boolean(),
                        input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),
                        keyPanSpeed: zod_1.z.number(),
                        movementSmoothness: zod_1.z.number(),
                        panSpeed: zod_1.z.number(),
                        zoomSpeed: zod_1.z.number(),
                    })
                }),
                enableCameraControls: zod_1.z.boolean(),
                revertAtMouseUp: zod_1.z.boolean(),
                revertAtMouseUpDuration: zod_1.z.number(),
                zoomExtentsFactor: zod_1.z.number().positive(),
            }),
            lights: zod_1.z.object({
                helper: zod_1.z.boolean().optional(),
                lightScene: zod_1.z.string(),
                lightScenes: lightScenesSchema.nullable()
            }),
            material: zod_1.z.object({
                environmentMap: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),
                environmentMapAsBackground: zod_1.z.boolean(),
                environmentMapResolution: zod_1.z.enum(['256', '512', '1024', '2048'])
            }),
            render: zod_1.z.object({
                ambientOcclusion: zod_1.z.boolean(),
                beautyRenderDelay: zod_1.z.number(),
                beautyRenderBlendingDuration: zod_1.z.number().optional(),
                clearAlpha: zod_1.z.number(),
                clearColor: zod_1.z.string(),
                pointSize: zod_1.z.number(),
                shadows: zod_1.z.boolean(),
                sao: zod_1.z.object({
                    samples: zod_1.z.number().positive().optional(),
                    kernelRadius: zod_1.z.number().positive().optional(),
                    intensity: zod_1.z.number().positive().optional(),
                    standardDev: zod_1.z.number().optional(),
                })
            }),
        }),
    }),
}).strict();
const validate = (s) => {
    const result = schema.parse(s);
    s = result;
};
exports.validate = validate;
//# sourceMappingURL=Validator.js.map