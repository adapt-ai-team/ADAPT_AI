import { ISdtfBufferCache } from './ISdtfBufferCache';
export declare class SdtfBinaryBufferCache implements ISdtfBufferCache {
    readonly cacheIdFullBuffer = "full";
    readonly cache: {
        [key: string]: {
            [offset: string]: DataView;
        };
    };
    constructor();
    calcCacheKey(uri?: string): string;
    calcCacheId(offset: number, length: number): string;
    loadFromCache(key: string, offset: number, length: number): DataView | undefined;
    storeInCache(key: string, id: string, buffer: DataView): void;
    setBinaryBody(binaryBody?: DataView): void;
    getBuffer(uri: string | undefined, offset: number, length: number): Promise<DataView>;
    acquireBuffer(uri: string | undefined, offset: number, length: number): Promise<DataView>;
}
//# sourceMappingURL=SdtfBinaryBufferCache.d.ts.map