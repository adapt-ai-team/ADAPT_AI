export declare const extensionToMimeTypeMapping: {
    [key: string]: string[];
};
/**
 * Given a file name, extract the file extension.
 * @param fileName
 * @returns
 */
export declare const getFileExtension: (fileName: string) => string | undefined;
/**
 * Guess the mime type of a file by its extension.
 * @param fileName
 * @returns
 */
export declare const guessMimeTypeByExt: (fileName: string) => string;
/**
 * In case a file is missing a mime type, try to guess it from the file name.
 * @param file
 * @returns
 */
export declare const guessMissingMimeType: (file: File | string) => File | string;
/**
 * Download a blob and use the specified filename.
 *
 * @param blob
 * @param filename
 */
export declare const downloadBlobFile: (blob: Blob, filename: string) => void;
/**
 * Download a blob and use the specified filename with the save as dialog.
 * @param blob
 * @param filename
 * @returns
 */
export declare const downloadBlobFileSaveAs: (blob: Blob, filename: string) => Promise<any>;
/**
 * Fetch and save a file. Optionally, a Response object resulting from a previous fetch call
 * can be provided instead of a URL.
 *
 * @param urlOrResponse URL to fetch from, or a Response object resulting from a previous fetch call.
 * @param filename
 * @param token If provided a token, use that token in the Authorization header of the fetch request.
 */
export declare const fetchFileWithToken: (urlOrResponse: string | Response, filename: string, token?: string | null, finallyCb?: () => void, isSaveAs?: boolean) => Promise<void>;
/**
 * Try to guess mime types from a file name
 * @param {string} filename
 * @return {string[]} guessed mime type, empty array in case none could be guessed
 */
export declare const guessMimeTypeFromFilename: (filename: string) => string[];
/**
 * Returns the corresponding file endings for each mime type.
 * @param {string[]} mimeTypes
 * @return {string[]}
 */
export declare const mapMimeTypeToFileEndings: (mimeTypes: string[]) => string[];
/**
 * Returns an extended array of mime types.
 * The provided mime types are are mapped to file endings and the corresponding mime types are added.
 * The types are filtered to only contain unique values.
 *
 * @param {string[]} mimeTypes
 * @return {string[]}
 */
export declare const extendMimeTypes: (mimeTypes: string[]) => string[];
//# sourceMappingURL=index.d.ts.map