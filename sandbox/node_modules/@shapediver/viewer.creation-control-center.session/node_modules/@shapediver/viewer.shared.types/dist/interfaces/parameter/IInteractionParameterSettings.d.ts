import { z } from "zod";
export declare type InteractionParameterSettingsType = "selection" | "gumball" | "dragging";
/**
 * General properties of an interaction parameter.
 */
export interface IInteractionParameterProps {
    /** If the objects are hoverable. (default: true) */
    hover?: boolean;
    /** The color of the objects when hovered. (default: '#00ff78') */
    hoverColor?: string;
    /** A prompt that can be defined which is displayed instead of the default prompt. */
    prompt?: {
        /** The title when the parameter is inactive. */
        inactiveTitle?: string;
        /** The title when the parameter is active. */
        activeTitle?: string;
        /** The text when the parameter is inactive. */
        activeText?: string;
    };
}
/**
 * The definition of an interaction parameter.
 *
 * For each type, there is a corresponding set of properties.
 */
export interface IInteractionParameterSettings {
    /** Properties of the parameter definition. */
    props: IInteractionParameterProps;
    /** Type of the interaction parameters. */
    type: InteractionParameterSettingsType;
}
export declare const ISelectionParameterJsonSchema: z.ZodObject<{
    type: z.ZodLiteral<"selection">;
    props: z.ZodObject<{
        maximumSelection: z.ZodOptional<z.ZodNumber>;
        minimumSelection: z.ZodOptional<z.ZodNumber>;
        nameFilter: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        selectionColor: z.ZodOptional<z.ZodString>;
    } & {
        hover: z.ZodOptional<z.ZodBoolean>;
        hoverColor: z.ZodOptional<z.ZodString>;
        prompt: z.ZodOptional<z.ZodObject<{
            inactiveTitle: z.ZodOptional<z.ZodString>;
            activeTitle: z.ZodOptional<z.ZodString>;
            activeText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    }, {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
}, {
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
}>;
export declare const IGumballParameterJsonSchema: z.ZodObject<{
    type: z.ZodLiteral<"gumball">;
    props: z.ZodObject<{
        enableRotation: z.ZodOptional<z.ZodBoolean>;
        enableRotationAxes: z.ZodOptional<z.ZodObject<{
            x: z.ZodOptional<z.ZodBoolean>;
            y: z.ZodOptional<z.ZodBoolean>;
            z: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }>>;
        enableScaling: z.ZodOptional<z.ZodBoolean>;
        enableScalingAxes: z.ZodOptional<z.ZodObject<{
            x: z.ZodOptional<z.ZodBoolean>;
            y: z.ZodOptional<z.ZodBoolean>;
            z: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }>>;
        enableTranslation: z.ZodOptional<z.ZodBoolean>;
        enableTranslationAxes: z.ZodOptional<z.ZodObject<{
            x: z.ZodOptional<z.ZodBoolean>;
            y: z.ZodOptional<z.ZodBoolean>;
            z: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }>>;
        nameFilter: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        scale: z.ZodOptional<z.ZodNumber>;
        space: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"world">]>>;
        selectionColor: z.ZodOptional<z.ZodString>;
    } & {
        hover: z.ZodOptional<z.ZodBoolean>;
        hoverColor: z.ZodOptional<z.ZodString>;
        prompt: z.ZodOptional<z.ZodObject<{
            inactiveTitle: z.ZodOptional<z.ZodString>;
            activeTitle: z.ZodOptional<z.ZodString>;
            activeText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    }, {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
}, {
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
}>;
export declare const IDraggingParameterJsonSchema: z.ZodObject<{
    type: z.ZodLiteral<"dragging">;
    props: z.ZodObject<{
        draggingColor: z.ZodOptional<z.ZodString>;
        objects: z.ZodOptional<z.ZodArray<z.ZodObject<{
            nameFilter: z.ZodString;
            restrictions: z.ZodArray<z.ZodString, "many">;
            dragAnchors: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                position: z.ZodArray<z.ZodNumber, "many">;
                rotation: z.ZodOptional<z.ZodObject<{
                    axis: z.ZodArray<z.ZodNumber, "many">;
                    angle: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    axis: number[];
                    angle: number;
                }, {
                    axis: number[];
                    angle: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }, {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }>, "many">>;
            dragOrigin: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }, {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }>, "many">>;
        restrictions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    } & {
        hover: z.ZodOptional<z.ZodBoolean>;
        hoverColor: z.ZodOptional<z.ZodString>;
        prompt: z.ZodOptional<z.ZodObject<{
            inactiveTitle: z.ZodOptional<z.ZodString>;
            activeTitle: z.ZodOptional<z.ZodString>;
            activeText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    }, {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}, {
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}>;
export declare const IInteractionParameterJsonSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"selection">;
    props: z.ZodObject<{
        maximumSelection: z.ZodOptional<z.ZodNumber>;
        minimumSelection: z.ZodOptional<z.ZodNumber>;
        nameFilter: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        selectionColor: z.ZodOptional<z.ZodString>;
    } & {
        hover: z.ZodOptional<z.ZodBoolean>;
        hoverColor: z.ZodOptional<z.ZodString>;
        prompt: z.ZodOptional<z.ZodObject<{
            inactiveTitle: z.ZodOptional<z.ZodString>;
            activeTitle: z.ZodOptional<z.ZodString>;
            activeText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    }, {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
}, {
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"gumball">;
    props: z.ZodObject<{
        enableRotation: z.ZodOptional<z.ZodBoolean>;
        enableRotationAxes: z.ZodOptional<z.ZodObject<{
            x: z.ZodOptional<z.ZodBoolean>;
            y: z.ZodOptional<z.ZodBoolean>;
            z: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }>>;
        enableScaling: z.ZodOptional<z.ZodBoolean>;
        enableScalingAxes: z.ZodOptional<z.ZodObject<{
            x: z.ZodOptional<z.ZodBoolean>;
            y: z.ZodOptional<z.ZodBoolean>;
            z: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }>>;
        enableTranslation: z.ZodOptional<z.ZodBoolean>;
        enableTranslationAxes: z.ZodOptional<z.ZodObject<{
            x: z.ZodOptional<z.ZodBoolean>;
            y: z.ZodOptional<z.ZodBoolean>;
            z: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }, {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        }>>;
        nameFilter: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        scale: z.ZodOptional<z.ZodNumber>;
        space: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"local">, z.ZodLiteral<"world">]>>;
        selectionColor: z.ZodOptional<z.ZodString>;
    } & {
        hover: z.ZodOptional<z.ZodBoolean>;
        hoverColor: z.ZodOptional<z.ZodString>;
        prompt: z.ZodOptional<z.ZodObject<{
            inactiveTitle: z.ZodOptional<z.ZodString>;
            activeTitle: z.ZodOptional<z.ZodString>;
            activeText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    }, {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
}, {
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"dragging">;
    props: z.ZodObject<{
        draggingColor: z.ZodOptional<z.ZodString>;
        objects: z.ZodOptional<z.ZodArray<z.ZodObject<{
            nameFilter: z.ZodString;
            restrictions: z.ZodArray<z.ZodString, "many">;
            dragAnchors: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                position: z.ZodArray<z.ZodNumber, "many">;
                rotation: z.ZodOptional<z.ZodObject<{
                    axis: z.ZodArray<z.ZodNumber, "many">;
                    angle: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    axis: number[];
                    angle: number;
                }, {
                    axis: number[];
                    angle: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }, {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }>, "many">>;
            dragOrigin: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }, {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }>, "many">>;
        restrictions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    } & {
        hover: z.ZodOptional<z.ZodBoolean>;
        hoverColor: z.ZodOptional<z.ZodString>;
        prompt: z.ZodOptional<z.ZodObject<{
            inactiveTitle: z.ZodOptional<z.ZodString>;
            activeTitle: z.ZodOptional<z.ZodString>;
            activeText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    }, {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}, {
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}>]>;
export declare const validateInteractionParameterSettings: (param: unknown) => z.SafeParseReturnType<{
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
} | {
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
} | {
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}, {
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
} | {
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
} | {
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}>;
export declare const validateSelectionParameterSettings: (param: unknown) => z.SafeParseReturnType<{
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
}, {
    type: "selection";
    props: {
        maximumSelection?: number | undefined;
        minimumSelection?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    };
}>;
export declare const validateGumballParameterSettings: (param: unknown) => z.SafeParseReturnType<{
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
}, {
    type: "gumball";
    props: {
        scale?: number | undefined;
        nameFilter?: string[] | undefined;
        selectionColor?: string | undefined;
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        enableRotation?: boolean | undefined;
        enableRotationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableScaling?: boolean | undefined;
        enableScalingAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        enableTranslation?: boolean | undefined;
        enableTranslationAxes?: {
            x?: boolean | undefined;
            y?: boolean | undefined;
            z?: boolean | undefined;
        } | undefined;
        space?: "local" | "world" | undefined;
    };
}>;
export declare const validateDraggingParameterSettings: (param: unknown) => z.SafeParseReturnType<{
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectInputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}, {
    type: "dragging";
    props: {
        hover?: boolean | undefined;
        hoverColor?: string | undefined;
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
        draggingColor?: string | undefined;
        restrictions?: z.objectOutputType<{
            id: z.ZodString;
            type: z.ZodString;
            rotation: z.ZodOptional<z.ZodObject<{
                axis: z.ZodArray<z.ZodNumber, "many">;
                angle: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                axis: number[];
                angle: number;
            }, {
                axis: number[];
                angle: number;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        objects?: {
            nameFilter: string;
            restrictions: string[];
            dragAnchors?: {
                id: string;
                position: number[];
                rotation?: {
                    axis: number[];
                    angle: number;
                } | undefined;
            }[] | undefined;
            dragOrigin?: number[] | undefined;
        }[] | undefined;
    };
}>;
//# sourceMappingURL=IInteractionParameterSettings.d.ts.map