import { AbstractTreeNodeData } from "@shapediver/viewer.shared.node-tree";
import { vec2 } from "gl-matrix";
import { IMapData, TEXTURE_FILTERING, TEXTURE_WRAPPING } from "../../interfaces/data/material/IMapData";
import { Color } from "../../types";
export declare class MapData extends AbstractTreeNodeData implements IMapData {
    #private;
    constructor(image: HTMLImageElement | ArrayBuffer, properties?: {
        asData?: boolean;
        data?: number[];
        blob?: Blob;
        wrapS?: TEXTURE_WRAPPING;
        wrapT?: TEXTURE_WRAPPING;
        minFilter?: TEXTURE_FILTERING;
        magFilter?: TEXTURE_FILTERING;
        center?: vec2;
        color?: Color;
        offset?: vec2;
        repeat?: vec2;
        rotation?: number;
        texCoord?: number;
        flipY?: boolean;
    }, id?: string, version?: string);
    get asData(): boolean;
    set asData(value: boolean);
    get blob(): Blob | undefined;
    set blob(value: Blob | undefined);
    get center(): vec2;
    set center(value: vec2);
    get color(): Color | undefined;
    set color(value: Color | undefined);
    get data(): number[] | undefined;
    set data(value: number[] | undefined);
    get flipY(): boolean;
    set flipY(value: boolean);
    get image(): HTMLImageElement | ArrayBuffer;
    set image(value: HTMLImageElement | ArrayBuffer);
    get magFilter(): TEXTURE_FILTERING;
    set magFilter(value: TEXTURE_FILTERING);
    get minFilter(): TEXTURE_FILTERING;
    set minFilter(value: TEXTURE_FILTERING);
    get offset(): vec2;
    set offset(value: vec2);
    get repeat(): vec2;
    set repeat(value: vec2);
    get rotation(): number;
    set rotation(value: number);
    get texCoord(): number | undefined;
    set texCoord(value: number | undefined);
    get wrapS(): TEXTURE_WRAPPING;
    set wrapS(value: TEXTURE_WRAPPING);
    get wrapT(): TEXTURE_WRAPPING;
    set wrapT(value: TEXTURE_WRAPPING);
    clone(): IMapData;
}
//# sourceMappingURL=MapData.d.ts.map