"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _CreationControlCenterSession_eventEngine, _CreationControlCenterSession_logger, _CreationControlCenterSession_stateEngine, _CreationControlCenterSession_uuidGenerator, _CreationControlCenterSession_firstSessionEngine;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreationControlCenterSession = void 0;
const viewer_session_engine_session_engine_1 = require("@shapediver/viewer.session-engine.session-engine");
const viewer_settings_1 = require("@shapediver/viewer.settings");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const SessionGlobalAccessObject_1 = require("./SessionGlobalAccessObject");
class CreationControlCenterSession {
    constructor() {
        // #region Properties (8)
        _CreationControlCenterSession_eventEngine.set(this, viewer_shared_services_1.EventEngine.instance);
        _CreationControlCenterSession_logger.set(this, viewer_shared_services_1.Logger.instance);
        _CreationControlCenterSession_stateEngine.set(this, viewer_shared_services_1.StateEngine.instance);
        _CreationControlCenterSession_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);
        _CreationControlCenterSession_firstSessionEngine.set(this, void 0);
        this.sessionEngines = {};
        // #endregion Private Methods (2)
    }
    // #endregion Properties (8)
    // #region Public Static Getters And Setters (1)
    static get instance() {
        return this._instance || (this._instance = new this());
    }
    // #endregion Public Static Getters And Setters (1)
    // #region Public Methods (5)
    applySettings(sessionId, response, sections) {
        sections = sections || {};
        this.sessionEngines[sessionId].applySettings(response, sections);
        const promises = [];
        if (sections.session &&
            sections.session.parameter &&
            sections.session.parameter.value)
            promises.push(this.sessionEngines[sessionId].customize());
        for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines) {
            const viewportEngineState = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r];
            if ((viewportEngineState &&
                viewportEngineState.sessionSettingsMode ===
                    viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST &&
                __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f") &&
                sessionId === __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f").id) ||
                (viewportEngineState &&
                    viewportEngineState.sessionSettingsMode ===
                        viewer_shared_services_1.SESSION_SETTINGS_MODE.MANUAL &&
                    sessionId === viewportEngineState.sessionSettingsId)) {
                viewportEngineState.settingsAssigned.reset();
                promises.push(new Promise((resolve) => {
                    var _a;
                    (_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.then(() => {
                        resolve();
                    });
                }));
                viewportEngineState.applySettings(sections.viewport);
            }
        }
        return new Promise((resolve) => Promise.all(promises).then(() => resolve()));
    }
    closeSessionEngine(id) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.sessionEngines[id])
                return;
            __classPrivateFieldGet(this, _CreationControlCenterSession_logger, "f").debugLow(`CreationControlCenter.closeSession: Closing session ${id}.`);
            if (((_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[id]) === null || _a === void 0 ? void 0 : _a.initialized.resolved) === false)
                yield new Promise((resolve) => {
                    var _a;
                    (_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[id]) === null || _a === void 0 ? void 0 : _a.initialized.then(() => resolve());
                });
            yield this.sessionEngines[id].close();
            // remove from rendering engines (also directly assigned)
            for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines) {
                const viewportEngineState = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r];
                if ((viewportEngineState &&
                    viewportEngineState.sessionSettingsMode ===
                        viewer_shared_services_1.SESSION_SETTINGS_MODE.MANUAL &&
                    viewportEngineState.sessionSettingsId === id) ||
                    (viewportEngineState &&
                        viewportEngineState.sessionSettingsMode ===
                            viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST &&
                        __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f") === this.sessionEngines[id])) {
                    viewportEngineState.reset();
                }
            }
            if (__classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f") === this.sessionEngines[id]) {
                const engines = Object.values(this.sessionEngines).filter((s) => s.id !== id);
                __classPrivateFieldSet(this, _CreationControlCenterSession_firstSessionEngine, engines.length === 0 ? undefined : engines[0], "f");
                if (__classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f")) {
                    if (!__classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[__classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f").id])
                        return;
                    Object.values(__classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines).forEach((s) => {
                        if (s)
                            s.isFirstSession = false;
                    });
                    __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[__classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f").id].isFirstSession = true;
                    const promises = [];
                    for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines) {
                        const viewportEngineState = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r];
                        if (((_b = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _b === void 0 ? void 0 : _b.settingsAssigned.resolved) === false) {
                            if (viewportEngineState &&
                                viewportEngineState.sessionSettingsMode ===
                                    viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST) {
                                promises.push(viewportEngineState.settingsAssigned);
                                this.assignSettings(viewportEngineState.id, (_c = __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f")) === null || _c === void 0 ? void 0 : _c.id);
                            }
                        }
                    }
                    yield Promise.all(promises);
                    if (this.updateSessions)
                        this.updateSessions(this.sessionEngines);
                }
            }
            (_d = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[id]) === null || _d === void 0 ? void 0 : _d.settingsRegistered.reset();
            this.sessionEngines[id] = undefined;
            delete this.sessionEngines[id];
            delete __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[id];
            __classPrivateFieldGet(this, _CreationControlCenterSession_logger, "f").debug("CreationControlCenter.closeSessionEngine: Session closed.");
            for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines)
                (_e = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _e === void 0 ? void 0 : _e.update("CreationControlCenter.closeSessionEngine");
            if (this.updateSessions)
                this.updateSessions(this.sessionEngines);
            __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CLOSED, {
                sessionId: id,
            });
        });
    }
    createSessionEngine(properties) {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = __classPrivateFieldGet(this, _CreationControlCenterSession_uuidGenerator, "f").create();
            const sessionEngineId = properties.id || __classPrivateFieldGet(this, _CreationControlCenterSession_uuidGenerator, "f").create();
            properties.id = sessionEngineId;
            properties.loadOutputs =
                properties.allowOutputLoading === false
                    ? false
                    : properties.loadOutputs;
            try {
                const eventStart = {
                    type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                    id: eventId,
                    progress: 0,
                    status: "Creating session",
                    data: { sessionId: sessionEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                // check if the given id is valid
                if (this.sessionEngines[sessionEngineId]) {
                    const eventClose = {
                        type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                        id: eventId,
                        progress: 0.1,
                        status: "Closing session with same id",
                        data: { sessionId: sessionEngineId },
                    };
                    __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);
                    __classPrivateFieldGet(this, _CreationControlCenterSession_logger, "f").warn(`CreationControlCenter.createSession: Session with this id (${sessionEngineId}) already exists. Closing initial instance.`);
                    yield this.closeSessionEngine(sessionEngineId);
                }
                // create the actual session
                const sessionEngine = new viewer_session_engine_session_engine_1.SessionEngine({
                    id: sessionEngineId,
                    guid: properties.guid,
                    ticket: properties.ticket,
                    modelViewUrl: properties.modelViewUrl,
                    excludeViewports: properties.excludeViewports,
                    buildVersion: viewer_shared_build_data_1.build_data.build_version,
                    buildDate: viewer_shared_build_data_1.build_data.build_date,
                    jwtToken: properties.jwtToken,
                    allowOutputLoading: properties.allowOutputLoading === undefined
                        ? true
                        : properties.allowOutputLoading,
                    loadSdtf: properties.loadSdtf === undefined
                        ? false
                        : properties.loadSdtf,
                    modelStateId: properties.modelStateId,
                    throwOnCustomizationError: properties.throwOnCustomizationError,
                });
                __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionEngineId] =
                    new SessionGlobalAccessObject_1.SessionGlobalAccessObject(sessionEngine);
                const eventInit = {
                    type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                    id: eventId,
                    progress: 0.25,
                    status: "Initializing session.",
                    data: { sessionId: sessionEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventInit);
                yield sessionEngine.init(properties.initialParameterValues);
                if (properties.loadOutputs !== false) {
                    if (properties.waitForOutputs !== false) {
                        yield sessionEngine.updateOutputs({
                            eventId,
                            type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                            progressRange: {
                                min: 0.25,
                                max: 0.9,
                            },
                            data: { sessionId: sessionEngineId },
                        });
                        (_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionEngineId]) === null || _a === void 0 ? void 0 : _a.initialOutputsLoaded.resolve(true);
                        __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });
                    }
                    else {
                        sessionEngine
                            .updateOutputs({
                            eventId,
                            type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                            progressRange: {
                                min: 0.25,
                                max: 0.9,
                            },
                            data: { sessionId: sessionEngineId },
                        })
                            .then(() => {
                            var _a, _b;
                            (_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionEngineId]) === null || _a === void 0 ? void 0 : _a.initialOutputsLoaded.resolve(true);
                            __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION
                                .SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });
                            for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines)
                                (_b = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _b === void 0 ? void 0 : _b.update("CreationControlCenter.createSessionEngine.waitForOutputs=false");
                        });
                    }
                }
                // save the session
                this.sessionEngines[sessionEngineId] = sessionEngine;
                (_b = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionEngineId]) === null || _b === void 0 ? void 0 : _b.initialized.resolve(true);
                __classPrivateFieldGet(this, _CreationControlCenterSession_logger, "f").debug(`CreationControlCenter.createSession: Session(${sessionEngine.id}) created.`);
                if (!__classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f")) {
                    if (__classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionEngine.id]) {
                        __classPrivateFieldSet(this, _CreationControlCenterSession_firstSessionEngine, sessionEngine, "f");
                        Object.values(__classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines).forEach((s) => {
                            if (s)
                                s.isFirstSession = false;
                        });
                        __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[__classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f").id].isFirstSession = true;
                    }
                }
                const promises = [];
                for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines) {
                    const viewportEngine = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r];
                    if (((_c = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _c === void 0 ? void 0 : _c.settingsAssigned.resolved) === false) {
                        if ((viewportEngine &&
                            viewportEngine.sessionSettingsMode ===
                                viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST) ||
                            (viewportEngine &&
                                viewportEngine.sessionSettingsMode ===
                                    viewer_shared_services_1.SESSION_SETTINGS_MODE.MANUAL &&
                                viewportEngine.sessionSettingsId ===
                                    sessionEngineId)) {
                            promises.push(viewportEngine.settingsAssigned);
                            this.assignSettings(viewportEngine.id, sessionEngineId);
                        }
                    }
                }
                yield Promise.all(promises);
                (_d = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionEngineId]) === null || _d === void 0 ? void 0 : _d.settingsRegistered.resolve(true);
                for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines)
                    (_e = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _e === void 0 ? void 0 : _e.update("CreationControlCenter.createSessionEngine");
                if (this.updateSessions)
                    this.updateSessions(this.sessionEngines);
                const eventEnd = {
                    type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                    id: eventId,
                    progress: 1,
                    status: "Session created",
                    data: { sessionId: sessionEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CREATED, {
                    sessionId: sessionEngineId,
                });
                return sessionEngine;
            }
            catch (e) {
                // special behavior, if this was the only session, display the error on the logo screen
                if ((0, viewer_shared_services_1.isViewerError)(e)) {
                    if ((this.sessionEngines[sessionEngineId] &&
                        Object.values(this.sessionEngines).length === 1) ||
                        (!this.sessionEngines[sessionEngineId] &&
                            Object.values(this.sessionEngines).length === 0)) {
                        for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines)
                            (_f = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _f === void 0 ? void 0 : _f.displayErrorMessage(e.message);
                    }
                }
                const eventCancel1 = {
                    type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                    id: eventId,
                    progress: 0.9,
                    status: "Session created failed, closing session",
                    data: { sessionId: sessionEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);
                yield this.closeSessionEngine(sessionEngineId);
                const eventCancel2 = {
                    type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,
                    id: eventId,
                    progress: 1,
                    status: "Session created failed",
                    data: { sessionId: sessionEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterSession_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);
                throw e;
            }
        });
    }
    resetSettings(sessionId, sections) {
        var _a;
        sections = sections || {};
        this.sessionEngines[sessionId].resetSettings(sections);
        const promises = [];
        if (sections.session &&
            sections.session.parameter &&
            sections.session.parameter.value)
            promises.push(this.sessionEngines[sessionId].customize());
        for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines) {
            const viewportEngine = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r];
            if ((viewportEngine &&
                viewportEngine.sessionSettingsMode ===
                    viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST &&
                __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f") &&
                sessionId === __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f").id) ||
                (viewportEngine &&
                    viewportEngine.sessionSettingsMode ===
                        viewer_shared_services_1.SESSION_SETTINGS_MODE.MANUAL &&
                    sessionId === viewportEngine.sessionSettingsId)) {
                (_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.reset();
                promises.push(new Promise((resolve) => {
                    var _a;
                    (_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.then(() => {
                        resolve();
                    });
                }));
                viewportEngine.applySettings(sections.viewport);
            }
        }
        return new Promise((resolve) => Promise.all(promises).then(() => resolve()));
    }
    saveSettings(sessionId, viewportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = this.sessionEngines[sessionId];
            yield session.saveUiProperties(false);
            const settingsObject = this.createSettingsObject(sessionId, viewportId);
            const response = yield session.saveSettings(settingsObject);
            if (response) {
                __classPrivateFieldGet(this, _CreationControlCenterSession_logger, "f").debug(`Session(${sessionId}).saveSettings: Saved settings.`);
            }
            else {
                throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session(${sessionId}).saveSettings: Could not save settings.`);
            }
            return response;
        });
    }
    // #endregion Public Methods (5)
    // #region Private Methods (2)
    assignSettings(viewportEngineId, sessionId, updateViewport = false) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const viewportEngine = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[viewportEngineId];
            if (!viewportEngine)
                return;
            if (((_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionId]) === null || _a === void 0 ? void 0 : _a.initialized.resolved) === true) {
                // immediate
                viewportEngine.assignSettingsEngine(this.sessionEngines[sessionId].settingsEngine);
                yield viewportEngine.applySettings(undefined, undefined, updateViewport);
            }
            else {
                yield new Promise((resolve) => {
                    var _a;
                    (_a = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").sessionEngines[sessionId]) === null || _a === void 0 ? void 0 : _a.initialized.then(() => __awaiter(this, void 0, void 0, function* () {
                        viewportEngine.assignSettingsEngine(this.sessionEngines[sessionId].settingsEngine);
                        yield viewportEngine.applySettings(undefined, undefined, updateViewport);
                        resolve();
                    }));
                });
            }
        });
    }
    createSettingsObject(sessionId, viewportId) {
        const session = this.sessionEngines[sessionId];
        session.settingsEngine.settings.build_version =
            viewer_shared_build_data_1.build_data.build_version;
        session.settingsEngine.settings.build_date = viewer_shared_build_data_1.build_data.build_date;
        session.settingsEngine.settings.settings_version = viewer_settings_1.latestVersion;
        let viewportEngine;
        if (viewportId && __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[viewportId]) {
            viewportEngine = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[viewportId];
        }
        else {
            for (const r in __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines) {
                const viewportEngineToCheck = __classPrivateFieldGet(this, _CreationControlCenterSession_stateEngine, "f").viewportEngines[r];
                if ((viewportEngineToCheck &&
                    viewportEngineToCheck.sessionSettingsMode ===
                        viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST &&
                    __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f") &&
                    sessionId === __classPrivateFieldGet(this, _CreationControlCenterSession_firstSessionEngine, "f").id) ||
                    (viewportEngineToCheck &&
                        viewportEngineToCheck.sessionSettingsMode ===
                            viewer_shared_services_1.SESSION_SETTINGS_MODE.MANUAL &&
                        sessionId === viewportEngineToCheck.sessionSettingsId)) {
                    viewportEngine = viewportEngineToCheck;
                    continue;
                }
            }
        }
        if (viewportEngine)
            viewportEngine.saveSettings();
        return session.settingsEngine.settings;
    }
}
exports.CreationControlCenterSession = CreationControlCenterSession;
_CreationControlCenterSession_eventEngine = new WeakMap(), _CreationControlCenterSession_logger = new WeakMap(), _CreationControlCenterSession_stateEngine = new WeakMap(), _CreationControlCenterSession_uuidGenerator = new WeakMap(), _CreationControlCenterSession_firstSessionEngine = new WeakMap();
//# sourceMappingURL=CreationControlCenterSession.js.map