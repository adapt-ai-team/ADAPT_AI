import { mat4 } from 'gl-matrix';
import { Box } from '@shapediver/viewer.shared.math';
import { ITreeNodeData } from './interfaces/ITreeNodeData';
import { ISDObject } from './interfaces/ISDObject';
export interface ITransformation {
    id: string;
    matrix: mat4;
}
export declare class TreeNode {
    #private;
    /**
     * Creation of a node that can be used in the node tree.
     *
     * @param name the name of the node
     * @param parent the parent of this node
     * @param data the array of data
     * @param transformations the array of transformations
     */
    constructor(name?: string, parent?: TreeNode | null, data?: ITreeNodeData[], transformations?: ITransformation[]);
    get bone(): boolean;
    set bone(value: boolean);
    get boundingBox(): Box;
    set boundingBox(value: Box);
    get children(): TreeNode[];
    get data(): ITreeNodeData[];
    get excludeViewers(): string[];
    set excludeViewers(value: string[]);
    get id(): string;
    set id(value: string);
    get includeViewers(): string[];
    set includeViewers(value: string[]);
    get name(): string;
    get nodeMatrix(): mat4;
    get nodeMatrixSDTF(): mat4;
    get parent(): TreeNode | null;
    set parent(value: TreeNode | null);
    get transformations(): ITransformation[];
    set transformations(value: ITransformation[]);
    get transformedNodes(): {
        [key: string]: ISDObject;
    };
    set transformedNodes(value: {
        [key: string]: ISDObject;
    });
    get version(): string;
    get visible(): boolean;
    set visible(value: boolean);
    get worldMatrix(): mat4;
    /**
     * Add a child from the children of this node.
     *
     * @param child the child to add
     */
    addChild(child: TreeNode): boolean;
    /**
     * Clones this node and all its children.
     */
    clone(): TreeNode;
    /**
     * Clones this node and all its children.
     */
    cloneInstance(): TreeNode;
    /**
     * Returns the child with the specified id
     * @return {TreeNode}
     */
    getChild(id: string): TreeNode | null;
    /**
     * Return the path to this node.
     */
    getPath(): string;
    /**
     * Check for existence of a child from the children of this node.
     *
     * @param child the child to check
     */
    hasChild(child: TreeNode): boolean;
    /**
     * Remove a child from the children of this node.
     *
     * @param child the child to remove
     */
    removeChild(child: TreeNode): boolean;
    /**
     * Update the version
     */
    updateVersion(): void;
    /**
     * Only updates the version of this node.
     */
    updateVersionAtomic(): void;
}
//# sourceMappingURL=TreeNode.d.ts.map