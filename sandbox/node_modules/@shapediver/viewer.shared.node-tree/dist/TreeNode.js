"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TreeNode_children, _TreeNode_data, _TreeNode_eventEngine, _TreeNode_name, _TreeNode_uuidGenerator, _TreeNode_boundingBox, _TreeNode_id, _TreeNode_parent, _TreeNode_transformations, _TreeNode_transformedNodes, _TreeNode_excludeViewers, _TreeNode_includeViewers, _TreeNode_version, _TreeNode_visible, _TreeNode_bone;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeNode = void 0;
const gl_matrix_1 = require("gl-matrix");
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
class TreeNode {
    // #endregion Properties (10)
    // #region Constructors (1)
    /**
     * Creation of a node that can be used in the node tree.
     *
     * @param name the name of the node
     * @param parent the parent of this node
     * @param data the array of data
     * @param transformations the array of transformations
     */
    constructor(name = 'node', parent = null, data = [], transformations = []) {
        var _a;
        // #region Properties (10)
        _TreeNode_children.set(this, []);
        _TreeNode_data.set(this, []);
        _TreeNode_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _TreeNode_name.set(this, '');
        _TreeNode_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        _TreeNode_boundingBox.set(this, new viewer_shared_math_1.Box());
        _TreeNode_id.set(this, void 0);
        _TreeNode_parent.set(this, null);
        _TreeNode_transformations.set(this, []);
        _TreeNode_transformedNodes.set(this, {});
        _TreeNode_excludeViewers.set(this, []);
        _TreeNode_includeViewers.set(this, []);
        _TreeNode_version.set(this, void 0);
        _TreeNode_visible.set(this, true);
        _TreeNode_bone.set(this, false);
        __classPrivateFieldSet(this, _TreeNode_name, name.replace(/\./g, "_"), "f");
        __classPrivateFieldSet(this, _TreeNode_parent, parent, "f");
        __classPrivateFieldSet(this, _TreeNode_data, data, "f");
        __classPrivateFieldSet(this, _TreeNode_transformations, transformations, "f");
        __classPrivateFieldSet(this, _TreeNode_id, __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create(), "f");
        __classPrivateFieldSet(this, _TreeNode_version, __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create(), "f");
        (_a = __classPrivateFieldGet(this, _TreeNode_parent, "f")) === null || _a === void 0 ? void 0 : _a.addChild(this);
    }
    // #endregion Constructors (1)
    // #region Public Accessors (14)
    get bone() {
        return __classPrivateFieldGet(this, _TreeNode_bone, "f");
    }
    set bone(value) {
        __classPrivateFieldSet(this, _TreeNode_bone, value, "f");
    }
    get boundingBox() {
        return __classPrivateFieldGet(this, _TreeNode_boundingBox, "f");
    }
    set boundingBox(value) {
        __classPrivateFieldSet(this, _TreeNode_boundingBox, value, "f");
    }
    get children() {
        return __classPrivateFieldGet(this, _TreeNode_children, "f");
    }
    get data() {
        return __classPrivateFieldGet(this, _TreeNode_data, "f");
    }
    get excludeViewers() {
        return __classPrivateFieldGet(this, _TreeNode_excludeViewers, "f");
    }
    set excludeViewers(value) {
        __classPrivateFieldSet(this, _TreeNode_excludeViewers, value, "f");
    }
    get id() {
        return __classPrivateFieldGet(this, _TreeNode_id, "f");
    }
    set id(value) {
        __classPrivateFieldSet(this, _TreeNode_id, value, "f");
    }
    get includeViewers() {
        return __classPrivateFieldGet(this, _TreeNode_includeViewers, "f");
    }
    set includeViewers(value) {
        __classPrivateFieldSet(this, _TreeNode_includeViewers, value, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _TreeNode_name, "f");
    }
    get nodeMatrix() {
        const matrix = gl_matrix_1.mat4.create();
        for (let transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            if (transform.id !== 'sdtf')
                gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);
        return matrix;
    }
    get nodeMatrixSDTF() {
        const matrix = gl_matrix_1.mat4.create();
        for (let transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);
        return matrix;
    }
    get parent() {
        return __classPrivateFieldGet(this, _TreeNode_parent, "f");
    }
    set parent(value) {
        // check if it was removed from previous parent
        if (value === null && __classPrivateFieldGet(this, _TreeNode_parent, "f") !== null)
            __classPrivateFieldGet(this, _TreeNode_parent, "f").removeChild(this);
        // check if it is in children of new parent
        if (value !== null)
            value.addChild(this);
        __classPrivateFieldSet(this, _TreeNode_parent, value, "f");
    }
    get transformations() {
        return __classPrivateFieldGet(this, _TreeNode_transformations, "f");
    }
    set transformations(value) {
        __classPrivateFieldSet(this, _TreeNode_transformations, value, "f");
        this.updateVersion();
    }
    get transformedNodes() {
        return __classPrivateFieldGet(this, _TreeNode_transformedNodes, "f");
    }
    set transformedNodes(value) {
        __classPrivateFieldSet(this, _TreeNode_transformedNodes, value, "f");
    }
    get version() {
        return __classPrivateFieldGet(this, _TreeNode_version, "f");
    }
    get visible() {
        return __classPrivateFieldGet(this, _TreeNode_visible, "f");
    }
    set visible(value) {
        __classPrivateFieldSet(this, _TreeNode_visible, value, "f");
        this.updateVersion();
    }
    get worldMatrix() {
        const matrix = gl_matrix_1.mat4.create();
        for (let transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);
        let node = this;
        while (node.parent) {
            gl_matrix_1.mat4.multiply(matrix, matrix, node.parent.nodeMatrix);
            node = node.parent;
        }
        return matrix;
    }
    // #endregion Public Accessors (14)
    // #region Public Methods (9)
    /**
     * Add a child from the children of this node.
     *
     * @param child the child to add
     */
    addChild(child) {
        if (this.hasChild(child))
            return false;
        __classPrivateFieldGet(this, _TreeNode_children, "f").push(child);
        if (child.parent !== null)
            child.parent.removeChild(child);
        child.parent = this;
        return true;
    }
    /**
     * Clones this node and all its children.
     */
    clone() {
        const clone = new TreeNode(this.name);
        clone.visible = this.visible;
        for (let child of __classPrivateFieldGet(this, _TreeNode_children, "f"))
            clone.addChild(child.clone());
        for (let data of __classPrivateFieldGet(this, _TreeNode_data, "f"))
            clone.data.push(data.clone());
        for (let transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            clone.transformations.push({
                id: transform.id,
                matrix: gl_matrix_1.mat4.clone(transform.matrix)
            });
        return clone;
    }
    /**
     * Clones this node and all its children.
     */
    cloneInstance() {
        const clone = new TreeNode(this.name);
        clone.visible = this.visible;
        for (let child of __classPrivateFieldGet(this, _TreeNode_children, "f"))
            clone.addChild(child.cloneInstance());
        for (let data of __classPrivateFieldGet(this, _TreeNode_data, "f"))
            clone.data.push(data);
        for (let transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            clone.transformations.push({
                id: transform.id,
                matrix: gl_matrix_1.mat4.clone(transform.matrix)
            });
        return clone;
    }
    /**
     * Returns the child with the specified id
     * @return {TreeNode}
     */
    getChild(id) {
        for (let i = 0; i < __classPrivateFieldGet(this, _TreeNode_children, "f").length; i++)
            if (__classPrivateFieldGet(this, _TreeNode_children, "f")[i].id === id)
                return __classPrivateFieldGet(this, _TreeNode_children, "f")[i];
        return null;
    }
    /**
     * Return the path to this node.
     */
    getPath() {
        let path = this.name;
        let node = this.parent;
        while (node) {
            path = node.name + '.' + path;
            node = node.parent;
        }
        return path;
    }
    /**
     * Check for existence of a child from the children of this node.
     *
     * @param child the child to check
     */
    hasChild(child) {
        return __classPrivateFieldGet(this, _TreeNode_children, "f").includes(child);
    }
    /**
     * Remove a child from the children of this node.
     *
     * @param child the child to remove
     */
    removeChild(child) {
        const index = __classPrivateFieldGet(this, _TreeNode_children, "f").indexOf(child);
        if (index === -1)
            return false;
        __classPrivateFieldGet(this, _TreeNode_children, "f").splice(index, 1);
        child.parent = null;
        return true;
    }
    /**
     * Update the version
     */
    updateVersion() {
        let node = this;
        while (node.parent !== null) {
            node = node.parent;
            node.updateVersionAtomic();
        }
        for (let i = 0; i < __classPrivateFieldGet(this, _TreeNode_children, "f").length; i++)
            __classPrivateFieldGet(this, _TreeNode_children, "f")[i].updateVersion();
        __classPrivateFieldSet(this, _TreeNode_version, __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create(), "f");
    }
    /**
     * Only updates the version of this node.
     */
    updateVersionAtomic() {
        __classPrivateFieldSet(this, _TreeNode_version, __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create(), "f");
    }
}
exports.TreeNode = TreeNode;
_TreeNode_children = new WeakMap(), _TreeNode_data = new WeakMap(), _TreeNode_eventEngine = new WeakMap(), _TreeNode_name = new WeakMap(), _TreeNode_uuidGenerator = new WeakMap(), _TreeNode_boundingBox = new WeakMap(), _TreeNode_id = new WeakMap(), _TreeNode_parent = new WeakMap(), _TreeNode_transformations = new WeakMap(), _TreeNode_transformedNodes = new WeakMap(), _TreeNode_excludeViewers = new WeakMap(), _TreeNode_includeViewers = new WeakMap(), _TreeNode_version = new WeakMap(), _TreeNode_visible = new WeakMap(), _TreeNode_bone = new WeakMap();
//# sourceMappingURL=TreeNode.js.map