"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SceneTreeManager = void 0;
const THREE = __importStar(require("three"));
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_rendering_engine_light_engine_1 = require("@shapediver/viewer.rendering-engine.light-engine");
const gl_matrix_1 = require("gl-matrix");
const tsyringe_1 = require("tsyringe");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const SDNode_1 = require("../types/SDNode");
const ThreejsData_1 = require("../types/ThreejsData");
const SDData_1 = require("../types/SDData");
const SDBone_1 = require("../types/SDBone");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
class SceneTreeManager {
    // #endregion Properties (10)
    // #region Constructors (1)
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        // #region Properties (10)
        this._converter = tsyringe_1.container.resolve(viewer_shared_services_1.Converter);
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._inputValidator = tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
        this._scene = new THREE.Scene();
        this._stateEngine = tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine);
        this._tree = tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree);
        this._boundingBox = new viewer_shared_math_1.Box();
        this._boundingBoxSensitiveData = [];
        this._scene.background = new THREE.Color('#ffffff');
    }
    // #endregion Constructors (1)
    // #region Public Accessors (2)
    get boundingBox() {
        return this._boundingBox;
    }
    get scene() {
        return this._scene;
    }
    // #endregion Public Accessors (2)
    // #region Public Methods (6)
    init() { }
    isEmpty() {
        return ((this._boundingBox.min[0] === 0 && this._boundingBox.min[1] === 0 && this._boundingBox.min[2] === 0 &&
            this._boundingBox.max[0] === 0 && this._boundingBox.max[1] === 0 && this._boundingBox.max[2] === 0) || this._boundingBox.isEmpty());
    }
    getBone(node) {
        let bone;
        this._mainNode.traverse((o) => {
            if (o.SDid === node.id)
                bone = o;
        });
        return bone;
    }
    /**
     * Convert the data of the scene graph node into the format of the implementation.
     *
     * @param data the data element
     * @param obj the corresponding type node
     */
    updateData(node, obj, data) {
        let dataChild = obj.children.find(oc => oc.SDid === data.id && oc.SDversion === data.version);
        if (!dataChild)
            dataChild = new SDData_1.SDData(data.id, data.version);
        obj.add(dataChild);
        if (this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERERTYPE.ATTRIBUTES)
            this.injectAttributeData(node, data);
        switch (true) {
            case data instanceof viewer_shared_types_1.GeometryData:
                dataChild.SDtype = SDData_1.SD_DATA_TYPE.GEOMETRY;
                const geometryData = data;
                let skeleton;
                if (geometryData.bones.length > 0) {
                    const bones = [];
                    for (let i = 0; i < geometryData.bones.length; i++)
                        bones.push(this.getBone(geometryData.bones[i]));
                    const boneInverses = [];
                    for (let i = 0; i < geometryData.boneInverses.length; i++)
                        boneInverses.push(new THREE.Matrix4().fromArray(geometryData.boneInverses[i]));
                    skeleton = new THREE.Skeleton(bones, boneInverses);
                }
                const bb = this._renderingEngine.geometryLoader.load(data, dataChild, skeleton);
                node.boundingBox.union(bb);
                break;
            case data instanceof ThreejsData_1.ThreejsData:
                dataChild.SDtype = SDData_1.SD_DATA_TYPE.THREEJS;
                dataChild.add(data.obj);
                break;
            case data instanceof viewer_shared_types_1.AbstractMaterialData:
                dataChild.SDtype = SDData_1.SD_DATA_TYPE.MATERIAL;
                break;
            case data instanceof viewer_rendering_engine_light_engine_1.AbstractLight:
                dataChild.SDtype = SDData_1.SD_DATA_TYPE.LIGHT;
                this._renderingEngine.lightLoader.load(data, dataChild);
                if (data instanceof viewer_rendering_engine_light_engine_1.DirectionalLight && data.useNodeData === false)
                    this._boundingBoxSensitiveData.push({ data: data, dataChild });
                break;
            case data instanceof viewer_rendering_engine_camera_engine_1.AbstractCamera:
                dataChild.SDtype = SDData_1.SD_DATA_TYPE.CAMERA;
                this._renderingEngine.cameraManager.load(data, dataChild);
                break;
            case data instanceof viewer_shared_types_1.HTMLElementAnchorData:
                dataChild.SDtype = SDData_1.SD_DATA_TYPE.HTML_ELEMENT_ANCHOR;
                this._renderingEngine.htmlElementAnchorLoader.load(data);
                break;
            case data instanceof viewer_shared_types_1.AnimationData:
                dataChild.SDtype = SDData_1.SD_DATA_TYPE.ANIMATION;
                break;
            default:
                // if there is no valid conversion here, call the convertData of the implementation
                break;
        }
    }
    updateNodeTransformations(node = this._tree.root, obj = this._mainNode) {
        if (!node || !obj)
            return;
        if (node.excludeViewers.includes(this._renderingEngine.id))
            return;
        if (node.includeViewers.length > 0 && !node.includeViewers.includes(this._renderingEngine.id))
            return;
        obj.visible = node.visible;
        obj.applyTransformation(node.nodeMatrix);
        // add new children and update the ones that have a different version
        for (let i = 0, len = node.children.length; i < len; i++) {
            const nodeChild = node.children[i];
            if (!nodeChild)
                continue;
            const objChild = obj.children.find(oc => oc.SDid === nodeChild.id);
            this.updateNodeTransformations(nodeChild, objChild);
        }
    }
    updateMorphWeights(node = this._tree.root, obj = this._mainNode) {
        if (!node || !obj)
            return;
        if (node.excludeViewers.includes(this._renderingEngine.id))
            return;
        if (node.includeViewers.length > 0 && !node.includeViewers.includes(this._renderingEngine.id))
            return;
        for (let i = 0, len = node.data.length; i < len; i++) {
            if (node.data[i] instanceof viewer_shared_types_1.GeometryData) {
                const data = node.data[i];
                let dataChild = obj.children.find(oc => oc.SDid === data.id && oc.SDversion === data.version);
                dataChild.traverse(o => {
                    if (o instanceof THREE.Points ||
                        o instanceof THREE.LineSegments ||
                        o instanceof THREE.LineLoop ||
                        o instanceof THREE.Line ||
                        o instanceof THREE.Mesh)
                        o.morphTargetInfluences = data.morphWeights;
                });
            }
        }
        for (let i = 0, len = node.children.length; i < len; i++) {
            const nodeChild = node.children[i];
            if (!nodeChild)
                continue;
            const objChild = obj.children.find(oc => oc.SDid === nodeChild.id);
            this.updateMorphWeights(nodeChild, objChild);
        }
    }
    updateNodeData(node, obj) {
        const convertedObject = obj;
        // if this node specifically excludes the current viewer, skip it and all descendants
        if (node.excludeViewers.includes(this._renderingEngine.id))
            return;
        if (node.includeViewers.length > 0 && !node.includeViewers.includes(this._renderingEngine.id))
            return;
        // reset the bounding box of the current node
        // it will be recomputed in the following steps
        node.boundingBox = new viewer_shared_math_1.Box();
        // remove all data items that do not exist anymore
        const dataIds = node.data.map(d => d.id);
        const dataToRemove = convertedObject.children.filter(oc => oc instanceof SDData_1.SDData ? !(dataIds.includes(oc.SDid)) : false);
        dataToRemove.forEach(dTR => {
            this.removeData(dTR);
            convertedObject.remove(dTR);
        });
        // remove all child nodes in the transformed object that do not exist anymore
        // the filter goes also through the data items as they were already added
        const nodeIds = node.children.map(d => d.id);
        const childrenToRemove = convertedObject.children.filter(oc => oc instanceof SDNode_1.SDNode ? !nodeIds.includes(oc.SDid) : false);
        childrenToRemove.forEach(cTR => {
            cTR.traverse((o) => {
                if (o instanceof SDData_1.SDData)
                    this.removeData(o);
            });
            convertedObject.remove(cTR);
        });
        // convert all data items of the current node
        // old versions will be replaced by new ones
        for (let i = 0, len = node.data.length; i < len; i++)
            this.updateData(node, convertedObject, node.data[i]);
        // add new children and update the ones that have a different version
        for (let i = 0, len = node.children.length; i < len; i++) {
            const nodeChild = node.children[i];
            const objChild = convertedObject.children.find(oc => oc.SDid === nodeChild.id);
            this.updateNodeData(nodeChild, objChild);
            if (!nodeChild.boundingBox.isEmpty())
                node.boundingBox.union(nodeChild.boundingBox);
        }
        if (!node.boundingBox.isEmpty())
            node.boundingBox.applyMatrix(node.nodeMatrix);
    }
    updateNodeHierarchy(node = this._tree.root, obj = this._mainNode) {
        const convertedObject = obj;
        // if this node specifically excludes the current viewer, skip it and all descendants
        if (node.excludeViewers.includes(this._renderingEngine.id))
            return;
        if (node.includeViewers.length > 0 && !node.includeViewers.includes(this._renderingEngine.id))
            return;
        // add new children and update the ones that have a different version
        for (let i = 0, len = node.children.length; i < len; i++) {
            const nodeChild = node.children[i];
            const objChild = convertedObject.children.find(oc => oc.SDid === nodeChild.id);
            if (!objChild) {
                const newChild = node.bone ? new SDBone_1.SDBone(nodeChild.id, nodeChild.version) : new SDNode_1.SDNode(nodeChild.id, nodeChild.version);
                nodeChild.transformedNodes[this._renderingEngine.id] = newChild;
                convertedObject.add(newChild);
                this.updateNodeHierarchy(nodeChild, newChild);
            }
            else if (objChild.SDversion !== nodeChild.version) {
                // if the version is different, update the child
                this.updateNodeHierarchy(nodeChild, objChild);
                objChild.SDversion = nodeChild.version;
            }
        }
        convertedObject.visible = node.visible;
        convertedObject.applyTransformation(node.nodeMatrix);
    }
    /**
     * Update the current node via the scene graph node.
     * Convert the data if needed.
     *
     * @param node the scene graph node
     * @param obj the current type object
     */
    updateNode(node, obj) {
        const convertedObject = obj;
        // if this node specifically excludes the current viewer, skip it and all descendants
        if (node.excludeViewers.includes(this._renderingEngine.id))
            return;
        if (node.includeViewers.length > 0 && !node.includeViewers.includes(this._renderingEngine.id))
            return;
        // reset the bounding box of the current node
        // it will be recomputed in the following steps
        node.boundingBox = new viewer_shared_math_1.Box();
        // remove all data items that do not exist anymore
        const dataIds = node.data.map(d => d.id);
        const dataToRemove = convertedObject.children.filter(oc => oc instanceof SDData_1.SDData ? !(dataIds.includes(oc.SDid)) : false);
        dataToRemove.forEach(dTR => {
            this.removeData(dTR);
            convertedObject.remove(dTR);
        });
        // remove all child nodes in the transformed object that do not exist anymore
        // the filter goes also through the data items as they were already added
        const nodeIds = node.children.map(d => d.id);
        const childrenToRemove = convertedObject.children.filter(oc => oc instanceof SDNode_1.SDNode ? !nodeIds.includes(oc.SDid) : false);
        childrenToRemove.forEach(cTR => {
            cTR.traverse((o) => {
                if (o instanceof SDData_1.SDData)
                    this.removeData(o);
            });
            convertedObject.remove(cTR);
        });
        // convert all data items of the current node
        // old versions will be replaced by new ones
        for (let i = 0, len = node.data.length; i < len; i++)
            this.updateData(node, convertedObject, node.data[i]);
        // add new children and update the ones that have a different version
        for (let i = 0, len = node.children.length; i < len; i++) {
            const nodeChild = node.children[i];
            const objChild = convertedObject.children.find(oc => oc.SDid === nodeChild.id);
            if (!objChild) {
                const newChild = new SDNode_1.SDNode(nodeChild.id, nodeChild.version);
                nodeChild.transformedNodes[this._renderingEngine.id] = newChild;
                convertedObject.add(newChild);
                this.updateNode(nodeChild, newChild);
            }
            else if (objChild.SDversion !== nodeChild.version) {
                // if the version is different, update the child
                this.updateNode(nodeChild, objChild);
                objChild.SDversion = nodeChild.version;
            }
            if (!nodeChild.boundingBox.isEmpty())
                node.boundingBox.union(nodeChild.boundingBox);
        }
        convertedObject.visible = node.visible;
        convertedObject.applyTransformation(node.nodeMatrix);
        if (!node.boundingBox.isEmpty())
            node.boundingBox.applyMatrix(node.nodeMatrix);
    }
    updateSceneTree(root, lightEngine) {
        const oldBB = this._boundingBox.clone();
        this._boundingBox = new viewer_shared_math_1.Box();
        this._renderingEngine.lightLoader.shadowMapCount = 0;
        if (!this._mainNode) {
            this._mainNode = new SDNode_1.SDNode(root.id, root.version);
            root.transformedNodes[this._renderingEngine.id] = this._mainNode;
            this._scene.add(this._mainNode);
        }
        this._boundingBoxSensitiveData = [];
        this._currentSDTFOverview = this.createSDTFOverview();
        this.updateNodeHierarchy(root, this._mainNode);
        this.updateNodeData(root, this._mainNode);
        this._boundingBox = root.boundingBox.clone();
        for (let i = 0; i < this._boundingBoxSensitiveData.length; i++)
            this._renderingEngine.lightLoader.adjustToBoundingBox(this._boundingBoxSensitiveData[i].data, this._boundingBoxSensitiveData[i].dataChild, this._boundingBox);
        if (!this._boundingBox.isEmpty())
            this._boundingBox.applyMatrix(root.nodeMatrix);
        if (!(this._boundingBox.min[0] === oldBB.min[0] && this._boundingBox.min[1] === oldBB.min[1] && this._boundingBox.min[2] === oldBB.min[2] &&
            this._boundingBox.max[0] === oldBB.max[0] && this._boundingBox.max[1] === oldBB.max[1] && this._boundingBox.max[2] === oldBB.max[2]) && !this._boundingBox.isEmpty()) {
            if (!this._stateEngine.boundingBoxCreated.resolved)
                this._stateEngine.boundingBoxCreated.resolve(true);
            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, { viewerId: this._renderingEngine.id, boundingBox: {
                    min: gl_matrix_1.vec3.clone(this._boundingBox.min),
                    max: gl_matrix_1.vec3.clone(this._boundingBox.max),
                } });
        }
        this._renderingEngine.renderingManager.evaluateTextureUnitCount(this._renderingEngine.lightLoader.shadowMapCount + this._renderingEngine.materialLoader.maxMapCount);
    }
    // #endregion Public Methods (6)
    // #region Private Methods (4)
    collectSDTFItemData(node) {
        for (let i = 0, len = node.data.length; i < len; i++)
            if (node.data[i] instanceof viewer_shared_types_1.SDTFItemData)
                return node.data[i];
        if (!node.parent)
            return;
        return this.collectSDTFItemData(node.parent);
    }
    createSDTFOverview(node = this._tree.root) {
        const out = new viewer_shared_types_1.SDTFAttributeOverview({});
        for (let i = 0, len = node.data.length; i < len; i++)
            if (node.data[i] instanceof viewer_shared_types_1.SDTFAttributeOverview)
                out.merge(node.data[i]);
        for (let i = 0, len = node.children.length; i < len; i++)
            out.merge(new viewer_shared_types_1.SDTFAttributeOverview(this.createSDTFOverview(node.children[i])));
        return out.overview;
    }
    injectAttributeData(node, data) {
        const itemData = this.collectSDTFItemData(node);
        let visData = {
            material: new viewer_shared_types_1.MaterialStandardData({ color: '#00fff7', opacity: 1 }),
            matrix: gl_matrix_1.mat4.create()
        };
        if (this._renderingEngine.convertSDTFItemToVisualizationData) {
            const userVisData = this._renderingEngine.convertSDTFItemToVisualizationData(this._currentSDTFOverview, itemData);
            try {
                this._inputValidator.validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer.convertSDTFItemToVisualizationData`, userVisData, 'object', true);
                this._inputValidator.validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer.convertSDTFItemToVisualizationData`, userVisData.matrix, 'mat4', true);
                visData.material = userVisData.material;
                visData.matrix = visData.matrix;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw this._logger.handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer.convertSDTFItemToVisualizationData: Encountered an error while parsing the visualization data.`, e);
            }
        }
        node.transformations.push({
            id: 'sdtf',
            matrix: visData.matrix
        });
        if (data instanceof viewer_shared_types_1.GeometryData)
            data.primitive.attributeMaterial = visData.material;
    }
    removeData(dataObject) {
        switch (true) {
            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.GEOMETRY:
                dataObject.traverse((o) => {
                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                    if (o instanceof SDData_1.SDData) {
                        if (o instanceof THREE.Mesh) {
                            this._renderingEngine.geometryLoader.removeFromGeometryCache(o.geometry.userData.SDid + '_' + o.geometry.userData.SDversion);
                            this._renderingEngine.materialLoader.removeFromMaterialCache(o.material.userData.SDid + '_' + o.material.userData.SDversion);
                            for (const key in o.geometry.attributes)
                                o.geometry.deleteAttribute(key);
                            o.geometry.setIndex(null);
                            o.geometry.dispose();
                            if (o.material.alphaMap)
                                (_a = o.material.alphaMap) === null || _a === void 0 ? void 0 : _a.dispose();
                            if (o.material.aoMap)
                                (_b = o.material.aoMap) === null || _b === void 0 ? void 0 : _b.dispose();
                            if (o.material.bumpMap)
                                (_c = o.material.bumpMap) === null || _c === void 0 ? void 0 : _c.dispose();
                            if (o.material.map)
                                (_d = o.material.map) === null || _d === void 0 ? void 0 : _d.dispose();
                            if (o.material.emissiveMap)
                                (_e = o.material.emissiveMap) === null || _e === void 0 ? void 0 : _e.dispose();
                            if (o.material.metalnessMap)
                                (_f = o.material.metalnessMap) === null || _f === void 0 ? void 0 : _f.dispose();
                            if (o.material.roughnessMap)
                                (_g = o.material.roughnessMap) === null || _g === void 0 ? void 0 : _g.dispose();
                            if (o.material.normalMap)
                                (_h = o.material.normalMap) === null || _h === void 0 ? void 0 : _h.dispose();
                            if (o.material.specularMap)
                                (_j = o.material.specularMap) === null || _j === void 0 ? void 0 : _j.dispose();
                            if (o.material.glossinessMap)
                                (_k = o.material.glossinessMap) === null || _k === void 0 ? void 0 : _k.dispose();
                            o.material.dispose();
                        }
                    }
                });
                break;
            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.THREEJS:
                break;
            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.MATERIAL:
                break;
            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.LIGHT:
                break;
            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.HTML_ELEMENT_ANCHOR:
                this._renderingEngine.htmlElementAnchorLoader.removeData(dataObject.SDid, dataObject.SDversion);
                break;
            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.ANIMATION:
                break;
            default:
                // if there is no valid conversion here, call the convertData of the implementation
                break;
        }
    }
}
exports.SceneTreeManager = SceneTreeManager;
//# sourceMappingURL=SceneTreeManager.js.map