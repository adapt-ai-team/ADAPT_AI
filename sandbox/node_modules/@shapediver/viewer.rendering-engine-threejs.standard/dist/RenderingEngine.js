"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _RenderingEngine_animations;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderingEngine = void 0;
const THREE = __importStar(require("three"));
const tsyringe_1 = require("tsyringe");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
const viewer_rendering_engine_canvas_engine_1 = require("@shapediver/viewer.rendering-engine.canvas-engine");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_rendering_engine_light_engine_1 = require("@shapediver/viewer.rendering-engine.light-engine");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const SceneTreeManager_1 = require("./managers/SceneTreeManager");
const RenderingManager_1 = require("./managers/RenderingManager");
const MaterialLoader_1 = require("./loaders/MaterialLoader");
const EnvironmentMapLoader_1 = require("./loaders/EnvironmentMapLoader");
const GeometryLoader_1 = require("./loaders/GeometryLoader");
const LightLoader_1 = require("./loaders/LightLoader");
const HTMLElementAnchorLoader_1 = require("./loaders/HTMLElementAnchorLoader");
const BeautyRenderingManager_1 = require("./managers/BeautyRenderingManager");
const EnvironmentGeometryManager_1 = require("./managers/EnvironmentGeometryManager");
const SceneTracingManager_1 = require("./managers/SceneTracingManager");
const CameraManager_1 = require("./managers/CameraManager");
const AnimationManager_1 = require("./managers/AnimationManager");
class RenderingEngine {
    // #endregion Properties (53)
    // #region Constructors (1)
    constructor(properties) {
        this._canvasEngine = tsyringe_1.container.resolve(viewer_rendering_engine_canvas_engine_1.CanvasEngine);
        // utils
        this._converter = tsyringe_1.container.resolve(viewer_shared_services_1.Converter);
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
        this._settingsEngine = tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine);
        this._stateEngine = tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine);
        this._tree = tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree);
        // settings
        this._ambientOcclusion = true;
        this._ambientOcclusionIntensity = 0.1;
        this._automaticResizing = true;
        this._beautyRenderBlendingDuration = 1500;
        this._beautyRenderDelay = 50;
        this._busy = false;
        this._clearAlpha = 1.0;
        this._clearColor = '#ffffff';
        // viewer global vars
        this._closed = false;
        this._environmentMap = 'none';
        this._environmentMapAsBackground = false;
        this._environmentMapResolution = '1024';
        this._gridVisibility = true;
        this._groundPlaneVisibility = true;
        this._pointSize = 1.0;
        this._shadows = true;
        this._show = false;
        this._showStatistics = false;
        this._type = viewer_rendering_engine_rendering_engine_1.RENDERERTYPE.STANDARD;
        _RenderingEngine_animations.set(this, []);
        // THREE object has default Y, we change that (although it doesn't work everywhere)
        THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);
        // setting some of the provided properties
        this._id = properties.id;
        this._visibility = properties.visibility;
        this._branding = properties.branding;
        // creation of viewer essentials
        this._canvas = this._canvasEngine.getCanvas(this._canvasEngine.createCanvasObject(properties.canvas));
        // creation of the engines (all singleton engines were created already)
        this._domEventEngine = new viewer_shared_services_1.DomEventEngine(this._id, this._canvas.canvasElement);
        this._cameraEngine = new viewer_rendering_engine_camera_engine_1.CameraEngine(this._id, this._canvas.canvasElement, this._domEventEngine);
        this._lightEngine = new viewer_rendering_engine_light_engine_1.LightEngine(this._id);
        // creation of the managers (all singleton engines were created already)
        this._animationManager = new AnimationManager_1.AnimationManager(this);
        this._beautyRenderingManager = new BeautyRenderingManager_1.BeautyRenderingManager(this);
        this._cameraManager = new CameraManager_1.CameraManager(this);
        this._environmentGeometryManager = new EnvironmentGeometryManager_1.EnvironmentGeometryManager(this);
        this._sceneTracingManager = new SceneTracingManager_1.SceneTracingManager(this);
        this._sceneTreeManager = new SceneTreeManager_1.SceneTreeManager(this);
        this._renderingManager = new RenderingManager_1.RenderingManager(this);
        // loaders
        this._environmentMapLoader = new EnvironmentMapLoader_1.EnvironmentMapLoader(this);
        this._materialLoader = new MaterialLoader_1.MaterialLoader(this);
        this._geometryLoader = new GeometryLoader_1.GeometryLoader(this);
        this._htmlElementAnchorLoader = new HTMLElementAnchorLoader_1.HTMLElementAnchorLoader(this);
        this._lightLoader = new LightLoader_1.LightLoader(this);
        // start the creation and initialization process 
        this._renderer = this.renderingManager.createRenderer(this._canvas.canvasElement);
        this._logoDivElement = this.renderingManager.addLogo(this._canvas.canvasElement, this._branding);
        this._spinnerDivElement = this.renderingManager.addSpinner(this._canvas.canvasElement, this._branding);
        // creation of the managers (all singleton engines were created already)
        this._beautyRenderingManager.init();
        this._cameraManager.init();
        this._environmentGeometryManager.init();
        this._sceneTracingManager.init();
        this._sceneTreeManager.init();
        this._renderingManager.init();
        // loaders
        this._environmentMapLoader.init();
        this._materialLoader.init();
        this._geometryLoader.init();
        this._htmlElementAnchorLoader.init();
        this._lightLoader.init();
        this._renderingManager.start();
        if (this._visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.INSTANT)
            this.show = true;
        if (this._visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.SESSION) {
            this._stateEngine.boundingBoxCreated.then(() => {
                if (this._closed)
                    return;
                // wait for settings to load before showing the scene
                this._stateEngine.viewers[this.id].settingsLoaded.then(() => {
                    if (this._closed)
                        return;
                    this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);
                    this.show = true;
                });
            });
        }
        this.stateEngine.primarySessionAvailable.then(() => {
            var _a;
            (_a = this.stateEngine.primarySession) === null || _a === void 0 ? void 0 : _a.settingsRegistered.then(() => {
                if (this._closed)
                    return;
                this.applySettings();
            });
        });
    }
    // #endregion Constructors (1)
    // #region Public Accessors (78)
    get ambientOcclusion() {
        return this._ambientOcclusion;
    }
    set ambientOcclusion(value) {
        this._ambientOcclusion = value;
    }
    get ambientOcclusionIntensity() {
        return this._ambientOcclusionIntensity;
    }
    set ambientOcclusionIntensity(value) {
        this._ambientOcclusionIntensity = value;
    }
    get animationManager() {
        return this._animationManager;
    }
    get animations() {
        return __classPrivateFieldGet(this, _RenderingEngine_animations, "f");
    }
    get automaticResizing() {
        return this._automaticResizing;
    }
    set automaticResizing(value) {
        this._automaticResizing = value;
    }
    get beautyRenderBlendingDuration() {
        return this._beautyRenderBlendingDuration;
    }
    set beautyRenderBlendingDuration(value) {
        this._beautyRenderBlendingDuration = value;
    }
    get beautyRenderDelay() {
        return this._beautyRenderDelay;
    }
    set beautyRenderDelay(value) {
        this._beautyRenderDelay = value;
    }
    get beautyRenderingManager() {
        return this._beautyRenderingManager;
    }
    get busy() {
        return this._busy;
    }
    set busy(value) {
        this._busy = value;
    }
    get branding() {
        return this._branding;
    }
    get cameraEngine() {
        return this._cameraEngine;
    }
    get cameraManager() {
        return this._cameraManager;
    }
    get canvas() {
        return this._canvas.canvasElement;
    }
    get canvasEngine() {
        return this._canvasEngine;
    }
    get clearAlpha() {
        return this._clearAlpha;
    }
    set clearAlpha(value) {
        this._clearAlpha = value;
    }
    get clearColor() {
        return this._clearColor;
    }
    set clearColor(value) {
        this._clearColor = value;
    }
    get closed() {
        return this._closed;
    }
    get continuousRendering() {
        return this._renderingManager.continuousRendering;
    }
    set continuousRendering(value) {
        this._renderingManager.continuousRendering = value;
    }
    get continuousShadowMapUpdate() {
        return this._renderingManager.continuousShadowMapUpdate;
    }
    set continuousShadowMapUpdate(value) {
        this._renderingManager.continuousShadowMapUpdate = value;
    }
    get convertSDTFItemToVisualizationData() {
        return this._convertSDTFItemToVisualizationData;
    }
    set convertSDTFItemToVisualizationData(value) {
        this._convertSDTFItemToVisualizationData = value;
    }
    get domEventEngine() {
        return this._domEventEngine;
    }
    get environmentMap() {
        return this._environmentMap;
    }
    set environmentMap(value) {
        this._environmentMap = value;
        this._environmentMapLoader.load(this.environmentMap);
    }
    get environmentMapAsBackground() {
        return this._environmentMapAsBackground;
    }
    set environmentMapAsBackground(value) {
        this._environmentMapAsBackground = value;
    }
    get environmentMapLoader() {
        return this._environmentMapLoader;
    }
    get environmentMapResolution() {
        return this._environmentMapResolution;
    }
    set environmentMapResolution(value) {
        this._environmentMapResolution = value;
        this._environmentMapLoader.load(this.environmentMap);
    }
    get eventEngine() {
        return this._eventEngine;
    }
    get geometryLoader() {
        return this._geometryLoader;
    }
    get gridColor() {
        return this._environmentGeometryManager.gridColor;
    }
    set gridColor(value) {
        this._environmentGeometryManager.gridColor = value;
    }
    get gridVisibility() {
        return this._gridVisibility;
    }
    set gridVisibility(value) {
        if (this._environmentGeometryManager.grid)
            this._environmentGeometryManager.grid.visible = value;
        this._gridVisibility = value;
    }
    get groundPlaneColor() {
        return this._environmentGeometryManager.groundPlaneColor;
    }
    set groundPlaneColor(value) {
        this._environmentGeometryManager.groundPlaneColor = value;
    }
    get groundPlaneVisibility() {
        return this._groundPlaneVisibility;
    }
    set groundPlaneVisibility(value) {
        if (this._environmentGeometryManager.groundPlane)
            this._environmentGeometryManager.groundPlane.visible = value;
        this._groundPlaneVisibility = value;
    }
    get htmlElementAnchorLoader() {
        return this._htmlElementAnchorLoader;
    }
    get id() {
        return this._id;
    }
    get lightEngine() {
        return this._lightEngine;
    }
    get lightLoader() {
        return this._lightLoader;
    }
    get lightScene() {
        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';
    }
    get lightSceneId() {
        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';
    }
    get logoDivElement() {
        return this._logoDivElement;
    }
    get materialLoader() {
        return this._materialLoader;
    }
    get minimalRendering() {
        return this.renderingManager.minimalRendering;
    }
    get outputEncoding() {
        switch (this._renderer.outputEncoding) {
            case (THREE.sRGBEncoding):
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;
            case (THREE.LinearEncoding):
            default:
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;
        }
    }
    set outputEncoding(value) {
        switch (value) {
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):
                this._renderer.outputEncoding = THREE.sRGBEncoding;
                this._beautyRenderingManager.assignOutputEncoding(THREE.sRGBEncoding);
                break;
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):
            default:
                this._renderer.outputEncoding = THREE.LinearEncoding;
                this._beautyRenderingManager.assignOutputEncoding(THREE.LinearEncoding);
                break;
        }
    }
    get physicallyCorrectLights() {
        return this._renderer.physicallyCorrectLights;
    }
    set physicallyCorrectLights(value) {
        this._renderer.physicallyCorrectLights = value;
    }
    get pointSize() {
        return this._pointSize;
    }
    set pointSize(value) {
        this._pointSize = value;
        this.materialLoader.assignPointSize(value);
    }
    get renderer() {
        return this._renderer;
    }
    get renderingManager() {
        return this._renderingManager;
    }
    get scene() {
        return this._sceneTreeManager.scene;
    }
    get sceneTracingManager() {
        return this._sceneTracingManager;
    }
    get sceneTreeManager() {
        return this._sceneTreeManager;
    }
    get settingsEngine() {
        return this._settingsEngine;
    }
    get shadows() {
        return this._shadows;
    }
    set shadows(value) {
        this._shadows = value;
    }
    get show() {
        return this._show;
    }
    set show(value) {
        this._show = value;
    }
    get showStatistics() {
        return this._showStatistics;
    }
    set showStatistics(value) {
        this._showStatistics = value;
    }
    get spinnerDivElement() {
        return this._spinnerDivElement;
    }
    get stateEngine() {
        return this._stateEngine;
    }
    get textureEncoding() {
        switch (this.materialLoader.textureEncoding) {
            case (THREE.sRGBEncoding):
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;
            case (THREE.LinearEncoding):
            default:
                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;
        }
    }
    set textureEncoding(value) {
        switch (value) {
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):
                this.environmentMapLoader.textureEncoding = THREE.sRGBEncoding;
                this.materialLoader.textureEncoding = THREE.sRGBEncoding;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):
            default:
                this.environmentMapLoader.textureEncoding = THREE.LinearEncoding;
                this.materialLoader.textureEncoding = THREE.LinearEncoding;
        }
    }
    get toneMapping() {
        switch (this._renderer.toneMapping) {
            case (THREE.LinearToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR;
            case (THREE.ReinhardToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD;
            case (THREE.CineonToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON;
            case (THREE.ACESFilmicToneMapping):
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC;
            case (THREE.NoToneMapping):
            default:
                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE;
        }
    }
    set toneMapping(value) {
        switch (value) {
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR):
                this._renderer.toneMapping = THREE.LinearToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD):
                this._renderer.toneMapping = THREE.ReinhardToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON):
                this._renderer.toneMapping = THREE.CineonToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC):
                this._renderer.toneMapping = THREE.ACESFilmicToneMapping;
                break;
            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE):
            default:
                this._renderer.toneMapping = THREE.NoToneMapping;
        }
        this.materialLoader.updateMaterials();
    }
    get toneMappingExposure() {
        return this._renderer.toneMappingExposure;
    }
    set toneMappingExposure(value) {
        this._renderer.toneMappingExposure = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get usingSwiftShader() {
        return this.renderingManager.usingSwiftShader;
    }
    // #endregion Public Accessors (78)
    // #region Public Methods (8)
    close() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            this._closed = true;
            this._lightEngine.close();
            this._renderer.clear(true, true, true);
            this._renderer.dispose();
            this._domEventEngine.removeAllDomEventListener();
            this._domEventEngine.dispose();
            (_a = this._canvas.canvasElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this._logoDivElement);
            (_b = this._canvas.canvasElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this._spinnerDivElement);
            (_c = this._canvas.canvasElement.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(this._htmlElementAnchorLoader.parentDiv);
            this._canvas.reset();
            return true;
        });
    }
    displayErrorMessage(message) {
        for (let i = 0; i < this.logoDivElement.children.length; i++)
            this.logoDivElement.children[i].style.visibility = 'hidden';
        const d = document.createElement('div');
        d.style.position = 'absolute';
        d.style.top = '50%';
        d.style.left = '50%';
        d.style.transform = 'translateX(-50%) translateY(-50%)';
        d.style.textAlign = 'center';
        this.logoDivElement.appendChild(d);
        const p = document.createElement('p');
        p.textContent = message;
        p.style.fontFamily = '"CircularXXWeb-Book",sans-serif';
        p.style.fontSize = 'x-large';
        p.style.color = this.logoDivElement.style.backgroundColor;
        p.style['filter'] = 'invert(100%)';
        d.appendChild(p);
    }
    gatherAnimations(node = this._tree.root) {
        let out = [];
        for (let i = 0, len = node.data.length; i < len; i++)
            if (node.data[i] instanceof viewer_shared_types_1.AnimationData)
                out.push(node.data[i]);
        for (let i = 0, len = node.children.length; i < len; i++)
            out = out.concat(this.gatherAnimations(node.children[i]));
        return out;
    }
    getEnvironmentMapImageUrl() {
        return this._environmentMapLoader.getEnvironmentMapImageUrl(this.environmentMap);
    }
    getScreenshot(type, encoderOptions) {
        return this._renderingManager.getScreenshot(type, encoderOptions);
    }
    reset() {
        this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);
        if (this._visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.SESSION)
            this.show = false;
        this._stateEngine.viewers[this.id].settingsLoaded.reset();
    }
    resize(width, height) {
        this._renderingManager.resize(width, height);
        this._renderingManager.render();
    }
    saveSettings() {
        this.lightEngine.saveSettings();
        this.cameraEngine.saveSettings();
        this._settingsEngine.environmentGeometry.gridVisibility = this.gridVisibility;
        this._settingsEngine.environmentGeometry.groundPlaneVisibility = this.groundPlaneVisibility;
        this._settingsEngine.environment.mapResolution = this.environmentMapResolution;
        this._settingsEngine.environment.map = Array.isArray(this.environmentMap) ? JSON.stringify(this.environmentMap) : this.environmentMap;
        this._settingsEngine.environment.mapAsBackground = this.environmentMapAsBackground;
        this._settingsEngine.rendering.ambientOcclusion = this.ambientOcclusion;
        this._settingsEngine.rendering.ambientOcclusionIntensity = this.ambientOcclusionIntensity;
        this._settingsEngine.environmentGeometry.gridColor = this.gridColor;
        this._settingsEngine.environmentGeometry.groundPlaneColor = this.groundPlaneColor;
        this._settingsEngine.rendering.outputEncoding = this.outputEncoding;
        this._settingsEngine.rendering.physicallyCorrectLights = this.physicallyCorrectLights;
        this._settingsEngine.rendering.textureEncoding = this.textureEncoding;
        this._settingsEngine.rendering.toneMapping = this.toneMapping;
        this._settingsEngine.rendering.toneMappingExposure = this.toneMappingExposure;
        this._settingsEngine.rendering.beautyRenderBlendingDuration = this.beautyRenderBlendingDuration;
        this._settingsEngine.rendering.beautyRenderDelay = this.beautyRenderDelay;
        this._settingsEngine.environment.clearAlpha = this.clearAlpha;
        this._settingsEngine.environment.clearColor = this.clearColor;
        this._settingsEngine.general.pointSize = this.pointSize;
        this._settingsEngine.rendering.shadows = this.shadows;
    }
    update() {
        this._sceneTreeManager.updateSceneTree(this._tree.root, this._lightEngine);
        this._renderingManager.updateShadowMap();
        __classPrivateFieldSet(this, _RenderingEngine_animations, this.gatherAnimations(), "f");
        this._renderingManager.render();
    }
    // #endregion Public Methods (8)
    // #region Private Methods (1)
    applySyncSettings(sections = {
        ar: true,
        scene: true,
        camera: true,
        light: true,
        environment: true,
        general: true
    }) {
        if (sections.scene) {
            this.gridColor = this._settingsEngine.environmentGeometry.gridColor;
            this.gridVisibility = this._settingsEngine.environmentGeometry.gridVisibility;
            this.groundPlaneColor = this._settingsEngine.environmentGeometry.groundPlaneColor;
            this.groundPlaneVisibility = this._settingsEngine.environmentGeometry.groundPlaneVisibility;
            this.shadows = this._settingsEngine.rendering.shadows;
            this.ambientOcclusion = this._settingsEngine.rendering.ambientOcclusion;
            this.textureEncoding = this._settingsEngine.rendering.textureEncoding;
            this.outputEncoding = this._settingsEngine.rendering.outputEncoding;
            this.physicallyCorrectLights = this._settingsEngine.rendering.physicallyCorrectLights;
            this.toneMapping = this._settingsEngine.rendering.toneMapping;
            this.toneMappingExposure = this._settingsEngine.rendering.toneMappingExposure;
        }
        if (sections.general) {
            this.pointSize = this._settingsEngine.general.pointSize;
        }
        if (sections.light)
            this.lightEngine.applySettings();
        if (sections.camera)
            this.cameraEngine.applySettings();
        this._stateEngine.viewers[this.id].settingsLoaded.resolve(true);
        this.update();
    }
    applySettings(sections = {
        ar: true,
        scene: true,
        camera: true,
        light: true,
        environment: true,
        general: true
    }) {
        if (sections.environment) {
            // as the environment map is the only thing that needs time to load, load it first
            this._stateEngine.viewers[this.id].environmentMapLoaded.then(() => {
                this.environmentMapAsBackground = this._settingsEngine.environment.mapAsBackground;
                this.clearAlpha = this._settingsEngine.environment.clearAlpha;
                this.clearColor = this._converter.toColor(this._settingsEngine.environment.clearColor);
                this.applySyncSettings(sections);
            });
            // set it like this to not trigger the loading
            this.environmentMap = this._settingsEngine.environment.map;
        }
        else {
            this.applySyncSettings(sections);
        }
    }
}
exports.RenderingEngine = RenderingEngine;
_RenderingEngine_animations = new WeakMap();
//# sourceMappingURL=RenderingEngine.js.map