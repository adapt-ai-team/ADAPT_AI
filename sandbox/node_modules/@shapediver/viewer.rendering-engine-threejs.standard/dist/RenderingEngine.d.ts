import * as THREE from 'three';
import { CameraEngine } from '@shapediver/viewer.rendering-engine.camera-engine';
import { CanvasEngine } from '@shapediver/viewer.rendering-engine.canvas-engine';
import { LightEngine } from '@shapediver/viewer.rendering-engine.light-engine';
import { BUSY_MODE_DISPLAY, SPINNER_POSITIONING, RENDERERTYPE, TEXTURE_ENCODING, TONE_MAPPING, VISIBILITYMODE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { DomEventEngine, EventEngine, SettingsEngine, StateEngine } from '@shapediver/viewer.shared.services';
import { AnimationData, SDTFAttributeVisualizationData, SDTFItemData, SDTFOverview } from '@shapediver/viewer.shared.types';
import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { SceneTreeManager } from './managers/SceneTreeManager';
import { RenderingManager } from './managers/RenderingManager';
import { MaterialLoader } from './loaders/MaterialLoader';
import { EnvironmentMapLoader } from './loaders/EnvironmentMapLoader';
import { GeometryLoader } from './loaders/GeometryLoader';
import { LightLoader } from './loaders/LightLoader';
import { HTMLElementAnchorLoader } from './loaders/HTMLElementAnchorLoader';
import { BeautyRenderingManager } from './managers/BeautyRenderingManager';
import { SceneTracingManager } from './managers/SceneTracingManager';
import { CameraManager } from './managers/CameraManager';
import { IRenderingEngineThreeJS } from './interfaces/IRenderingEngine';
import { AnimationManager } from './managers/AnimationManager';
export declare class RenderingEngine implements IRenderingEngineThreeJS {
    #private;
    private readonly _animationManager;
    private readonly _beautyRenderingManager;
    private readonly _cameraEngine;
    private readonly _cameraManager;
    private readonly _canvas;
    private readonly _canvasEngine;
    private readonly _converter;
    private readonly _domEventEngine;
    private readonly _environmentGeometryManager;
    private readonly _environmentMapLoader;
    private readonly _eventEngine;
    private readonly _geometryLoader;
    private readonly _htmlElementAnchorLoader;
    private readonly _branding;
    private readonly _id;
    private readonly _lightEngine;
    private readonly _lightLoader;
    private readonly _logger;
    private readonly _materialLoader;
    private readonly _renderer;
    private readonly _renderingManager;
    private readonly _sceneTracingManager;
    private readonly _sceneTreeManager;
    private readonly _settingsEngine;
    private readonly _stateEngine;
    private readonly _tree;
    private readonly _visibility;
    private _ambientOcclusion;
    private _ambientOcclusionIntensity;
    private _automaticResizing;
    private _beautyRenderBlendingDuration;
    private _beautyRenderDelay;
    private _busy;
    private _clearAlpha;
    private _clearColor;
    private _closed;
    private _convertSDTFItemToVisualizationData;
    private _environmentMap;
    private _environmentMapAsBackground;
    private _environmentMapResolution;
    private _gridVisibility;
    private _groundPlaneVisibility;
    private _logoDivElement;
    private _pointSize;
    private _shadows;
    private _show;
    private _showStatistics;
    private _spinnerDivElement;
    private _type;
    constructor(properties: {
        id: string;
        canvas?: string | HTMLCanvasElement;
        visibility: VISIBILITYMODE;
        branding: {
            logo: string | null;
            backgroundColor: string;
            busyModeSpinner: string;
            busyModeDisplay: BUSY_MODE_DISPLAY;
            spinnerPositioning: SPINNER_POSITIONING;
        };
    });
    get ambientOcclusion(): boolean;
    set ambientOcclusion(value: boolean);
    get ambientOcclusionIntensity(): number;
    set ambientOcclusionIntensity(value: number);
    get animationManager(): AnimationManager;
    get animations(): AnimationData[];
    get automaticResizing(): boolean;
    set automaticResizing(value: boolean);
    get beautyRenderBlendingDuration(): number;
    set beautyRenderBlendingDuration(value: number);
    get beautyRenderDelay(): number;
    set beautyRenderDelay(value: number);
    get beautyRenderingManager(): BeautyRenderingManager;
    get busy(): boolean;
    set busy(value: boolean);
    get branding(): {
        logo: string | null;
        backgroundColor: string;
        busyModeSpinner: string;
        busyModeDisplay: BUSY_MODE_DISPLAY;
        spinnerPositioning: SPINNER_POSITIONING;
    };
    get cameraEngine(): CameraEngine;
    get cameraManager(): CameraManager;
    get canvas(): HTMLCanvasElement;
    get canvasEngine(): CanvasEngine;
    get clearAlpha(): number;
    set clearAlpha(value: number);
    get clearColor(): string;
    set clearColor(value: string);
    get closed(): boolean;
    get continuousRendering(): boolean;
    set continuousRendering(value: boolean);
    get continuousShadowMapUpdate(): boolean;
    set continuousShadowMapUpdate(value: boolean);
    get convertSDTFItemToVisualizationData(): ((overview: SDTFOverview, itemData?: SDTFItemData) => SDTFAttributeVisualizationData) | undefined;
    set convertSDTFItemToVisualizationData(value: ((overview: SDTFOverview, itemData?: SDTFItemData) => SDTFAttributeVisualizationData) | undefined);
    get domEventEngine(): DomEventEngine;
    get environmentMap(): string | string[];
    set environmentMap(value: string | string[]);
    get environmentMapAsBackground(): boolean;
    set environmentMapAsBackground(value: boolean);
    get environmentMapLoader(): EnvironmentMapLoader;
    get environmentMapResolution(): string;
    set environmentMapResolution(value: string);
    get eventEngine(): EventEngine;
    get geometryLoader(): GeometryLoader;
    get gridColor(): string;
    set gridColor(value: string);
    get gridVisibility(): boolean;
    set gridVisibility(value: boolean);
    get groundPlaneColor(): string;
    set groundPlaneColor(value: string);
    get groundPlaneVisibility(): boolean;
    set groundPlaneVisibility(value: boolean);
    get htmlElementAnchorLoader(): HTMLElementAnchorLoader;
    get id(): string;
    get lightEngine(): LightEngine;
    get lightLoader(): LightLoader;
    get lightScene(): string;
    get lightSceneId(): string;
    get logoDivElement(): HTMLDivElement;
    get materialLoader(): MaterialLoader;
    get minimalRendering(): boolean;
    get outputEncoding(): TEXTURE_ENCODING;
    set outputEncoding(value: TEXTURE_ENCODING);
    get physicallyCorrectLights(): boolean;
    set physicallyCorrectLights(value: boolean);
    get pointSize(): number;
    set pointSize(value: number);
    get renderer(): THREE.WebGLRenderer;
    get renderingManager(): RenderingManager;
    get scene(): THREE.Scene;
    get sceneTracingManager(): SceneTracingManager;
    get sceneTreeManager(): SceneTreeManager;
    get settingsEngine(): SettingsEngine;
    get shadows(): boolean;
    set shadows(value: boolean);
    get show(): boolean;
    set show(value: boolean);
    get showStatistics(): boolean;
    set showStatistics(value: boolean);
    get spinnerDivElement(): HTMLDivElement;
    get stateEngine(): StateEngine;
    get textureEncoding(): TEXTURE_ENCODING;
    set textureEncoding(value: TEXTURE_ENCODING);
    get toneMapping(): TONE_MAPPING;
    set toneMapping(value: TONE_MAPPING);
    get toneMappingExposure(): number;
    set toneMappingExposure(value: number);
    get type(): RENDERERTYPE;
    set type(value: RENDERERTYPE);
    get usingSwiftShader(): boolean;
    close(): Promise<boolean>;
    displayErrorMessage(message: string): void;
    gatherAnimations(node?: TreeNode): AnimationData[];
    getEnvironmentMapImageUrl(): string;
    getScreenshot(type?: string, encoderOptions?: number): string;
    reset(): void;
    resize(width: number, height: number): void;
    saveSettings(): void;
    update(): void;
    private applySyncSettings;
    applySettings(sections?: {
        ar?: boolean;
        scene?: boolean;
        camera?: boolean;
        light?: boolean;
        environment?: boolean;
        general?: boolean;
    }): void;
}
//# sourceMappingURL=RenderingEngine.d.ts.map