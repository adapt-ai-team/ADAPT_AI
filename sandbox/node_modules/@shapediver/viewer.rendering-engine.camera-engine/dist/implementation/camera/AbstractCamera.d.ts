import { vec2, vec3 } from 'gl-matrix';
import { EventEngine, SettingsEngine, StateEngine } from '@shapediver/viewer.shared.services';
import { Box } from '@shapediver/viewer.shared.math';
import { AbstractTreeNodeData, TreeNode } from '@shapediver/viewer.shared.node-tree';
import { ICameraControls } from '../../interfaces/controls/ICameraControls';
import { ICamera } from '../../interfaces/camera/ICamera';
import { CAMERATYPE } from '../../interfaces/ICameraEngine';
import { AbstractCameraControls } from '../controls/AbstractCameraControls';
export declare abstract class AbstractCamera extends AbstractTreeNodeData implements ICamera {
    private readonly _id;
    private readonly _type;
    private _autoAdjust;
    private _cameraMovementDuration;
    private _defaultPosition;
    private _defaultTarget;
    private _enableCameraControls;
    private _far;
    private _near;
    private _node?;
    private _useNodeData;
    private _order?;
    private _revertAtMouseUp;
    private _revertAtMouseUpDuration;
    private _zoomExtentsFactor;
    protected readonly _eventEngine: EventEngine;
    protected readonly _settingsEngine: SettingsEngine;
    protected readonly _stateEngine: StateEngine;
    protected _boundingBox: Box;
    protected _controls: AbstractCameraControls;
    protected _position: vec3;
    protected _target: vec3;
    protected _viewerId?: string;
    constructor(_id: string, _type: CAMERATYPE);
    get autoAdjust(): boolean;
    set autoAdjust(value: boolean);
    set boundingBox(value: Box);
    get cameraMovementDuration(): number;
    set cameraMovementDuration(value: number);
    get controls(): ICameraControls;
    get defaultPosition(): vec3;
    set defaultPosition(value: vec3);
    get defaultTarget(): vec3;
    set defaultTarget(value: vec3);
    get enableCameraControls(): boolean;
    set enableCameraControls(value: boolean);
    get far(): number;
    set far(value: number);
    get id(): string;
    get near(): number;
    set near(value: number);
    get node(): TreeNode | undefined;
    set node(value: TreeNode | undefined);
    get useNodeData(): boolean;
    set useNodeData(value: boolean);
    get order(): number | undefined;
    set order(value: number | undefined);
    get position(): vec3;
    set position(value: vec3);
    get revertAtMouseUp(): boolean;
    set revertAtMouseUp(value: boolean);
    get revertAtMouseUpDuration(): number;
    set revertAtMouseUpDuration(value: number);
    get target(): vec3;
    set target(value: vec3);
    get type(): CAMERATYPE;
    get viewerId(): string | undefined;
    get zoomExtentsFactor(): number;
    set zoomExtentsFactor(value: number);
    animate(path: {
        position: vec3;
        target: vec3;
    }[], options?: {
        easing?: string | Function | undefined;
        duration?: number | undefined;
        default?: boolean | undefined;
        coordinates?: string | undefined;
        interpolation?: string | Function | undefined;
    }): Promise<boolean>;
    reset(options?: {
        easing?: string | Function | undefined;
        duration?: number | undefined;
        default?: boolean | undefined;
        coordinates?: string | undefined;
        interpolation?: string | Function | undefined;
    }): Promise<boolean>;
    set(position: vec3, target: vec3, options?: {
        easing?: string | Function | undefined;
        duration?: number | undefined;
        default?: boolean | undefined;
        coordinates?: string | undefined;
        interpolation?: string | Function | undefined;
    }): Promise<boolean>;
    update(time: number): boolean;
    zoomTo(zoomTarget?: Box, options?: {
        easing?: string | Function | undefined;
        duration?: number | undefined;
        default?: boolean | undefined;
        coordinates?: string | undefined;
        interpolation?: string | Function | undefined;
    }): Promise<boolean>;
    abstract applySettings(): void;
    abstract assignViewer(viewerId: string): void;
    abstract calculateZoomTo(zoomTarget?: Box, startingPosition?: vec3, startingTarget?: vec3): {
        position: vec3;
        target: vec3;
    };
    abstract project(p: vec3): vec2;
    abstract unproject(p: vec3): vec3;
    protected assignViewerInternal(viewerId: string, canvas: HTMLCanvasElement): void;
}
//# sourceMappingURL=AbstractCamera.d.ts.map