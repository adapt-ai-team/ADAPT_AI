"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdtfSdk = void 0;
exports.create = create;
const sdk_sdtf_core_1 = require("@shapediver/sdk.sdtf-core");
const SdtfFormatter_1 = require("./formatter/SdtfFormatter");
const SdtfParser_1 = require("./reader/SdtfParser");
const SdtfConfig_1 = require("./SdtfConfig");
const SdtfConstructor_1 = require("./writer/SdtfConstructor");
function create(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const sdk = new SdtfSdk(config);
        yield sdk.init();
        return sdk;
    });
}
class SdtfSdk {
    constructor(config) {
        this.config = new SdtfConfig_1.SdtfConfig(config);
    }
    createParser() {
        return new SdtfParser_1.SdtfParser(this.config);
    }
    createConstructor() {
        return new SdtfConstructor_1.SdtfConstructor(this.config.integrations);
    }
    createFormatter() {
        return new SdtfFormatter_1.SdtfFormatter(this.config.integrations);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const promiseArray = [];
            this.config.integrations.forEach((integration) => promiseArray.push(integration.init()));
            const res = yield Promise.allSettled(promiseArray);
            res.forEach((promiseRes) => {
                if (promiseRes.status === 'rejected') {
                    const e = promiseRes.reason;
                    throw new sdk_sdtf_core_1.SdtfError(`Could not initialize all integrations: ${e}`);
                }
            });
        });
    }
}
exports.SdtfSdk = SdtfSdk;
//# sourceMappingURL=SdtfSdk.js.map