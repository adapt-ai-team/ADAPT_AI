import { IRenderingEngine } from "@shapediver/viewer.rendering-engine.rendering-engine";
import { Box } from "@shapediver/viewer.shared.math";
import { SettingsEngine } from "@shapediver/viewer.shared.services";
import { ICamera } from "../interfaces/camera/ICamera";
import { CAMERA_TYPE, ICameraEngine } from "../interfaces/ICameraEngine";
export declare class CameraEngine implements ICameraEngine {
    private readonly _renderingEngine;
    private readonly _cameraNode;
    private readonly _cameras;
    private readonly _eventEngine;
    private readonly _logger;
    private readonly _stateEngine;
    private readonly _tree;
    private readonly _uuidGenerator;
    private _camera;
    private _settingsApplied;
    private _update?;
    protected _boundingBox: Box;
    constructor(_renderingEngine: IRenderingEngine);
    get camera(): ICamera | null;
    get cameras(): {
        [key: string]: ICamera;
    };
    get update(): (() => void) | undefined;
    set update(value: (() => void) | undefined);
    activateCameraEvents(): void;
    applySettings(settingsEngine: SettingsEngine): void;
    assignCamera(id: string): boolean;
    close(): void;
    createCamera(type: CAMERA_TYPE, id?: string, isDefault?: boolean): ICamera;
    createDefaultCameras(createOnlyOrthographic?: boolean): void;
    deactivateCameraEvents(): void;
    removeCamera(id: string): boolean;
    saveSettings(settingsEngine: SettingsEngine): void;
    private searchForNewCameras;
}
//# sourceMappingURL=CameraEngine.d.ts.map