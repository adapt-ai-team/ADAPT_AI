import { vec2, vec3 } from "gl-matrix";
import { Adjustments, ICameraControls } from "../../interfaces/controls/ICameraControls";
import { ICameraControlsLogic } from "../../interfaces/controls/ICameraControlsLogic";
export declare class CameraControlsLogic implements ICameraControlsLogic {
    private readonly _controls;
    private readonly _settingsAdjustments;
    private readonly _touchAdjustments;
    private _adjustedSettings;
    private _damping;
    private _dollyDelta;
    private _dollyEnd;
    private _dollyStart;
    private _panDelta;
    private _panEnd;
    private _panStart;
    private _quat;
    private _quatInverse;
    private _rotateDelta;
    private _rotateEnd;
    private _rotateStart;
    constructor(_controls: ICameraControls, _settingsAdjustments: Adjustments, _touchAdjustments: Adjustments);
    isWithinRestrictions(position: vec3, target: vec3): boolean;
    pan(x: number, y: number, active: boolean, touch: boolean): void;
    reset(): void;
    restrict(position: vec3, target: vec3, sceneRotation: vec2): {
        position: vec3;
        target: vec3;
        sceneRotation: vec2;
    };
    rotate(x: number, y: number, active: boolean, touch: boolean): void;
    update(time: number, manualInteraction: boolean): void;
    zoom(x: number, y: number, active: boolean, touch: boolean): void;
    private panDeltaToOffset;
    private rotationSphericalToOffset;
    private zoomDistanceToOffset;
}
//# sourceMappingURL=CameraControlsLogic.d.ts.map