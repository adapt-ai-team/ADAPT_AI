import { z } from "zod";
import { RestrictionDefinition } from "./IRestrictionSettings";
export declare type DrawingParameterValue = {
    points: number[][];
};
/**
 * General properties of a drawing tools parameter.
 */
export interface IDrawingParameterSettings {
    geometry?: {
        /**
         * The mode of the geometry.
         *
         * If the mode is set to 'lines', the points are connected in the order they are defined.
         * If the mode is set to 'points', the points are not connected.
         *
         * @default 'lines'
         */
        mode: "points" | "lines";
        /**
         * The minimum amount of points, if undefined, the geometry is not restricted.
         * This value is checked whenever the user tries to update or finish the drawing tool.
         *
         * @default undefined
         */
        minPoints?: number;
        /**
         * The maximum amount of points, if undefined, the geometry is not restricted.
         * This value is checked whenever the user tries to update or finish the drawing tool.
         *
         * @default undefined
         */
        maxPoints?: number;
        /**
         * If the mode is set to 'lines', if it is a closed line or not.
         * If the mode is set to 'points', this setting is ignored.
         *
         * A line can be closed by connecting the last point with the first point.
         *
         * @default true
         */
        close: boolean;
        /**
         * If the mode is set to 'lines', if the line is automatically closed.
         * If the mode is set to 'points', this setting is ignored.
         *
         * The first and last point are always connected if the line is automatically closed.
         *
         * @default true
         */
        autoClose: boolean;
    };
    restrictions?: RestrictionDefinition[];
    general?: {
        /** A prompt that can be defined which is displayed instead of the default prompt. */
        prompt?: {
            /** The title when the parameter is inactive. */
            inactiveTitle?: string;
            /** The title when the parameter is active. */
            activeTitle?: string;
            /** The text when the parameter is inactive. */
            activeText?: string;
        };
    };
}
export declare const IDrawingParameterJsonSchema: z.ZodObject<{
    geometry: z.ZodOptional<z.ZodObject<{
        mode: z.ZodEnum<["points", "lines"]>;
        minPoints: z.ZodOptional<z.ZodNumber>;
        maxPoints: z.ZodOptional<z.ZodNumber>;
        strictMinMaxPoints: z.ZodOptional<z.ZodBoolean>;
        close: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        mode: "points" | "lines";
        close: boolean;
        minPoints?: number | undefined;
        maxPoints?: number | undefined;
        strictMinMaxPoints?: boolean | undefined;
    }, {
        mode: "points" | "lines";
        close: boolean;
        minPoints?: number | undefined;
        maxPoints?: number | undefined;
        strictMinMaxPoints?: boolean | undefined;
    }>>;
    restrictions: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    general: z.ZodOptional<z.ZodObject<{
        prompt: z.ZodOptional<z.ZodObject<{
            inactiveTitle: z.ZodOptional<z.ZodString>;
            activeTitle: z.ZodOptional<z.ZodString>;
            activeText: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }, {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    }, {
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    restrictions?: any[] | undefined;
    geometry?: {
        mode: "points" | "lines";
        close: boolean;
        minPoints?: number | undefined;
        maxPoints?: number | undefined;
        strictMinMaxPoints?: boolean | undefined;
    } | undefined;
    general?: {
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    restrictions?: any[] | undefined;
    geometry?: {
        mode: "points" | "lines";
        close: boolean;
        minPoints?: number | undefined;
        maxPoints?: number | undefined;
        strictMinMaxPoints?: boolean | undefined;
    } | undefined;
    general?: {
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    } | undefined;
}>;
export declare const validateDrawingParameterSettings: (param: unknown) => z.SafeParseReturnType<{
    restrictions?: any[] | undefined;
    geometry?: {
        mode: "points" | "lines";
        close: boolean;
        minPoints?: number | undefined;
        maxPoints?: number | undefined;
        strictMinMaxPoints?: boolean | undefined;
    } | undefined;
    general?: {
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    restrictions?: any[] | undefined;
    geometry?: {
        mode: "points" | "lines";
        close: boolean;
        minPoints?: number | undefined;
        maxPoints?: number | undefined;
        strictMinMaxPoints?: boolean | undefined;
    } | undefined;
    general?: {
        prompt?: {
            inactiveTitle?: string | undefined;
            activeTitle?: string | undefined;
            activeText?: string | undefined;
        } | undefined;
    } | undefined;
}>;
//# sourceMappingURL=IDrawingParametersSettings.d.ts.map