import { ITree } from "@shapediver/viewer.shared.node-tree";
import { IEvent, LOGGING_LEVEL, MainEventTypes } from "@shapediver/viewer.shared.services";
export interface IGeneralOptions {
    /**
     * Caching options.
     */
    caching: {
        /**
         * Option to enable/disable the caching. (default: true)
         */
        enable: boolean;
        /**
         * Query parameters that are excluded when creating the key that is used for the comparison of data entries in the cache. (default: ['Expires', 'Signature', 'Key-Pair-Id'])
         * Example: by the addition of 'Expires' the URLs https://link.example?Expires=0 and https://link.example?Expires=1 are both reduced to https://link.example for caching.
         */
        excludedQueryParameters: string[];
        /**
         * The maximum size of the cache in bytes. (default: 1024^3)
         */
        maxCacheSize: number;
    };
    /**
     * When set to false, the branding in the viewer console will be limited to a single line.
     * This will only include the viewer version. (default: true)
     */
    consoleBranding: boolean;
    /**
     * The logging level that is used.
     */
    loggingLevel: LOGGING_LEVEL;
    /**
     * The number of glTFs that are downloaded and processed at the same time.
     * Restricting this number might help if too much data is downloaded at the same time.
     * (default: Infinity)
     */
    parallelGlTFProcessing: number;
    /**
     * Option to show/hide messages in the browser console.
     */
    showMessages: boolean;
}
/**
 * Adds an event listener.
 *
 * @param type The type of event.
 * @param cb The callback.
 * @returns
 */
export declare const addListener: (type: string | MainEventTypes, cb: (event: IEvent) => void) => string;
/**
 * Removes an event listener.
 *
 * @param id The id of the listener.
 * @returns
 */
export declare const removeListener: (id: string) => boolean;
/**
 * The scene tree that is used to store the scene.
 * The scene tree contains a unique node and child nodes for each session,
 * and can also be used to add your own nodes.
 */
export declare const sceneTree: ITree;
/**
 * The version of the viewer.
 */
export declare const version: string;
export declare const showConsoleMessage: () => void;
/**
 * General Viewer options that are used everywhere.
 * - loggingLevel: The logging level that is used.
 * - showMessages: Option to show/hide messages in the browser console.
 * - parallelGlTFProcessing: The number of glTFs that are downloaded and processed at the same time.
 * - consoleBranding: When set to false, the branding in the viewer console will be limited to a single line.
 * - caching: Caching Options.
 */
export declare const generalOptions: IGeneralOptions;
//# sourceMappingURL=index.d.ts.map