"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generalOptions = exports.showConsoleMessage = exports.version = exports.sceneTree = exports.removeListener = exports.addListener = void 0;
const viewer_data_engine_geometry_engine_1 = require("@shapediver/viewer.data-engine.geometry-engine");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
// #endregion Interfaces (1)
// #region Classes (1)
class GeneralOptions {
    // #region Public Getters And Setters (10)
    get caching() {
        return {
            enable: httpClient.enableCaching,
            excludedQueryParameters: httpClient.excludedQueryParameters,
            maxCacheSize: httpClient.maxCacheSize,
        };
    }
    set caching(value) {
        inputValidator.validateAndError("caching", value, "object", true);
        inputValidator.validateAndError("caching", value.enable, "boolean");
        inputValidator.validateAndError("caching", value.excludedQueryParameters, "stringArray");
        inputValidator.validateAndError("caching", value.maxCacheSize, "number");
        if (value.enable !== undefined)
            httpClient.enableCaching = value.enable;
        if (value.excludedQueryParameters !== undefined)
            httpClient.excludedQueryParameters = value.excludedQueryParameters;
        if (value.maxCacheSize !== undefined)
            httpClient.maxCacheSize = value.maxCacheSize;
        logger.debug(`caching: CoggingLevel was set to: ${value}`);
    }
    get consoleBranding() {
        return consoleBranding;
    }
    set consoleBranding(value) {
        inputValidator.validateAndError("consoleBranding", value, "boolean");
        consoleBranding = value;
        logger.debug(`consoleBranding: ConsoleBranding was set to: ${value}`);
    }
    get loggingLevel() {
        return logger.loggingLevel;
    }
    set loggingLevel(value) {
        inputValidator.validateAndError("loggingLevel", value, "enum", true, Object.values(viewer_shared_services_1.LOGGING_LEVEL));
        logger.loggingLevel = value;
        logger.debug(`loggingLevel: LoggingLevel was set to: ${value}`);
    }
    get parallelGlTFProcessing() {
        return geometryEngine.parallelGlTFProcessing;
    }
    set parallelGlTFProcessing(value) {
        inputValidator.validateAndError("parallelGlTFProcessing", value, "number");
        geometryEngine.parallelGlTFProcessing = value;
        logger.debug(`parallelGlTFProcessing: ParallelGlTFProcessing was set to: ${value}`);
    }
    get showMessages() {
        return logger.showMessages;
    }
    set showMessages(value) {
        inputValidator.validateAndError("showMessages", value, "boolean");
        logger.showMessages = value;
        logger.debug(`showMessages: ShowMessages was set to: ${value}`);
    }
}
// #endregion Classes (1)
// #region Variables (12)
const httpClient = viewer_shared_services_1.HttpClient.instance;
const inputValidator = viewer_shared_services_1.InputValidator.instance;
const logger = viewer_shared_services_1.Logger.instance;
const eventEngine = viewer_shared_services_1.EventEngine.instance;
const geometryEngine = viewer_data_engine_geometry_engine_1.GeometryEngine.instance;
let createdConsoleMessage = false, consoleBranding = true;
/**
 * Adds an event listener.
 *
 * @param type The type of event.
 * @param cb The callback.
 * @returns
 */
const addListener = (type, cb) => {
    inputValidator.validateAndError("addListener", type, "string");
    inputValidator.validateAndError("addListener", cb, "function");
    logger.debug(`addListener: Event Listener was registered for ${type}.`);
    return eventEngine.addListener(type, cb);
};
exports.addListener = addListener;
/**
 * Removes an event listener.
 *
 * @param id The id of the listener.
 * @returns
 */
const removeListener = (id) => {
    inputValidator.validateAndError("removeListener", id, "string");
    logger.debug(`removeListener: Removing event listener with id ${id}.`);
    return eventEngine.removeListener(id);
};
exports.removeListener = removeListener;
/**
 * The scene tree that is used to store the scene.
 * The scene tree contains a unique node and child nodes for each session,
 * and can also be used to add your own nodes.
 */
exports.sceneTree = viewer_shared_node_tree_1.Tree.instance;
/**
 * The version of the viewer.
 */
exports.version = viewer_shared_build_data_1.build_data.build_version.replace("3.", "");
const showConsoleMessage = () => {
    if (createdConsoleMessage === true)
        return;
    createdConsoleMessage = true;
    if (consoleBranding === true) {
        console.log(`Powered by:
   _____  __                         ____   _                   
  / ___/ / /_   ____ _ ____   ___   / __ \\ (_)_   __ ___   _____
  \\__ \\ / __ \\ / __ '// __ \\ / _ \\ / / / // /| | / // _ \\ / ___/
 ___/ // / / // /_/ // /_/ //  __// /_/ // / | |/ //  __// /    
/____//_/ /_/ \\__,_// .___/ \\___//_____//_/  |___/ \\___//_/     
                   /_/                                          
ShapeDiver Viewer 3, Version ${viewer_shared_build_data_1.build_data.build_version.replace("3.", "")}
Visit us at https://shapediver.com/ and find out more!
`);
    }
    else {
        console.log(`ShapeDiver Viewer 3, Version ${viewer_shared_build_data_1.build_data.build_version.replace("3.", "")}`);
    }
};
exports.showConsoleMessage = showConsoleMessage;
/**
 * General Viewer options that are used everywhere.
 * - loggingLevel: The logging level that is used.
 * - showMessages: Option to show/hide messages in the browser console.
 * - parallelGlTFProcessing: The number of glTFs that are downloaded and processed at the same time.
 * - consoleBranding: When set to false, the branding in the viewer console will be limited to a single line.
 * - caching: Caching Options.
 */
exports.generalOptions = new GeneralOptions();
// #endregion Variables (12)
//# sourceMappingURL=index.js.map