"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Session_api, _Session_eventEngine, _Session_exports, _Session_httpClient, _Session_id, _Session_inputValidator, _Session_logger, _Session_modelViewUrl, _Session_outputs, _Session_parameters, _Session_performanceEvaluator, _Session_primarySessionRequest, _Session_sceneTree, _Session_sessionEngine, _Session_settingsEngine, _Session_stateEngine, _Session_ticket, _Session_uuidGenerator, _Session_automaticUpdate, _Session_customizationProcess, _Session_excludeViewers, _Session_node, _Session_parameterHistory, _Session_parameterHistoryCall, _Session_parameterHistoryForward, _Session_primarySession, _Session_useSessionSettings;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_session_engine_session_engine_1 = require("@shapediver/viewer.session-engine.session-engine");
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const sdk_geometry_api_sdk_v2_1 = require("@shapediver/sdk.geometry-api-sdk-v2");
const Parameter_1 = require("./Parameter");
const Api_1 = require("../Api");
const FileParameter_1 = require("./FileParameter");
const Export_1 = require("./Export");
const Output_1 = require("./Output");
let Session = class Session {
    // #endregion Properties (29)
    // #region Constructors (1)
    /**
       * @ignore
       */
    constructor(properties) {
        // #region Properties (29)
        _Session_api.set(this, tsyringe_1.container.resolve(Api_1.Api));
        _Session_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _Session_exports.set(this, {});
        _Session_httpClient.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.HttpClient));
        _Session_id.set(this, void 0);
        _Session_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _Session_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _Session_modelViewUrl.set(this, void 0);
        _Session_outputs.set(this, {});
        _Session_parameters.set(this, {});
        _Session_performanceEvaluator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.PerformanceEvaluator));
        _Session_primarySessionRequest.set(this, false);
        _Session_sceneTree.set(this, tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree));
        _Session_sessionEngine.set(this, void 0);
        _Session_settingsEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine));
        _Session_stateEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine));
        _Session_ticket.set(this, void 0);
        _Session_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        _Session_automaticUpdate.set(this, false);
        _Session_customizationProcess.set(this, void 0);
        _Session_excludeViewers.set(this, []);
        _Session_node.set(this, void 0);
        _Session_parameterHistory.set(this, []);
        _Session_parameterHistoryCall.set(this, false);
        _Session_parameterHistoryForward.set(this, []);
        _Session_primarySession.set(this, false);
        _Session_useSessionSettings.set(this, true);
        try {
            __classPrivateFieldSet(this, _Session_node, new viewer_shared_node_tree_1.TreeNode(properties.id), "f");
            __classPrivateFieldSet(this, _Session_sessionEngine, new viewer_session_engine_session_engine_1.Session(Object.assign({
                buildDate: viewer_shared_build_data_1.build_data.build_date,
                buildVersion: viewer_shared_build_data_1.build_data.build_version,
                closeOnFailure: () => __awaiter(this, void 0, void 0, function* () {
                    // this function closes the Session if an error occurred that cannot be solved
                    // case 1: the bearer token is invalid and no new valid bearer token was supplied
                    // case 2: session init failed multiple times
                    this.bearerToken = '';
                    try {
                        yield __classPrivateFieldGet(this, _Session_api, "f").closeSession(__classPrivateFieldGet(this, _Session_id, "f"), true);
                    }
                    catch (e) { }
                })
            }, properties)), "f");
            __classPrivateFieldSet(this, _Session_id, __classPrivateFieldGet(this, _Session_sessionEngine, "f").id, "f");
            __classPrivateFieldSet(this, _Session_ticket, __classPrivateFieldGet(this, _Session_sessionEngine, "f").ticket, "f");
            __classPrivateFieldSet(this, _Session_modelViewUrl, __classPrivateFieldGet(this, _Session_sessionEngine, "f").modelViewUrl, "f");
            __classPrivateFieldSet(this, _Session_excludeViewers, properties.excludeViewers || [], "f");
            __classPrivateFieldSet(this, _Session_primarySessionRequest, properties.primarySession !== false, "f");
            if (__classPrivateFieldGet(this, _Session_stateEngine, "f").primarySession && __classPrivateFieldGet(this, _Session_stateEngine, "f").primarySession.id === this.id) {
                __classPrivateFieldSet(this, _Session_primarySession, true, "f");
                __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}): This is now the primary session.`);
                __classPrivateFieldGet(this, _Session_stateEngine, "f").sessions[this.id].settingsRegistered.then(() => {
                    // only update the display names, order and hidden properties if the parameters / exports / outputs don't have these properties defined
                    if (__classPrivateFieldGet(this, _Session_useSessionSettings, "f") === true) {
                        for (let s in __classPrivateFieldGet(this, _Session_settingsEngine, "f").session) {
                            const temp = __classPrivateFieldGet(this, _Session_settingsEngine, "f").session[s];
                            if (this.parameters[s]) {
                                if (temp.displayname !== undefined)
                                    this.parameters[s].displayname = temp.displayname;
                                if (temp.order !== undefined)
                                    this.parameters[s].order = temp.order;
                                if (temp.hidden !== undefined)
                                    this.parameters[s].hidden = temp.hidden;
                            }
                            if (this.exports[s]) {
                                if (temp.displayname !== undefined)
                                    this.exports[s].displayname = temp.displayname;
                                if (temp.order !== undefined)
                                    this.exports[s].order = temp.order;
                                if (temp.hidden !== undefined)
                                    this.exports[s].hidden = temp.hidden;
                            }
                        }
                    }
                });
            }
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).constructor: Session api created.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session.constructor`, e);
        }
    }
    // #endregion Constructors (1)
    // #region Public Accessors (21)
    get automaticUpdate() {
        return __classPrivateFieldGet(this, _Session_automaticUpdate, "f");
    }
    set automaticUpdate(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).automaticUpdate: Updating automaticUpdate to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).automaticUpdate`, value, 'boolean');
            __classPrivateFieldSet(this, _Session_automaticUpdate, value, "f");
            __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).automaticUpdate: automaticUpdate was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).automaticUpdate`, e);
        }
    }
    get bearerToken() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").bearerToken;
    }
    set bearerToken(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).bearerToken: Updating BearerToken to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).bearerToken`, value, 'string', false);
            __classPrivateFieldGet(this, _Session_sessionEngine, "f").bearerToken = value;
            __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).bearerToken: bearerToken was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).bearerToken`, e);
        }
    }
    get canUploadGLTF() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").canUploadGLTF;
    }
    get commitParameters() {
        return __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitParameters;
    }
    set commitParameters(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitParameters: Updating CommitParameters to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitParameters`, value, 'boolean');
            __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitParameters = value;
            __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitParameters: commitParameters was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitParameters`, e);
        }
    }
    get commitSettings() {
        return __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitSettings;
    }
    set commitSettings(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitSettings: Updating CommitSettings to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitSettings`, value, 'boolean');
            __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitSettings = value;
            __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitSettings: commitSettings was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitSettings`, e);
        }
    }
    get exports() {
        return __classPrivateFieldGet(this, _Session_exports, "f");
    }
    get id() {
        return __classPrivateFieldGet(this, _Session_id, "f");
    }
    get initialized() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").initialized;
    }
    get modelViewUrl() {
        return __classPrivateFieldGet(this, _Session_modelViewUrl, "f");
    }
    get node() {
        return __classPrivateFieldGet(this, _Session_node, "f");
    }
    get outputs() {
        return __classPrivateFieldGet(this, _Session_outputs, "f");
    }
    get parameters() {
        return __classPrivateFieldGet(this, _Session_parameters, "f");
    }
    get primarySession() {
        return __classPrivateFieldGet(this, _Session_primarySession, "f");
    }
    get primarySessionRequest() {
        return __classPrivateFieldGet(this, _Session_primarySessionRequest, "f");
    }
    get refreshBearerToken() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").refreshBearerToken;
    }
    set refreshBearerToken(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).refreshBearerToken: Updating RefreshBearerToken to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).refreshBearerToken`, value, 'function');
            __classPrivateFieldGet(this, _Session_sessionEngine, "f").refreshBearerToken = value;
            __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).refreshBearerToken: refreshBearerToken was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).refreshBearerToken`, e);
        }
    }
    get ticket() {
        return __classPrivateFieldGet(this, _Session_ticket, "f");
    }
    // #endregion Public Accessors (21)
    // #region Public Methods (21)
    canGoBack() {
        // the first entry is always the one from the init call
        // all additional entries can be undone
        return __classPrivateFieldGet(this, _Session_parameterHistory, "f").length > 1;
    }
    canGoForward() {
        return __classPrivateFieldGet(this, _Session_parameterHistoryForward, "f").length > 0;
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const closeResult = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").close();
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").removeNode(this.node);
                __classPrivateFieldGet(this, _Session_api, "f").update();
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").reset();
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CLOSED, { sessionId: this.id });
                if (!closeResult)
                    __classPrivateFieldGet(this, _Session_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).close: Was not able to close session completely, please disregard this session.`);
                return closeResult;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).close`, e);
            }
        });
    }
    customize() {
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = __classPrivateFieldGet(this, _Session_uuidGenerator, "f").create();
            const customizationID = __classPrivateFieldGet(this, _Session_uuidGenerator, "f").create();
            try {
                const eventStart = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0, data: { sessionId: this.id }, status: 'Customizing session' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                const oldNode = __classPrivateFieldGet(this, _Session_node, "f").cloneInstance();
                __classPrivateFieldSet(this, _Session_customizationProcess, customizationID, "f");
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").start();
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('init');
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Customizing session.`);
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].registerBusyMode(customizationID);
                const eventFileUpload = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.1, data: { sessionId: this.id }, status: 'Uploading file parameters' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventFileUpload);
                const fileParameterIds = {};
                // load file parameter first
                for (const parameterId in this.parameters) {
                    if (this.parameters[parameterId] instanceof FileParameter_1.FileParameter) {
                        fileParameterIds[parameterId] = yield this.parameters[parameterId].upload();
                        // OPTION TO SKIP - PART 1a
                        if (__classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID) {
                            __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                            __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                            for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                                __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                            __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customization was exceeded by other customization request.`);
                            const eventCancel1a = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };
                            __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel1a);
                            return new viewer_shared_node_tree_1.TreeNode();
                        }
                    }
                }
                // OPTION TO SKIP - PART 1b
                if (__classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID) {
                    __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                    __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                    for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                        __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                    const eventCancel1b = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };
                    __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel1b);
                    __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customization was exceeded by other customization request.`);
                    return new viewer_shared_node_tree_1.TreeNode();
                }
                // assign the uploaded parameters
                for (const parameterId in fileParameterIds)
                    this.parameters[parameterId].value = fileParameterIds[parameterId];
                const parameterSet = {};
                // create a set of the current validated parameter values
                for (const parameterId in this.parameters) {
                    parameterSet[parameterId] = {
                        value: this.parameters[parameterId].value,
                        valueString: this.parameters[parameterId].stringify()
                    };
                }
                // update the session engine parameter values if everything succeeded
                for (const parameterId in this.parameters)
                    __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameterValues[parameterId] = parameterSet[parameterId].valueString;
                __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Customizing session with parameters ${JSON.stringify(__classPrivateFieldGet(this, _Session_sessionEngine, "f").parameterValues)}.`);
                const eventRequest = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.25, data: { sessionId: this.id }, status: 'Sending customization request' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventRequest);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('customize');
                const newNode = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").customize(() => __classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('customize');
                const eventSceneUpdate = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.75, data: { sessionId: this.id }, status: 'Updating scene' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventSceneUpdate);
                // OPTION TO SKIP - PART 2
                if (__classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID) {
                    __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                    for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                        __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                    const eventCancel2 = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };
                    __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);
                    __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customization was exceeded by other customization request.`);
                    return newNode;
                }
                // if this is not a call by the goBack or goForward functions, add the parameter values to the history and delete the forward history
                if (!__classPrivateFieldGet(this, _Session_parameterHistoryCall, "f")) {
                    __classPrivateFieldGet(this, _Session_parameterHistory, "f").push(parameterSet);
                    __classPrivateFieldSet(this, _Session_parameterHistoryForward, [], "f");
                }
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('finish');
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").removeNode(this.node);
                __classPrivateFieldSet(this, _Session_node, newNode, "f");
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").addNode(this.node);
                __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Customization request finished, updating geometry.`);
                // set the session values to the current ones in all parameters
                for (const parameterId in this.parameters)
                    this.parameters[parameterId].sessionValue = parameterSet[parameterId].value;
                // set the output content to what has been updated
                for (const outputId in this.outputs)
                    this.outputs[outputId].updateOutput(newNode.children.find(c => c.name === outputId), oldNode.children.find(c => c.name === outputId));
                // set the export definitions
                for (const exportId in this.exports)
                    this.exports[exportId].updateExport();
                this._warningCreator();
                this.node.excludeViewers = __classPrivateFieldGet(this, _Session_excludeViewers, "f");
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customized.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('finish');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CUSTOMIZED, { sessionId: this.id });
                const eventEnd = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customized' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                return this.node;
            }
            catch (e) {
                const eventCancel = { type: viewer_shared_types_1.TASKTYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization failed' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel);
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize`, e);
            }
        });
    }
    getExportById(id) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportById: Getting export with id ${id}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportById`, id, 'string');
            return this.exports[id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportById`, e);
        }
    }
    getExportByName(name) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByName: Getting export(s) with name ${name}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByName`, name, 'string');
            const exports = [];
            for (let exportId in this.exports) {
                if (name === this.exports[exportId].name)
                    exports.push(this.exports[exportId]);
            }
            return exports;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByName`, e);
        }
    }
    getExportByType(type) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByType: Getting export(s) with type ${type}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByType`, type, 'string');
            const exports = [];
            for (let exportId in this.exports) {
                if (type === this.exports[exportId].type)
                    exports.push(this.exports[exportId]);
            }
            return exports;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByType`, e);
        }
    }
    getOutputById(id) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputById: Getting output with id ${id}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputById`, id, 'string');
            return this.outputs[id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputById`, e);
        }
    }
    getOutputByName(name) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputByName: Getting output(s) with name ${name}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputByName`, name, 'string');
            const outputs = [];
            for (let outputId in this.outputs) {
                if (name === this.outputs[outputId].name)
                    outputs.push(this.outputs[outputId]);
            }
            return outputs;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputByName`, e);
        }
    }
    getParameterById(id) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterById: Getting parameter with id ${id}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterById`, id, 'string');
            return this.parameters[id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterById`, e);
        }
    }
    getParameterByName(name) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByName: Getting parameter(s) with name ${name}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByName`, name, 'string');
            const parameters = [];
            for (let parameterId in this.parameters) {
                if (name === this.parameters[parameterId].name)
                    parameters.push(this.parameters[parameterId]);
            }
            return parameters;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByName`, e);
        }
    }
    getParameterByType(type) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByType: Getting parameter(s) with type ${type}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByType`, type, 'string');
            const parameters = [];
            for (let parameterId in this.parameters) {
                if (type === this.parameters[parameterId].type)
                    parameters.push(this.parameters[parameterId]);
            }
            return parameters;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByType`, e);
        }
    }
    goBack() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.canGoBack()) {
                    __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).goBack: Cannot go further back.`);
                    return new viewer_shared_node_tree_1.TreeNode();
                }
                // get the current parameter set and store it in the forward history later on
                const currentParameterSet = __classPrivateFieldGet(this, _Session_parameterHistory, "f").pop();
                // adjust the parameters according to the last parameter set
                const lastParameterSet = __classPrivateFieldGet(this, _Session_parameterHistory, "f")[__classPrivateFieldGet(this, _Session_parameterHistory, "f").length - 1];
                for (const parameterId in lastParameterSet)
                    this.parameters[parameterId].value = lastParameterSet[parameterId].value;
                // call the customization function with the parameterHistoryCall value set to true
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, true, "f");
                const node = yield this.customize();
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, false, "f");
                // add the current (not anymore current) parameter set to the forward history
                __classPrivateFieldGet(this, _Session_parameterHistoryForward, "f").push(currentParameterSet);
                return node;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).goBack`, e);
            }
        });
    }
    goForward() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.canGoForward()) {
                    __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).goForward: Cannot go further forward.`);
                    return new viewer_shared_node_tree_1.TreeNode();
                }
                // get the last undone parameter set and apply the values to the parameters
                const lastParameterSet = __classPrivateFieldGet(this, _Session_parameterHistoryForward, "f").pop();
                for (const parameterId in lastParameterSet)
                    this.parameters[parameterId].value = lastParameterSet[parameterId].value;
                // call the customization function with the parameterHistoryCall value set to true
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, true, "f");
                const node = yield this.customize();
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, false, "f");
                // add the current parameter set to the history
                __classPrivateFieldGet(this, _Session_parameterHistory, "f").push(lastParameterSet);
                return node;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).goForward`, e);
            }
        });
    }
    init(waitForOutputs = true, loadOutputs = true, initialParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const eventId = __classPrivateFieldGet(this, _Session_uuidGenerator, "f").create();
                const event = { type: viewer_shared_types_1.TASKTYPE.SESSION_INITIAL_OUTPUTS_LOADED, id: eventId, progress: 0, status: 'Initializing session' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").start();
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('init');
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).init: Initializing Session.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('customize');
                yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").init(initialParameters);
                const eventLoading = { type: viewer_shared_types_1.TASKTYPE.SESSION_INITIAL_OUTPUTS_LOADED, id: eventId, progress: 0.5, status: 'Loading outputs' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventLoading);
                if (loadOutputs) {
                    if (waitForOutputs) {
                        __classPrivateFieldSet(this, _Session_node, yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").loadOutputs(), "f");
                        if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                            __classPrivateFieldGet(this, _Session_sceneTree, "f").addNode(this.node);
                        this.node.excludeViewers = __classPrivateFieldGet(this, _Session_excludeViewers, "f");
                        __classPrivateFieldGet(this, _Session_api, "f").update();
                        __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: this.id });
                        const eventEnd = { type: viewer_shared_types_1.TASKTYPE.SESSION_INITIAL_OUTPUTS_LOADED, id: eventId, progress: 1, status: 'Initial outputs loaded' };
                        __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                    }
                    else {
                        __classPrivateFieldGet(this, _Session_sessionEngine, "f").loadOutputs().then((node) => __awaiter(this, void 0, void 0, function* () {
                            __classPrivateFieldSet(this, _Session_node, node, "f");
                            if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                                __classPrivateFieldGet(this, _Session_sceneTree, "f").addNode(this.node);
                            this.node.excludeViewers = __classPrivateFieldGet(this, _Session_excludeViewers, "f");
                            __classPrivateFieldGet(this, _Session_api, "f").update();
                            __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: this.id });
                            const eventEnd = { type: viewer_shared_types_1.TASKTYPE.SESSION_INITIAL_OUTPUTS_LOADED, id: eventId, progress: 1, status: 'Initial outputs loaded' };
                            __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                        }));
                    }
                }
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('customize');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('finish');
                const parameterSet = {};
                for (let p in __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters) {
                    const param = __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p];
                    if (param.displayname !== undefined || param.order !== undefined)
                        __classPrivateFieldSet(this, _Session_useSessionSettings, false, "f");
                    switch (true) {
                        case param.type === Parameter_1.PARAMETERTYPE.BOOL:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        case param.type === Parameter_1.PARAMETERTYPE.COLOR:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        case param.type === Parameter_1.PARAMETERTYPE.FILE:
                            this.parameters[p] = new FileParameter_1.FileParameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        case param.type === Parameter_1.PARAMETERTYPE.EVEN || param.type === Parameter_1.PARAMETERTYPE.FLOAT || param.type === Parameter_1.PARAMETERTYPE.INT || param.type === Parameter_1.PARAMETERTYPE.ODD:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        default:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                    }
                    parameterSet[p] = {
                        value: this.parameters[p].value,
                        valueString: this.parameters[p].stringify()
                    };
                    __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameterValues[p] = parameterSet[p].valueString;
                }
                // store the initialization as the first parameter set in the history
                __classPrivateFieldGet(this, _Session_parameterHistory, "f").push(parameterSet);
                for (let exportId in __classPrivateFieldGet(this, _Session_sessionEngine, "f").exports) {
                    if (__classPrivateFieldGet(this, _Session_sessionEngine, "f").exports[exportId].displayname !== undefined || __classPrivateFieldGet(this, _Session_sessionEngine, "f").exports[exportId].order !== undefined)
                        __classPrivateFieldSet(this, _Session_useSessionSettings, false, "f");
                    this.exports[exportId] = new Export_1.Export(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").exports[exportId]);
                }
                for (let outputId in __classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs) {
                    if (__classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs[outputId].displayname !== undefined || __classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs[outputId].order !== undefined)
                        __classPrivateFieldSet(this, _Session_useSessionSettings, false, "f");
                    this.outputs[outputId] = new Output_1.Output(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs[outputId]);
                }
                this._warningCreator();
                const viewerPromises = [];
                const viewerIds = Object.keys(__classPrivateFieldGet(this, _Session_api, "f").viewers);
                for (let i = 0; i < viewerIds.length; i++)
                    viewerPromises.push(new Promise(resolve => { const state = __classPrivateFieldGet(this, _Session_stateEngine, "f").viewers[__classPrivateFieldGet(this, _Session_api, "f").viewers[viewerIds[i]].id].settingsLoaded; state.resolved === true ? resolve() : state.then(() => resolve()); }));
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").loadSettings(__classPrivateFieldGet(this, _Session_sessionEngine, "f").viewerSettings, this.id, this.primarySession);
                __classPrivateFieldGet(this, _Session_stateEngine, "f").sessions[this.id].settingsRegistered.resolve(true);
                if (this.primarySession !== false)
                    yield Promise.all(viewerPromises);
                __classPrivateFieldGet(this, _Session_api, "f").update();
                __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).init: Session initialized.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('finish');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).init`, e);
            }
        });
    }
    saveDefaultParameters() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveDefaultParameters: Saving default parameters.`);
                const response = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveDefaultParameters();
                if (response) {
                    __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveDefaultParameters: Saved default parameters.`);
                }
                else {
                    const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session(${this.id}).saveDefaultParameters: Could not save default parameters.`);
                    throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveDefaultParameters`, error);
                }
                return response;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveDefaultParameters`, e);
            }
        });
    }
    saveSessionProperties(saveInSettings = true) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSessionProperties: Saving session properties.`);
                // settings saving 
                this._saveSessionSettings();
                let properties = {};
                for (let p in this.parameters) {
                    properties[p] = {
                        displayname: this.parameters[p].displayname !== undefined ? this.parameters[p].displayname : '',
                        hidden: this.parameters[p].hidden !== undefined ? this.parameters[p].hidden : false,
                        order: this.parameters[p].order !== undefined ? this.parameters[p].order : 0,
                        tooltip: this.parameters[p].tooltip !== undefined ? this.parameters[p].tooltip : '',
                    };
                }
                const responseP = Object.values(properties).length !== 0 ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveParameterProperties(properties) : true;
                properties = {};
                for (let e in this.exports) {
                    properties[e] = {
                        displayname: this.exports[e].displayname !== undefined ? this.exports[e].displayname : '',
                        hidden: this.exports[e].hidden !== undefined ? this.exports[e].hidden : false,
                        order: this.exports[e].order !== undefined ? this.exports[e].order : 0,
                        tooltip: this.exports[e].tooltip !== undefined ? this.exports[e].tooltip : '',
                    };
                }
                const responseE = Object.values(properties).length !== 0 ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveExportProperties(properties) : true;
                properties = {};
                for (let o in this.outputs) {
                    properties[o] = {
                        displayname: this.outputs[o].displayname !== undefined ? this.outputs[o].displayname : '',
                        hidden: this.outputs[o].hidden !== undefined ? this.outputs[o].hidden : false,
                        order: this.outputs[o].order !== undefined ? this.outputs[o].order : 0,
                        tooltip: this.outputs[o].tooltip !== undefined ? this.outputs[o].tooltip : '',
                    };
                }
                const responseO = Object.values(properties).length !== 0 ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveOutputProperties(properties) : true;
                // save partial settings
                const response = saveInSettings ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveSettings(__classPrivateFieldGet(this, _Session_settingsEngine, "f").convertToTargetVersion()) : true;
                if (response && responseP && responseO && responseE) {
                    __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSessionProperties: Saved session properties.`);
                }
                else {
                    __classPrivateFieldGet(this, _Session_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSessionProperties: Could not save session properties.`);
                }
                return response && responseP && responseO && responseE;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSessionProperties`, e);
            }
        });
    }
    saveSettings(viewerId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings: Saving settings.`);
                __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings`, viewerId, 'boolean', false);
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitParameters = this.commitParameters;
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitSettings = this.commitSettings;
                yield this.saveSessionProperties(false);
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").settings.build_version = viewer_shared_build_data_1.build_data.build_version;
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").settings.build_date = viewer_shared_build_data_1.build_data.build_date;
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").settings.settings_version = '3.1';
                if (Object.values(__classPrivateFieldGet(this, _Session_api, "f").viewers).length !== 0) {
                    let viewer = viewerId ? __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId] : null;
                    if (!viewer)
                        viewer = Object.values(__classPrivateFieldGet(this, _Session_api, "f").viewers)[0];
                    const renderingEngines = tsyringe_1.container.resolveAll('renderingEngine');
                    let renderingEngine;
                    for (let i = 0; i < renderingEngines.length; i++)
                        if (renderingEngines[i].id === viewer.id && renderingEngines[i].closed === false)
                            renderingEngine = renderingEngines[i];
                    renderingEngine.saveSettings();
                    const response = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveSettings(__classPrivateFieldGet(this, _Session_settingsEngine, "f").convertToTargetVersion());
                    if (response) {
                        __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings: Saved settings.`);
                    }
                    else {
                        const error = new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session(${this.id}).saveSettings: Could not save settings.`);
                        throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings`, error);
                    }
                    return response;
                }
                return false;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings`, e);
            }
        });
    }
    setAsPrimary() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (__classPrivateFieldGet(this, _Session_stateEngine, "f").sessions[this.id].initialized.resolved === false)
                    yield __classPrivateFieldGet(this, _Session_stateEngine, "f").sessions[this.id].initialized;
                __classPrivateFieldSet(this, _Session_primarySession, true, "f");
                __classPrivateFieldGet(this, _Session_stateEngine, "f").sessions[this.id].primary = true;
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").loadSettings(__classPrivateFieldGet(this, _Session_sessionEngine, "f").viewerSettings, this.id, this.primarySession);
                yield new Promise((resolve) => __classPrivateFieldGet(this, _Session_stateEngine, "f").sessions[this.id].settingsRegistered.then(() => { resolve(); }));
                __classPrivateFieldGet(this, _Session_api, "f").update();
                __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).setAsPrimary: This is now the primary session.`);
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).setAsPrimary`, e);
            }
        });
    }
    updateOutputs() {
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = __classPrivateFieldGet(this, _Session_uuidGenerator, "f").create();
            const customizationID = __classPrivateFieldGet(this, _Session_uuidGenerator, "f").create();
            try {
                const eventStart = { type: viewer_shared_types_1.TASKTYPE.SESSION_OUTPUTS_UPDATE, id: eventId, progress: 0, data: { sessionId: this.id }, status: 'Updating outputs' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                const oldNode = __classPrivateFieldGet(this, _Session_node, "f").cloneInstance();
                __classPrivateFieldSet(this, _Session_customizationProcess, customizationID, "f");
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").start();
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('init');
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).updateOutputs: Updating Outputs.`);
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].registerBusyMode(customizationID);
                const eventRequest = { type: viewer_shared_types_1.TASKTYPE.SESSION_OUTPUTS_UPDATE, id: eventId, progress: 0.25, data: { sessionId: this.id }, status: 'Loading outputs' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventRequest);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('updateOutputs');
                const newNode = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").loadOutputs(() => __classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('updateOutputs');
                const eventSceneUpdate = { type: viewer_shared_types_1.TASKTYPE.SESSION_OUTPUTS_UPDATE, id: eventId, progress: 0.75, data: { sessionId: this.id }, status: 'Updating scene' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventSceneUpdate);
                // OPTION TO SKIP - PART 1
                if (__classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID) {
                    __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                    for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                        __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                    const eventCancel1 = { type: viewer_shared_types_1.TASKTYPE.SESSION_OUTPUTS_UPDATE, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Output updating was exceeded by other customization request' };
                    __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel1);
                    __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).updateOutputs: Output updating was exceeded by other request.`);
                    return newNode;
                }
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('finish');
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").removeNode(this.node);
                __classPrivateFieldSet(this, _Session_node, newNode, "f");
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").addNode(this.node);
                __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).updateOutputs: Updating outputs finished, updating geometry.`);
                // set the output content to what has been updated
                for (const outputId in this.outputs) {
                    this.outputs[outputId].updateOutput(newNode.children.find(c => c.name === outputId), oldNode.children.find(c => c.name === outputId));
                }
                // set the export definitions
                for (const exportId in this.exports)
                    this.exports[exportId].updateExport();
                this._warningCreator();
                this.node.excludeViewers = __classPrivateFieldGet(this, _Session_excludeViewers, "f");
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                __classPrivateFieldGet(this, _Session_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).updateOutputs: Updated outputs.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('finish');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                const eventEnd = { type: viewer_shared_types_1.TASKTYPE.SESSION_OUTPUTS_UPDATE, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Outputs updated' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                return this.node;
            }
            catch (e) {
                const eventCancel = { type: viewer_shared_types_1.TASKTYPE.SESSION_OUTPUTS_UPDATE, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Output updating failed' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel);
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).updateOutputs`, e);
            }
        });
    }
    uploadGLTF(conversion, eventId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const event1 = { type: viewer_shared_types_1.TASKTYPE.AR_LOADING, id: eventId, progress: 0.25, status: 'Converting AR scene' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, event1);
                const blob = yield __classPrivateFieldGet(this, _Session_api, "f").convertSceneToGLTF(true);
                const event2 = { type: viewer_shared_types_1.TASKTYPE.AR_LOADING, id: eventId, progress: 0.75, status: 'Uploading AR scene' };
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, event2);
                return yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").uploadGLTF(blob, conversion);
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).uploadGLTF`, e);
            }
        });
    }
    // #endregion Public Methods (21)
    // #region Private Methods (2)
    _saveSessionSettings() {
        const parameters = this.parameters;
        const exports = this.exports;
        const sessionProperties = {};
        for (let p in parameters) {
            sessionProperties[p] = {
                order: parameters[p].order || 0,
                displayname: parameters[p].displayname || '',
                hidden: parameters[p].hidden
            };
        }
        for (let e in exports) {
            sessionProperties[e] = {
                order: exports[e].order || 0,
                displayname: exports[e].displayname || '',
                hidden: exports[e].hidden
            };
        }
        __classPrivateFieldGet(this, _Session_settingsEngine, "f").session = sessionProperties;
        let orderedOutputs = [];
        for (let o in this.outputs)
            orderedOutputs.push(this.outputs[o]);
        orderedOutputs.sort((a, b) => ((a.order || Infinity) - (b.order || Infinity)));
        let zerosOutputs = orderedOutputs.filter(x => x.order === 0);
        orderedOutputs = orderedOutputs.filter((el) => { return !zerosOutputs.includes(el); });
        orderedOutputs = zerosOutputs.concat(orderedOutputs);
        const controlOrderOutputs = orderedOutputs.map((value) => { return value.id; });
        for (let i = 0; i < controlOrderOutputs.length; i++) {
            if (this.outputs[controlOrderOutputs[i]])
                if (this.outputs[controlOrderOutputs[i]].order !== i)
                    this.outputs[controlOrderOutputs[i]].order = i;
        }
    }
    _warningCreator() {
        // set the output content to what has been updated
        for (const outputId in this.outputs) {
            let warning = '';
            if (this.outputs[outputId].msg)
                warning += `\n\t- ${this.outputs[outputId].msg}`;
            if (this.outputs[outputId].status_collect && this.outputs[outputId].status_collect !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)
                warning += `\n\t- status_collect is ${this.outputs[outputId].status_collect}`;
            if (this.outputs[outputId].status_computation && this.outputs[outputId].status_computation !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)
                warning += `\n\t- status_computation is ${this.outputs[outputId].status_computation}`;
            if (warning)
                __classPrivateFieldGet(this, _Session_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `\nOutput(${outputId}):${warning}`);
        }
        // set the export definitions
        for (const exportId in this.exports) {
            let warning = '';
            if (this.exports[exportId].msg)
                warning += `\n\t- ${this.exports[exportId].msg}`;
            if (this.exports[exportId].status_collect && this.exports[exportId].status_collect !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)
                warning += `\n\t- status_collect is ${this.exports[exportId].status_collect}`;
            if (this.exports[exportId].status_computation && this.exports[exportId].status_computation !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)
                warning += `\n\t- status_computation is ${this.exports[exportId].status_computation}`;
            if (warning)
                __classPrivateFieldGet(this, _Session_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `\nExport(${exportId}):${warning}`);
        }
    }
};
_Session_api = new WeakMap(), _Session_eventEngine = new WeakMap(), _Session_exports = new WeakMap(), _Session_httpClient = new WeakMap(), _Session_id = new WeakMap(), _Session_inputValidator = new WeakMap(), _Session_logger = new WeakMap(), _Session_modelViewUrl = new WeakMap(), _Session_outputs = new WeakMap(), _Session_parameters = new WeakMap(), _Session_performanceEvaluator = new WeakMap(), _Session_primarySessionRequest = new WeakMap(), _Session_sceneTree = new WeakMap(), _Session_sessionEngine = new WeakMap(), _Session_settingsEngine = new WeakMap(), _Session_stateEngine = new WeakMap(), _Session_ticket = new WeakMap(), _Session_uuidGenerator = new WeakMap(), _Session_automaticUpdate = new WeakMap(), _Session_customizationProcess = new WeakMap(), _Session_excludeViewers = new WeakMap(), _Session_node = new WeakMap(), _Session_parameterHistory = new WeakMap(), _Session_parameterHistoryCall = new WeakMap(), _Session_parameterHistoryForward = new WeakMap(), _Session_primarySession = new WeakMap(), _Session_useSessionSettings = new WeakMap();
Session = __decorate([
    tsyringe_1.injectable(),
    __metadata("design:paramtypes", [Object])
], Session);
exports.Session = Session;
//# sourceMappingURL=Session.js.map