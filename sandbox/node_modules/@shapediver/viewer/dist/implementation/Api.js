"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Api_defaultLogo, _Api_defaultSpinner, _Api_defaultLogoStatic, _Api_eventEngine, _Api_gltfConverter, _Api_inputValidator, _Api_logger, _Api_settingsEngine, _Api_stateEngine, _Api_systemInfo, _Api_uuidGenerator, _Api_automaticUpdate;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const tsyringe_1 = require("tsyringe");
const viewer_data_engine_gltf_converter_1 = require("@shapediver/viewer.data-engine.gltf-converter");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const viewer_settings_1 = require("@shapediver/viewer.settings");
const gl_matrix_1 = require("gl-matrix");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const sdk_geometry_api_sdk_v2_1 = require("@shapediver/sdk.geometry-api-sdk-v2");
const Session_1 = require("./session/Session");
const Viewer_1 = require("./viewer/Viewer");
let Api = class Api {
    // #endregion Properties (13)
    // #region Constructors (1)
    /**
     * @ignore
     */
    constructor() {
        // #region Properties (13)
        _Api_defaultLogo.set(this, 'https://viewer.shapediver.com/v3/graphics/logo_animated_breath.svg');
        _Api_defaultSpinner.set(this, 'https://viewer.shapediver.com/v3/graphics/spinner_ripple.svg');
        _Api_defaultLogoStatic.set(this, 'https://viewer.shapediver.com/v3/graphics/logo.png');
        _Api_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _Api_gltfConverter.set(this, tsyringe_1.container.resolve(viewer_data_engine_gltf_converter_1.GLTFConverter));
        _Api_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _Api_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _Api_settingsEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine));
        _Api_stateEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine));
        _Api_systemInfo.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.SystemInfo));
        _Api_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        this.sceneTree = tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree);
        this.sessions = {};
        this.viewers = {};
        _Api_automaticUpdate.set(this, true);
        try {
            __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySessionAvailable.then(() => {
                var _a;
                (_a = __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySession) === null || _a === void 0 ? void 0 : _a.settingsRegistered.then(() => {
                    this.showMessages = __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.showMessages;
                });
            });
            console.log(`ShapeDiver-Viewer version: ${viewer_shared_build_data_1.build_data.build_version}`);
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.constructor: Api created.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.constructor', e);
        }
    }
    // #endregion Constructors (1)
    // #region Public Accessors (16)
    get automaticUpdate() {
        return __classPrivateFieldGet(this, _Api_automaticUpdate, "f");
    }
    set automaticUpdate(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.automaticUpdate: Updating automaticUpdate to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.automaticUpdate', value, 'boolean');
            __classPrivateFieldSet(this, _Api_automaticUpdate, value, "f");
            for (let s in this.sessions)
                __classPrivateFieldGet(this, _Api_automaticUpdate, "f") ? this.sceneTree.addNode(this.sessions[s].node) : this.sceneTree.removeNode(this.sessions[s].node);
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.automaticUpdate: automaticUpdate was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.automaticUpdate', e);
        }
    }
    get enableAR() {
        return __classPrivateFieldGet(this, _Api_settingsEngine, "f").ar.enable;
    }
    set enableAR(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.enableAR: Updating enableAR to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.enableAR', value, 'boolean');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").ar.enable = value;
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.enableAR: enableAR was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.enableAR', e);
        }
    }
    get globalRotation() {
        return gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation.x, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation.y, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation.z);
    }
    set globalRotation(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalRotation: Updating globalRotation to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalRotation', value, 'vec3');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation = { x: value[0], y: value[1], z: value[2] };
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalRotation: globalRotation was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalRotation', e);
        }
    }
    get globalScale() {
        return gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale.x, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale.y, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale.z);
    }
    set globalScale(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalScale: Updating globalScale to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalScale', value, 'vec3');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale = { x: value[0], y: value[1], z: value[2] };
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalScale: globalScale was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalScale', e);
        }
    }
    get globalTranslation() {
        return gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation.x, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation.y, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation.z);
    }
    set globalTranslation(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalTranslation: Updating globalTranslation to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalTranslation', value, 'vec3');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation = { x: value[0], y: value[1], z: value[2] };
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalTranslation: globalTranslation was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalTranslation', e);
        }
    }
    get loggingLevel() {
        return __classPrivateFieldGet(this, _Api_logger, "f").loggingLevel;
    }
    set loggingLevel(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.loggingLevel: Updating LoggingLevel to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.loggingLevel', value, 'enum', true, Object.values(viewer_shared_services_1.LOGGINGLEVEL));
            __classPrivateFieldGet(this, _Api_logger, "f").loggingLevel = value;
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.loggingLevel: LoggingLevel was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.loggingLevel', e);
        }
    }
    get showMessages() {
        return __classPrivateFieldGet(this, _Api_logger, "f").showMessages;
    }
    set showMessages(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.showMessages: Updating ShowMessages to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.showMessages', value, 'boolean');
            __classPrivateFieldGet(this, _Api_logger, "f").showMessages = value;
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.showMessages = __classPrivateFieldGet(this, _Api_logger, "f").showMessages;
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.showMessages: ShowMessages was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.showMessages', e);
        }
    }
    // #endregion Public Accessors (16)
    // #region Public Methods (12)
    addListener(type, cb) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.addListener: Event Listener was registered for ${type}.`);
            __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.addListener: Event Listener was registered for ${type}.`);
            return __classPrivateFieldGet(this, _Api_eventEngine, "f").addListener(type, cb);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.addListener', e);
        }
    }
    applySettings(response, sections = {
        session: {
            parameter: { displayname: false, order: false, hidden: false, value: false },
            export: { displayname: false, order: false, hidden: false }
        },
        viewer: {
            ar: false,
            scene: false,
            camera: false,
            light: false,
            environment: false,
            general: false
        }
    }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (sections.session === undefined) {
                    sections.session = {
                        parameter: { displayname: false, order: false, hidden: false },
                        export: { displayname: false, order: false, hidden: false }
                    };
                }
                if (sections.session.parameter === undefined)
                    sections.session.parameter = { displayname: false, order: false, hidden: false, value: false };
                if (sections.session.export === undefined)
                    sections.session.export = { displayname: false, order: false, hidden: false };
                if (sections.viewer === undefined)
                    sections.viewer = { ar: false, scene: false, camera: false, light: false, environment: false, general: false };
                let config;
                if (response.viewer !== undefined) {
                    config = response.viewer.config;
                }
                else {
                    const error = new viewer_shared_services_1.ShapeDiverViewerSettingsError('Api.applySettings: No config object available.');
                    throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SETTINGS, 'Api.applySettings', error);
                }
                try {
                    viewer_settings_1.validate(config);
                }
                catch (e) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerSettingsError('Api.applySettings: Was not able to validate config object.');
                    throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SETTINGS, 'Api.applySettings', error);
                }
                const settings = viewer_settings_1.convert(config, '3.1');
                const exportMappingUid = {};
                if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden)
                    if (response.exports)
                        for (let exportId in response.exports)
                            if (response.exports[exportId].uid !== undefined)
                                exportMappingUid[response.exports[exportId].uid] = exportId;
                const session = Object.values(this.sessions).filter((s) => { return s.primarySession; })[0];
                if (!session) {
                    const error = new viewer_shared_services_1.ShapeDiverViewerSettingsError('Api.applySettings: No primary session defined.');
                    throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.SETTINGS, 'Api.applySettings', error);
                }
                const currentSettings = __classPrivateFieldGet(this, _Api_settingsEngine, "f").settings;
                // apply parameter settings
                if (sections.session.parameter.displayname || sections.session.parameter.order || sections.session.parameter.hidden || sections.session.parameter.value) {
                    for (let p in session.parameters) {
                        if (settings.session[p]) {
                            if (sections.session.parameter.displayname)
                                session.parameters[p].displayname = settings.session[p].displayname;
                            if (sections.session.parameter.order)
                                session.parameters[p].order = settings.session[p].order;
                            if (sections.session.parameter.hidden)
                                session.parameters[p].hidden = settings.session[p].hidden || false;
                        }
                        if (response.parameters && response.parameters[p]) {
                            if (sections.session.parameter.value)
                                session.parameters[p].value = response.parameters[p].defval !== undefined ? response.parameters[p].defval : session.parameters[p].value;
                        }
                    }
                }
                // apply export settings
                if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden) {
                    for (let p in session.exports) {
                        let idForSettings = '';
                        if (settings.session[p]) {
                            idForSettings = p;
                        }
                        else {
                            const uid = session.exports[p].uid;
                            if (!uid)
                                continue;
                            if (!exportMappingUid[uid])
                                continue;
                            idForSettings = exportMappingUid[uid];
                        }
                        if (settings.session[idForSettings]) {
                            if (sections.session.export.displayname)
                                session.exports[p].displayname = settings.session[idForSettings].displayname;
                            if (sections.session.export.order)
                                session.exports[p].order = settings.session[idForSettings].order;
                            if (sections.session.export.hidden)
                                session.exports[p].hidden = settings.session[idForSettings].hidden || false;
                        }
                    }
                }
                // apply ar settings
                if (sections.viewer.ar) {
                    currentSettings.ar = settings.ar;
                    currentSettings.general.transformation = settings.general.transformation;
                }
                // apply camera settings
                if (sections.viewer.camera)
                    currentSettings.camera = settings.camera;
                // apply light settings
                if (sections.viewer.light)
                    currentSettings.light = settings.light;
                // apply scene settings
                if (sections.viewer.scene) {
                    currentSettings.environmentGeometry.gridColor = settings.environmentGeometry.gridColor;
                    currentSettings.environmentGeometry.gridVisibility = settings.environmentGeometry.gridVisibility;
                    currentSettings.environmentGeometry.groundPlaneColor = settings.environmentGeometry.groundPlaneColor;
                    currentSettings.environmentGeometry.groundPlaneVisibility = settings.environmentGeometry.groundPlaneVisibility;
                    currentSettings.rendering.shadows = settings.rendering.shadows;
                    currentSettings.rendering.ambientOcclusion = settings.rendering.ambientOcclusion;
                    currentSettings.rendering.textureEncoding = settings.rendering.textureEncoding;
                    currentSettings.rendering.outputEncoding = settings.rendering.outputEncoding;
                    currentSettings.rendering.physicallyCorrectLights = settings.rendering.physicallyCorrectLights;
                    currentSettings.rendering.toneMapping = settings.rendering.toneMapping;
                    currentSettings.rendering.toneMappingExposure = settings.rendering.toneMappingExposure;
                }
                if (sections.viewer.general) {
                    currentSettings.general.commitParameters = settings.general.commitParameters;
                    currentSettings.general.pointSize = settings.general.pointSize;
                }
                // apply environment settings
                if (sections.viewer.environment) {
                    currentSettings.environment.clearAlpha = settings.environment.clearAlpha;
                    currentSettings.environment.clearColor = settings.environment.clearColor;
                    currentSettings.environment.map = settings.environment.map;
                    currentSettings.environment.mapAsBackground = settings.environment.mapAsBackground;
                }
                const promises = [];
                if (sections.session.parameter.value)
                    promises.push(session.customize());
                for (let v in this.viewers) {
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[v].settingsLoaded.reset();
                    promises.push(new Promise(resolve => {
                        __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[v].settingsLoaded.then(() => {
                            resolve();
                        });
                    }));
                    this.viewers[v].applySettings(sections.viewer);
                }
                return new Promise(resolve => Promise.all(promises).then(() => resolve()));
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.applySettings', e);
            }
        });
    }
    closeSession(id, force = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._closeSession(id, force);
        });
    }
    closeViewer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._closeViewer(id);
        });
    }
    convertSceneToGLTF(convertForAR = false) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let scalingMatrix = gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), this.globalScale);
                // add scaling matrix to scene tree node
                const scalingMatrixID = __classPrivateFieldGet(this, _Api_uuidGenerator, "f").create();
                this.sceneTree.root.transformations.push({ id: scalingMatrixID, matrix: scalingMatrix });
                // create the gltf
                const result = yield __classPrivateFieldGet(this, _Api_gltfConverter, "f").convert(this.sceneTree.root, convertForAR);
                // remove scaling the matrix
                for (let i = 0; i < this.sceneTree.root.transformations.length; i++)
                    if (this.sceneTree.root.transformations[i].id === scalingMatrixID)
                        this.sceneTree.root.transformations.splice(i, 1);
                return new Blob([result], { type: 'application/octet-stream' });
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.convertSceneToGLTF', e);
            }
        });
    }
    createSDTFOverview(node = this.sceneTree.root) {
        try {
            const out = new viewer_shared_types_1.SDTFAttributeOverview({});
            for (let i = 0, len = node.data.length; i < len; i++)
                if (node.data[i] instanceof viewer_shared_types_1.SDTFAttributeOverview)
                    out.merge(node.data[i]);
            for (let i = 0, len = node.children.length; i < len; i++)
                out.merge(new viewer_shared_types_1.SDTFAttributeOverview(this.createSDTFOverview(node.children[i])));
            return out.overview;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.createSDTFOverview', e);
        }
    }
    createSession(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionId = '';
            const eventId = __classPrivateFieldGet(this, _Api_uuidGenerator, "f").create();
            try {
                const eventStart = { type: viewer_shared_types_1.TASKTYPE.SESSION_CREATION, id: eventId, progress: 0, status: 'Creating session' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession: Creating and initializing session with properties ${JSON.stringify(properties)}.`);
                // input validation
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties, 'object');
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.ticket, 'string');
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.modelViewUrl, 'string');
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.bearerToken, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.primarySession, 'boolean', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.excludeViewers, 'stringArray', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.id, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.waitForOutputs, 'boolean', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.loadOutputs, 'boolean', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.initialParameters, 'object', false);
                if (properties.initialParameters)
                    for (let p in properties.initialParameters)
                        __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.initialParameters[p], 'string');
                // check if the given id is valid
                sessionId = properties.id || tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator).create();
                if (this.sessions[sessionId]) {
                    const eventClose = { type: viewer_shared_types_1.TASKTYPE.SESSION_CREATION, id: eventId, progress: 0.1, status: 'Closing session with same id' };
                    __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession: Session with this id (${sessionId}) already exists. Closing initial instance.`);
                    yield this._closeSession(sessionId, true);
                }
                let noPrimarySession = true;
                for (let s in this.sessions)
                    if (this.sessions[s].primarySession)
                        noPrimarySession = false;
                let primarySessionRequest = properties.primarySession !== false;
                __classPrivateFieldGet(this, _Api_stateEngine, "f").sessions[sessionId] = {
                    id: sessionId,
                    primary: !!(primarySessionRequest && noPrimarySession),
                    initialized: new viewer_shared_services_1.StatePromise(),
                    settingsRegistered: new viewer_shared_services_1.StatePromise()
                };
                if (!!(primarySessionRequest && noPrimarySession))
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySessionAvailable.resolve(true);
                // create the actual session 
                const session = new Session_1.Session(Object.assign({}, properties, { id: sessionId }));
                // save the session
                this.sessions[sessionId] = session;
                const eventInit = { type: viewer_shared_types_1.TASKTYPE.SESSION_CREATION, id: eventId, progress: 0.25, status: 'Initializing session' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventInit);
                yield session.init(properties.waitForOutputs, properties.loadOutputs, properties.initialParameters);
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CREATED, { sessionId });
                __classPrivateFieldGet(this, _Api_stateEngine, "f").sessions[sessionId].initialized.resolve(true);
                __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession: Session(${session.id}) created.`);
                const eventEnd = { type: viewer_shared_types_1.TASKTYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                return session;
            }
            catch (e) {
                // special behavior, if this was the only session, display the error on the logo screen
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError) {
                    if ((this.sessions[sessionId] && Object.values(this.sessions).length === 1) || (!this.sessions[sessionId] && Object.values(this.sessions).length === 0)) {
                        for (let v in this.viewers)
                            this.viewers[v].displayErrorMessage(e.message);
                    }
                }
                const eventCancel1 = { type: viewer_shared_types_1.TASKTYPE.SESSION_CREATION, id: eventId, progress: 0.9, status: 'Session created failed, closing session' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);
                yield this._closeSession(sessionId, true);
                const eventCancel2 = { type: viewer_shared_types_1.TASKTYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created failed' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.createSession', e);
            }
        });
    }
    createViewer(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            let viewerId = '';
            const eventId = __classPrivateFieldGet(this, _Api_uuidGenerator, "f").create();
            try {
                const eventStart = { type: viewer_shared_types_1.TASKTYPE.VIEWER_CREATION, id: eventId, progress: 0, status: 'Creating viewer' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, 'Api.createViewer', properties, 'object', false);
                const prop = Object.assign({}, properties);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.visibility, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE));
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.canvas, 'HTMLCanvasElement', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.id, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, 'Api.createViewer', prop.branding, 'object', false);
                const branding = Object.assign({}, prop.branding);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, branding.backgroundColor, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, branding.logo, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, branding.busyModeSpinner, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, branding.busyModeDisplay, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY));
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, branding.spinnerPositioning, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING));
                // check if the given id is valid
                const viewerId = prop.id || tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator).create();
                if (this.viewers[viewerId]) {
                    const eventClose = { type: viewer_shared_types_1.TASKTYPE.VIEWER_CREATION, id: eventId, progress: 0.1, status: 'Closing viewer with same id' };
                    __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createViewer: Viewer with this id (${viewerId}) already exists. Closing initial instance.`);
                    yield this._closeViewer(viewerId, true);
                }
                __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[viewerId] = {
                    id: viewerId,
                    initialized: new viewer_shared_services_1.StatePromise(),
                    environmentMapLoaded: new viewer_shared_services_1.StatePromise(),
                    settingsLoaded: new viewer_shared_services_1.StatePromise()
                };
                // create the actual viewer
                let viewer = new Viewer_1.Viewer({
                    id: viewerId,
                    canvas: prop.canvas,
                    visibility: prop.visibility || viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.SESSION,
                    branding: {
                        logo: branding.logo === undefined ? (__classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS ? __classPrivateFieldGet(this, _Api_defaultLogoStatic, "f") : __classPrivateFieldGet(this, _Api_defaultLogo, "f")) : branding.logo,
                        backgroundColor: branding.backgroundColor || '#393a45FF',
                        busyModeSpinner: branding.busyModeSpinner === undefined ? (__classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS ? __classPrivateFieldGet(this, _Api_defaultLogoStatic, "f") : __classPrivateFieldGet(this, _Api_defaultSpinner, "f")) : branding.busyModeSpinner,
                        busyModeDisplay: branding.busyModeDisplay || viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER,
                        spinnerPositioning: branding.spinnerPositioning || viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_RIGHT,
                    }
                });
                if ((prop.visibility || viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.SESSION) === viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.SESSION && __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySession && __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySession.initialized.resolved === true) {
                    const eventEnd = { type: viewer_shared_types_1.TASKTYPE.VIEWER_CREATION, id: eventId, progress: 0.75, status: 'Waiting for primary session settings' };
                    __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventEnd);
                    yield new Promise(resolve => {
                        __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[viewerId].settingsLoaded.then(() => resolve());
                    });
                }
                // save the viewer
                this.viewers[viewerId] = viewer;
                viewer.update();
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWER.VIEWER_CREATED, { viewerId });
                __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[viewerId].initialized.resolve(true);
                __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer: Viewer(${viewer.id}) created.`);
                const eventEnd = { type: viewer_shared_types_1.TASKTYPE.VIEWER_CREATION, id: eventId, progress: 1, status: 'Viewer created' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                return this.viewers[viewerId];
            }
            catch (e) {
                const eventCancel1 = { type: viewer_shared_types_1.TASKTYPE.VIEWER_CREATION, id: eventId, progress: 0.9, status: 'Viewer created failed, closing viewer' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);
                try {
                    yield this._closeViewer(viewerId, true);
                }
                catch (_a) { }
                const eventCancel2 = { type: viewer_shared_types_1.TASKTYPE.VIEWER_CREATION, id: eventId, progress: 1, status: 'Viewer created failed, exiting' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.createViewer', e);
            }
        });
    }
    removeListener(id) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.removeListener: Removing event listener with id ${id}.`);
            return __classPrivateFieldGet(this, _Api_eventEngine, "f").removeListener(id);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.removeListener', e);
        }
    }
    update() {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.update: Updating all viewers.`);
            for (let v in this.viewers)
                this.viewers[v].update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.update', e);
        }
    }
    viewInAR(options = { arScale: 'auto', arPlacement: 'floor', xrEnvironment: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = __classPrivateFieldGet(this, _Api_uuidGenerator, "f").create();
            const busyModeID = __classPrivateFieldGet(this, _Api_uuidGenerator, "f").create();
            try {
                const event = { type: viewer_shared_types_1.TASKTYPE.AR_LOADING, id: eventId, progress: 0, status: 'Loading AR scene' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);
                // if this is not a supported device, throw an error
                if (this.viewableInAR() === false) {
                    const event = { type: viewer_shared_types_1.TASKTYPE.AR_LOADING, id: eventId, progress: 1, status: 'Stopped AR loading due to an error' };
                    __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);
                    const error = new viewer_shared_services_1.ShapeDiverViewerArError('Api.viewInAR: The device or browser is not supported for this functionality, please call "viewableInAR" for more information.');
                    throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.AR, 'Api.viewInAR', error, false);
                }
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, 'Api.viewInAR', options, 'object', false);
                const arScale = options.arScale !== 'auto' ? 'fixed' : 'auto';
                const arPlacement = options.arPlacement !== 'wall' ? 'floor' : 'wall';
                const xrEnvironment = options.xrEnvironment !== true ? false : true;
                // try to find a session that is "AR-ready"
                // as a backend might be used that does not support uploading the gltf (and conversion)
                // we have to do this check and abort if none is found
                let arSession;
                for (let s in this.sessions) {
                    if (this.sessions[s].canUploadGLTF) {
                        arSession = this.sessions[s];
                        break;
                    }
                }
                if (!arSession) {
                    const event = { type: viewer_shared_types_1.TASKTYPE.AR_LOADING, id: eventId, progress: 1, status: 'Stopped AR loading due to an error' };
                    __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);
                    const error = new viewer_shared_services_1.ShapeDiverViewerArError('Api.viewInAR: None of the sessions that are registered are capable of using the AR feature.');
                    throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.AR, 'Api.viewInAR', error, false);
                }
                let arEnvironment = '';
                for (let v in this.viewers) {
                    if (!arSession.node.excludeViewers.includes(this.viewers[v].id)) {
                        const envMapUrl = this.viewers[v].getEnvironmentMapImageUrl();
                        if (envMapUrl !== '') {
                            if (envMapUrl.endsWith('.hdr')) {
                                arEnvironment = 'skybox-image=' + envMapUrl;
                            }
                            else {
                                arEnvironment = 'environment-image=' + envMapUrl;
                            }
                        }
                        break;
                    }
                }
                // register the busy mode to create a visual feedback
                for (let v in this.viewers)
                    this.viewers[v].registerBusyMode(busyModeID);
                // convert and upload (and maybe convert to usdz) the file
                const file = yield arSession.uploadGLTF(__classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS ? sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.USDZ : sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.NONE, eventId);
                if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS) {
                    // create the link and click it
                    const a = document.createElement('a');
                    a.href = file + (arScale === 'fixed' ? '.usdz#allowsContentScaling=0' : '.usdz');
                    a.rel = 'ar';
                    const img = document.createElement('img');
                    img.src = __classPrivateFieldGet(this, _Api_defaultLogoStatic, "f");
                    a.appendChild(img);
                    a.click();
                }
                else {
                    const a = document.createElement('a');
                    a.href = `intent://arvr.google.com/scene-viewer/1.0?resizable=${arScale === 'fixed' ? 'false' : 'true'}&file=${file}&mode=ar_only#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;end;`;
                    a.click();
                }
                for (let v in this.viewers)
                    this.viewers[v].deregisterBusyMode(busyModeID);
                const event2 = { type: viewer_shared_types_1.TASKTYPE.AR_LOADING, id: eventId, progress: 1, status: 'Done loading AR scene, launching AR' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, event2);
            }
            catch (e) {
                const event = { type: viewer_shared_types_1.TASKTYPE.AR_LOADING, id: eventId, progress: 1, status: 'Stopped AR loading due to an error' };
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);
                for (let v in this.viewers)
                    this.viewers[v].deregisterBusyMode(busyModeID);
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.viewInAR', e);
            }
        });
    }
    viewableInAR() {
        try {
            // has to be a mobile device (duh)
            if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS === false && __classPrivateFieldGet(this, _Api_systemInfo, "f").isAndroid === false)
                return false;
            // no Firefox on Android
            if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isAndroid === true && __classPrivateFieldGet(this, _Api_systemInfo, "f").isFirefox === true)
                return false;
            // no Firefox on iOS
            if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS === true && __classPrivateFieldGet(this, _Api_systemInfo, "f").isFirefox === true)
                return false;
            return true;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.viewableInAR', e);
        }
    }
    // #endregion Public Methods (12)
    // #region Private Methods (2)
    _closeSession(id, force = false) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.closeSession: Closing session ${id}.`);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, 'Api.closeSession', id, 'string');
                if (!this.sessions[id]) {
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.closeSession: Session with id ${id} was not registered.`);
                    return false;
                }
                if (force === false && __classPrivateFieldGet(this, _Api_stateEngine, "f").sessions[id].initialized.resolved === false)
                    yield new Promise(resolve => { __classPrivateFieldGet(this, _Api_stateEngine, "f").sessions[id].initialized.then(() => resolve()); });
                let result = false;
                if (force === false) {
                    result = yield this.sessions[id].close();
                }
                else {
                    try {
                        result = yield this.sessions[id].close();
                    }
                    catch (_a) { }
                }
                __classPrivateFieldGet(this, _Api_stateEngine, "f").sessions[id].settingsRegistered.reset();
                if (this.sessions[id].primarySession) {
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySessionAvailable.reset();
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").boundingBoxCreated.reset();
                    for (let v in this.viewers)
                        this.viewers[v].reset();
                }
                this.sessions[id] = undefined;
                delete this.sessions[id];
                delete __classPrivateFieldGet(this, _Api_stateEngine, "f").sessions[id];
                __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${id}): Session closed.`);
                for (let s in this.sessions) {
                    const session = this.sessions[s];
                    if (session.primarySessionRequest) {
                        yield this.sessions[s].setAsPrimary();
                        __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySessionAvailable.resolve(true);
                        __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${s}): Initializing settings.`);
                        break;
                    }
                }
                return result;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.closeSession', e);
            }
        });
    }
    _closeViewer(id, force = false) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.closeViewer: Closing viewer ${id}.`);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, 'Api.closeViewer', id, 'string');
                if (!this.viewers[id]) {
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.closeViewer: Viewer with id ${id} was not registered`);
                    return false;
                }
                if (force === false && __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[id].initialized.resolved === false)
                    yield new Promise(resolve => { __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[id].initialized.then(() => resolve()); });
                __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[id].settingsLoaded.reset();
                __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[id].environmentMapLoaded.reset();
                __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[id].initialized.reset();
                let result = false;
                if (force === false) {
                    result = yield this.viewers[id].close();
                }
                else {
                    try {
                        result = yield this.viewers[id].close();
                    }
                    catch (_a) { }
                }
                this.viewers[id] = undefined;
                delete this.viewers[id];
                delete __classPrivateFieldGet(this, _Api_stateEngine, "f").viewers[id];
                __classPrivateFieldGet(this, _Api_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${id}): Viewer closed.`);
                return result;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.closeViewer', e);
            }
        });
    }
};
_Api_defaultLogo = new WeakMap(), _Api_defaultSpinner = new WeakMap(), _Api_defaultLogoStatic = new WeakMap(), _Api_eventEngine = new WeakMap(), _Api_gltfConverter = new WeakMap(), _Api_inputValidator = new WeakMap(), _Api_logger = new WeakMap(), _Api_settingsEngine = new WeakMap(), _Api_stateEngine = new WeakMap(), _Api_systemInfo = new WeakMap(), _Api_uuidGenerator = new WeakMap(), _Api_automaticUpdate = new WeakMap();
Api = __decorate([
    tsyringe_1.singleton(),
    __metadata("design:paramtypes", [])
], Api);
exports.Api = Api;
//# sourceMappingURL=Api.js.map