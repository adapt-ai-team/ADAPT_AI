"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Viewer_cameras, _Viewer_converter, _Viewer_eventEngine, _Viewer_inputValidator, _Viewer_lightScenes, _Viewer_logger, _Viewer_performanceEvaluator, _Viewer_sceneTree, _Viewer_stateEngine, _Viewer_uuidGenerator, _Viewer_busyModeIDs, _Viewer_flagsCameraFreeze, _Viewer_flagsContinuousRendering, _Viewer_flagsShadowMapUpdate, _Viewer_renderingEngine;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Viewer = void 0;
const viewer_rendering_engine_threejs_standard_1 = require("@shapediver/viewer.rendering-engine-threejs.standard");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const OrthographicCamera_1 = require("./camera/OrthographicCamera");
const PerspectiveCamera_1 = require("./camera/PerspectiveCamera");
const LightScene_1 = require("./lights/LightScene");
let Viewer = class Viewer {
    // #endregion Properties (15)
    // #region Constructors (1)
    /**
     * @ignore
     * @param id
     * @param type
     * @param canvas
     */
    constructor(properties) {
        // #region Properties (15)
        _Viewer_cameras.set(this, {});
        _Viewer_converter.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Converter));
        _Viewer_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _Viewer_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _Viewer_lightScenes.set(this, {});
        _Viewer_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _Viewer_performanceEvaluator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.PerformanceEvaluator));
        _Viewer_sceneTree.set(this, tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree));
        _Viewer_stateEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine));
        _Viewer_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        _Viewer_busyModeIDs.set(this, []);
        _Viewer_flagsCameraFreeze.set(this, []);
        _Viewer_flagsContinuousRendering.set(this, []);
        _Viewer_flagsShadowMapUpdate.set(this, []);
        _Viewer_renderingEngine.set(this, void 0);
        try {
            __classPrivateFieldSet(this, _Viewer_renderingEngine, new viewer_rendering_engine_threejs_standard_1.RenderingEngine(properties), "f");
            tsyringe_1.container.registerInstance('renderingEngine', __classPrivateFieldGet(this, _Viewer_renderingEngine, "f"));
            if (!this.camera)
                this.createCamera(viewer_rendering_engine_camera_engine_1.CAMERATYPE.PERSPECTIVE);
            this.update();
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${properties.id}).constructor: Viewer created.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${properties.id}).constructor`, e);
        }
    }
    // #endregion Constructors (1)
    // #region Public Accessors (63)
    get ambientOcclusion() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").ambientOcclusion;
    }
    set ambientOcclusion(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusion: Updating AmbientOcclusion to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusion`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").ambientOcclusion = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusion: ambientOcclusion was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusion`, e);
        }
    }
    get ambientOcclusionIntensity() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").ambientOcclusionIntensity;
    }
    set ambientOcclusionIntensity(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusionIntensity: Updating ambientOcclusionIntensity to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusionIntensity`, value, 'factor');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").ambientOcclusionIntensity = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusionIntensity: ambientOcclusionIntensity was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).ambientOcclusionIntensity`, e);
        }
    }
    get animations() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").animations;
    }
    get automaticResizing() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").automaticResizing;
    }
    set automaticResizing(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).automaticResizing: Updating AutomaticResizing to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).automaticResizing`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").automaticResizing = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).automaticResizing: automaticResizing was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).automaticResizing`, e);
        }
    }
    get beautyRenderBlendingDuration() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").beautyRenderBlendingDuration;
    }
    set beautyRenderBlendingDuration(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderBlendingDuration: Updating RenderBlendingDuration to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderBlendingDuration`, value, 'positive');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").beautyRenderBlendingDuration = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderBlendingDuration: beautyRenderBlendingDuration was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderBlendingDuration`, e);
        }
    }
    get beautyRenderDelay() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").beautyRenderDelay;
    }
    set beautyRenderDelay(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderDelay: Updating BeautyRenderDelay to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderDelay`, value, 'positive');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").beautyRenderDelay = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderDelay: beautyRenderDelay was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).beautyRenderDelay`, e);
        }
    }
    get busy() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").busy;
    }
    set busy(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).busy: Updating busy to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).busy`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").busy = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).busy: busy was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).busy`, e);
        }
    }
    get camera() {
        if (__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.camera)
            return this.cameras[__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.camera.id];
        return null;
    }
    get cameras() {
        // add new cameras
        for (let c in __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.cameras) {
            if (!__classPrivateFieldGet(this, _Viewer_cameras, "f")[c])
                __classPrivateFieldGet(this, _Viewer_cameras, "f")[c] = __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.cameras[c].type === viewer_rendering_engine_camera_engine_1.CAMERATYPE.ORTHOGRAPHIC ? new OrthographicCamera_1.OrthographicCamera(__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.cameras[c], this) : new PerspectiveCamera_1.PerspectiveCamera(__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.cameras[c], this);
        }
        // delete cameras that don't exist
        for (let c in __classPrivateFieldGet(this, _Viewer_cameras, "f")) {
            if (!__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.cameras[c])
                delete __classPrivateFieldGet(this, _Viewer_cameras, "f")[c];
        }
        return __classPrivateFieldGet(this, _Viewer_cameras, "f");
    }
    get canvas() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").canvas;
    }
    get clearAlpha() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").clearAlpha;
    }
    set clearAlpha(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearAlpha: Updating ClearAlpha to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearAlpha`, value, 'factor');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").clearAlpha = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearAlpha: clearAlpha was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearAlpha`, e);
        }
    }
    get clearColor() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").clearColor;
    }
    set clearColor(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearColor: Updating ClearColor to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearColor`, value, 'color');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").clearColor = __classPrivateFieldGet(this, _Viewer_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearColor: clearColor was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).clearColor`, e);
        }
    }
    get closed() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").closed;
    }
    get convertSDTFItemToVisualizationData() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").convertSDTFItemToVisualizationData;
    }
    set convertSDTFItemToVisualizationData(value) {
        __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").convertSDTFItemToVisualizationData = value;
    }
    get domEventEngine() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").domEventEngine;
    }
    get environmentMap() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").environmentMap;
    }
    set environmentMap(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMap: Updating EnvironmentMap to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMap`, value, 'cubeMap');
            __classPrivateFieldGet(this, _Viewer_stateEngine, "f").viewers[this.id].environmentMapLoaded.then(() => {
                __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMap: environmentMap was set to: ${value}`);
                this.update();
            });
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").environmentMap = value;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMap`, e);
        }
    }
    get environmentMapAsBackground() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").environmentMapAsBackground;
    }
    set environmentMapAsBackground(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapAsBackground: Updating EnvironmentMapAsBackground to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapAsBackground`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").environmentMapAsBackground = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapAsBackground: environmentMapAsBackground was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapAsBackground`, e);
        }
    }
    get environmentMapResolution() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").environmentMapResolution;
    }
    set environmentMapResolution(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapResolution: Updating EnvironmentMapResolution to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapResolution`, value, 'string');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").environmentMapResolution = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapResolution: environmentMapResolution was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).environmentMapResolution`, e);
        }
    }
    get gridColor() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").gridColor;
    }
    set gridColor(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridColor: Updating GridColor to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridColor`, value, 'color');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").gridColor = __classPrivateFieldGet(this, _Viewer_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridColor: gridColor was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridColor: Something unexpected happened.`, e);
        }
    }
    get gridVisibility() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").gridVisibility;
    }
    set gridVisibility(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridVisibility: Updating GridVisibility to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridVisibility`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").gridVisibility = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridVisibility: gridVisibility was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).gridVisibility`, e);
        }
    }
    get groundPlaneColor() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").groundPlaneColor;
    }
    set groundPlaneColor(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneColor: Updating groundPlaneColor to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneColor`, value, 'color');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").groundPlaneColor = __classPrivateFieldGet(this, _Viewer_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneColor: groundPlaneColor was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneColor: Something unexpected happened.`, e);
        }
    }
    get groundPlaneVisibility() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").groundPlaneVisibility;
    }
    set groundPlaneVisibility(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneVisibility: Updating GroundPlaneVisibility to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneVisibility`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").groundPlaneVisibility = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneVisibility: groundPlaneVisibility was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).groundPlaneVisibility`, e);
        }
    }
    get id() {
        if (!__classPrivateFieldGet(this, _Viewer_renderingEngine, "f"))
            return '';
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").id;
    }
    get lightScene() {
        if (__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.lightScene)
            return this.lightScenes[__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.lightScene.id];
        return null;
    }
    get lightSceneId() {
        if (__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.lightScene)
            return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.lightScene.id;
        return '';
    }
    set lightSceneId(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).lightScene: Updating LightScene to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).lightScene`, value, 'string');
            if (this.assignLightScene(value)) {
                __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).lightScene: lightScene was set to: ${value}`);
            }
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).lightScene`, e);
        }
    }
    get lightScenes() {
        // add new lightScenes
        for (let l in __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.lightScenes) {
            if (!__classPrivateFieldGet(this, _Viewer_lightScenes, "f")[l])
                __classPrivateFieldGet(this, _Viewer_lightScenes, "f")[l] = new LightScene_1.LightScene(__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.lightScenes[l], this);
        }
        // delete lightScenes that don't exist
        for (let l in __classPrivateFieldGet(this, _Viewer_lightScenes, "f")) {
            if (!__classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.lightScenes[l])
                delete __classPrivateFieldGet(this, _Viewer_lightScenes, "f")[l];
        }
        return __classPrivateFieldGet(this, _Viewer_lightScenes, "f");
    }
    get outputEncoding() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").outputEncoding;
    }
    set outputEncoding(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).outputEncoding: Updating outputEncoding to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).outputEncoding`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING));
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").outputEncoding = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).outputEncoding: outputEncoding was set to: ${value}`);
            __classPrivateFieldGet(this, _Viewer_sceneTree, "f").root.updateVersion();
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).outputEncoding: Something unexpected happened.`, e);
        }
    }
    get physicallyCorrectLights() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").physicallyCorrectLights;
    }
    set physicallyCorrectLights(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).physicallyCorrectLights: Updating physicallyCorrectLights to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).physicallyCorrectLights`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").physicallyCorrectLights = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).physicallyCorrectLights: physicallyCorrectLights was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).physicallyCorrectLights`, e);
        }
    }
    get pointSize() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").pointSize;
    }
    set pointSize(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).pointSize: Updating PointSize to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).pointSize`, value, 'positive');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").pointSize = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).pointSize: pointSize was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).pointSize: Something unexpected happened.`, e);
        }
    }
    get shadows() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").shadows;
    }
    set shadows(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).shadows: Updating Shadows to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).shadows`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").shadows = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).shadows: shadows was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).shadows`, e);
        }
    }
    get show() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").show;
    }
    set show(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).show: Updating Show to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).show`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").show = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).show: show was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).show`, e);
        }
    }
    get showStatistics() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").showStatistics;
    }
    set showStatistics(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).showStatistics: Updating ShowStatistics to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).showStatistics`, value, 'boolean');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").showStatistics = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).showStatistics: showStatistics was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).showStatistics`, e);
        }
    }
    get textureEncoding() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").textureEncoding;
    }
    set textureEncoding(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).textureEncoding: Updating textureEncoding to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).textureEncoding`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING));
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").textureEncoding = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).textureEncoding: textureEncoding was set to: ${value}`);
            __classPrivateFieldGet(this, _Viewer_sceneTree, "f").root.updateVersion();
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).textureEncoding: Something unexpected happened.`, e);
        }
    }
    get toneMapping() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").toneMapping;
    }
    set toneMapping(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMapping: Updating toneMapping to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMapping`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TONE_MAPPING));
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").toneMapping = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMapping: toneMapping was set to: ${value}`);
            __classPrivateFieldGet(this, _Viewer_sceneTree, "f").root.updateVersion();
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMapping: Something unexpected happened.`, e);
        }
    }
    get toneMappingExposure() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").toneMappingExposure;
    }
    set toneMappingExposure(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMappingExposure: Updating toneMappingExposure to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMappingExposure`, value, 'positive');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").toneMappingExposure = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMappingExposure: toneMappingExposure was set to: ${value}`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).toneMappingExposure: Something unexpected happened.`, e);
        }
    }
    get type() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").type;
    }
    set type(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).type: Updating Type to ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).type`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.RENDERERTYPE));
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").type = value;
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).type: type was set to: ${value}`);
            __classPrivateFieldGet(this, _Viewer_sceneTree, "f").root.updateVersion();
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).type`, e);
        }
    }
    // #endregion Public Accessors (63)
    // #region Public Methods (28)
    addCameraFreezeFlag() {
        const token = __classPrivateFieldGet(this, _Viewer_uuidGenerator, "f").create();
        __classPrivateFieldGet(this, _Viewer_flagsCameraFreeze, "f").push(token);
        __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.deactivateCameraEvents();
        return token;
    }
    addCanvasEventListener(listener) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).addCanvasEventListener: Adding new canvas event listener.`);
            return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").domEventEngine.addDomEventListener(listener);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).addCanvasEventListener`, e);
        }
    }
    addContinuousRenderingFlag() {
        const token = __classPrivateFieldGet(this, _Viewer_uuidGenerator, "f").create();
        __classPrivateFieldGet(this, _Viewer_flagsContinuousRendering, "f").push(token);
        __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").continuousRendering = true;
        return token;
    }
    addShadowMapUpdateFlag() {
        const token = __classPrivateFieldGet(this, _Viewer_uuidGenerator, "f").create();
        __classPrivateFieldGet(this, _Viewer_flagsShadowMapUpdate, "f").push(token);
        __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").continuousShadowMapUpdate = true;
        return token;
    }
    applySettings(sections = { camera: true, light: true, scene: true, environment: true }) {
        __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").applySettings(sections);
    }
    assignCamera(id) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).assignCamera: Assigning Camera with id ${id}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).assignCamera`, id, 'string');
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.assignCamera(id);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).assignCamera: Camera with id ${id} assigned.`);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).assignCamera`, e);
        }
    }
    assignLightScene(id) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).assignLightScene: Assigning LightScene with id ${id}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).assignLightScene`, id, 'string');
            if (this.lightScene && this.lightScene.id === id) {
                __classPrivateFieldGet(this, _Viewer_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).assignLightScene: The light scene with id ${id} was already assigned.`);
                return true;
            }
            const r = __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.assignLightScene(id);
            if (r)
                __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).assignLightScene: Assigned light scene with id ${id}.`);
            if (!r) {
                const error = new viewer_shared_services_1.ShapeDiverViewerLightError(`Viewer(${this.id}).assignLightScene: Could not assign light scene.`);
                throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).assignLightScene`, error);
            }
            this.update();
            return r;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).assignLightScene`, e);
        }
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const closeResult = yield __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").close();
            __classPrivateFieldGet(this, _Viewer_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWER.VIEWER_CLOSED, { viewerId: this.id });
            if (!closeResult)
                __classPrivateFieldGet(this, _Viewer_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}): Was not able to close viewer completely, please disregard this viewer.`);
            return closeResult;
        });
    }
    createCamera(type, id) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createCamera: Creating Camera with id ${id} and type ${type}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createCamera`, type, 'enum', true, Object.values(viewer_rendering_engine_camera_engine_1.CAMERATYPE));
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createCamera`, id, 'string', false);
            const cameraLogic = __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.createCamera(type, id);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createCamera: ${cameraLogic.type === viewer_rendering_engine_camera_engine_1.CAMERATYPE.ORTHOGRAPHIC ? 'Orthographic' : 'Perspective'} camera with id ${id} created.`);
            this.assignCamera(cameraLogic.id);
            return this.cameras[cameraLogic.id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).createCamera`, e);
        }
    }
    createLightScene(properties) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).createLightScene: Creating LightScene with properties ${properties}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).createLightScene`, properties, 'object', false);
            const props = Object.assign({}, properties);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).createLightScene`, props.name, 'string', false);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).createLightScene`, props.standard, 'boolean', false);
            const lightSceneLogic = __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.createLightScene(props);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).createLightScene: New light scene with id ${lightSceneLogic.id} created.`);
            if (!this.lightScene || (this.lightScene && lightSceneLogic.id !== this.lightScene.id))
                this.assignLightScene(lightSceneLogic.id);
            this.update();
            return this.lightScenes[lightSceneLogic.id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).createLightScene`, e);
        }
    }
    createOrthographicCamera(id) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createOrthographicCamera: Creating OrthographicCamera with id ${id}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createOrthographicCamera`, id, 'string', false);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createOrthographicCamera: Orthographic camera with id ${id} created.`);
            return this.createCamera(viewer_rendering_engine_camera_engine_1.CAMERATYPE.ORTHOGRAPHIC, id);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).createOrthographicCamera`, e);
        }
    }
    createPerspectiveCamera(id) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createPerspectiveCamera: Creating PerspectiveCamera with id ${id}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createPerspectiveCamera`, id, 'string', false);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).createPerspectiveCamera: Perspective camera with id ${id} created.`);
            return this.createCamera(viewer_rendering_engine_camera_engine_1.CAMERATYPE.PERSPECTIVE, id);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).createPerspectiveCamera`, e);
        }
    }
    deregisterBusyMode(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).deregisterBusyMode: Deregistering busy mode for id ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).deregisterBusyMode`, value, 'string');
            if (!__classPrivateFieldGet(this, _Viewer_busyModeIDs, "f").includes(value))
                return false;
            __classPrivateFieldGet(this, _Viewer_busyModeIDs, "f").splice(__classPrivateFieldGet(this, _Viewer_busyModeIDs, "f").indexOf(value), 1);
            if (__classPrivateFieldGet(this, _Viewer_busyModeIDs, "f").length === 0) {
                __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").busy = false;
                __classPrivateFieldGet(this, _Viewer_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWER.BUSY_MODE_OFF, { viewerId: this.id });
            }
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).deregisterBusyMode: Busy mode was deregistered for id: ${value}`);
            this.update();
            return true;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).deregisterBusyMode`, e);
        }
    }
    displayErrorMessage(message) {
        if (this.show === false)
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").displayErrorMessage(message);
    }
    getEnvironmentMapImageUrl() {
        return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").getEnvironmentMapImageUrl();
    }
    getScreenshot(type, quality) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).getScreenshot: Getting getScreenshot with type ${type} and quality ${quality}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).getScreenshot`, type, 'string', false);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).getScreenshot`, quality, 'factor', false);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).getScreenshot: screenshot was requested`);
            return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").getScreenshot(type, quality);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).getScreenshot`, e);
        }
    }
    registerBusyMode(value) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).registerBusyMode: Registering busy mode for id ${value}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).registerBusyMode`, value, 'string');
            if (__classPrivateFieldGet(this, _Viewer_busyModeIDs, "f").includes(value))
                return false;
            __classPrivateFieldGet(this, _Viewer_busyModeIDs, "f").push(value);
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").busy = true;
            __classPrivateFieldGet(this, _Viewer_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWER.BUSY_MODE_ON, { viewerId: this.id });
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).registerBusyMode: Busy mode was registered for id: ${value}`);
            this.update();
            return true;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).registerBusyMode`, e);
        }
    }
    removeCamera(id) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).removeCamera: Removing Camera with id ${id}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).removeCamera`, id, 'string');
            const r = __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.removeCamera(id);
            if (r)
                __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).removeCamera: Camera with id ${id} removed.`);
            if (!r)
                __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Viewer(${this.id}).removeCamera: Could not remove camera with id ${id}.`);
            this.update();
            return r;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).removeCamera`, e);
        }
    }
    removeCameraFreezeFlag(token) {
        if (!__classPrivateFieldGet(this, _Viewer_flagsCameraFreeze, "f").includes(token))
            return false;
        __classPrivateFieldGet(this, _Viewer_flagsCameraFreeze, "f").splice(__classPrivateFieldGet(this, _Viewer_flagsCameraFreeze, "f").indexOf(token), 1);
        if (__classPrivateFieldGet(this, _Viewer_flagsCameraFreeze, "f").length === 0)
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").cameraEngine.activateCameraEvents();
        return true;
    }
    removeCanvasEventListener(token) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).removeCanvasEventListener: Removing canvas event listener.`);
            return __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").domEventEngine.removeDomEventListener(token);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).removeCanvasEventListener`, e);
        }
    }
    removeContinuousRenderingFlag(token) {
        if (!__classPrivateFieldGet(this, _Viewer_flagsContinuousRendering, "f").includes(token))
            return false;
        __classPrivateFieldGet(this, _Viewer_flagsContinuousRendering, "f").splice(__classPrivateFieldGet(this, _Viewer_flagsContinuousRendering, "f").indexOf(token), 1);
        if (__classPrivateFieldGet(this, _Viewer_flagsContinuousRendering, "f").length === 0)
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").continuousRendering = false;
        return true;
    }
    removeLightScene(id) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLightScene: Removing LightScene with id ${id}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLightScene`, id, 'string');
            const r = __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").lightEngine.removeLightScene(id);
            if (r)
                __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLightScene: Light scene with id ${id} removed.`);
            if (!r)
                __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLightScene: Could not remove light scene with id ${id}.`);
            this.update();
            return r;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).removeLightScene`, e);
        }
    }
    removeShadowMapUpdateFlag(token) {
        if (!__classPrivateFieldGet(this, _Viewer_flagsShadowMapUpdate, "f").includes(token))
            return false;
        __classPrivateFieldGet(this, _Viewer_flagsShadowMapUpdate, "f").splice(__classPrivateFieldGet(this, _Viewer_flagsShadowMapUpdate, "f").indexOf(token), 1);
        if (__classPrivateFieldGet(this, _Viewer_flagsShadowMapUpdate, "f").length === 0)
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").continuousShadowMapUpdate = false;
        return true;
    }
    render() {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).render: Rendering Viewer.`);
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").renderingManager.render();
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).render`, e);
        }
    }
    reset() {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).reset: Resetting Viewer.`);
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").reset();
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).reset`, e);
        }
    }
    resize(width, height) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).resize: Resizing Viewer to ${width} / ${height}.`);
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).resize`, width, 'number');
            __classPrivateFieldGet(this, _Viewer_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).resize`, height, 'number');
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).resize: Resized Viewer to ${width} / ${height}.`);
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").resize(width, height);
            this.update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).resize`, e);
        }
    }
    update() {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).update: Updating Viewer.`);
            if (!__classPrivateFieldGet(this, _Viewer_renderingEngine, "f"))
                return;
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").update();
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).update: Updated viewer.`);
            __classPrivateFieldGet(this, _Viewer_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWER.VIEWER_UPDATED, { viewerId: this.id });
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).update`, e);
        }
    }
    updateNode(node) {
        try {
            __classPrivateFieldGet(this, _Viewer_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).updateNode: Updating Node.`);
            if (!__classPrivateFieldGet(this, _Viewer_renderingEngine, "f"))
                return;
            __classPrivateFieldGet(this, _Viewer_renderingEngine, "f").sceneTreeManager.updateNode(node, node.transformedNodes[this.id]);
            __classPrivateFieldGet(this, _Viewer_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).updateNode: Updated Node.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _Viewer_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${this.id}).updateNode`, e);
        }
    }
};
_Viewer_cameras = new WeakMap(), _Viewer_converter = new WeakMap(), _Viewer_eventEngine = new WeakMap(), _Viewer_inputValidator = new WeakMap(), _Viewer_lightScenes = new WeakMap(), _Viewer_logger = new WeakMap(), _Viewer_performanceEvaluator = new WeakMap(), _Viewer_sceneTree = new WeakMap(), _Viewer_stateEngine = new WeakMap(), _Viewer_uuidGenerator = new WeakMap(), _Viewer_busyModeIDs = new WeakMap(), _Viewer_flagsCameraFreeze = new WeakMap(), _Viewer_flagsContinuousRendering = new WeakMap(), _Viewer_flagsShadowMapUpdate = new WeakMap(), _Viewer_renderingEngine = new WeakMap();
Viewer = __decorate([
    tsyringe_1.injectable(),
    __metadata("design:paramtypes", [Object])
], Viewer);
exports.Viewer = Viewer;
//# sourceMappingURL=Viewer.js.map