"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpotLight_inputValidator, _SpotLight_light, _SpotLight_logger, _SpotLight_viewer;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotLight = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const AbstractLight_1 = require("./AbstractLight");
class SpotLight extends AbstractLight_1.AbstractLight {
    // #endregion Properties (4)
    // #region Constructors (1)
    /**
     * @ignore
     * @param light
     */
    constructor(light, viewer) {
        super(light, viewer);
        // #region Properties (4)
        _SpotLight_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _SpotLight_light.set(this, void 0);
        _SpotLight_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _SpotLight_viewer.set(this, void 0);
        __classPrivateFieldSet(this, _SpotLight_light, light, "f");
        __classPrivateFieldSet(this, _SpotLight_viewer, viewer, "f");
    }
    // #endregion Constructors (1)
    // #region Public Accessors (12)
    get angle() {
        return __classPrivateFieldGet(this, _SpotLight_light, "f").angle;
    }
    set angle(value) {
        try {
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).angle: Updating Angle to ${value}.`);
            __classPrivateFieldGet(this, _SpotLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).angle`, value, 'positive');
            __classPrivateFieldGet(this, _SpotLight_light, "f").angle = value;
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).angle: angle was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _SpotLight_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).angle`, e);
        }
    }
    get decay() {
        return __classPrivateFieldGet(this, _SpotLight_light, "f").decay;
    }
    set decay(value) {
        try {
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).decay: Updating Decay to ${value}.`);
            __classPrivateFieldGet(this, _SpotLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).decay`, value, 'positive');
            __classPrivateFieldGet(this, _SpotLight_light, "f").decay = value;
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).decay: decay was set to: ${value}`);
            __classPrivateFieldGet(this, _SpotLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _SpotLight_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).decay`, e);
        }
    }
    get distance() {
        return __classPrivateFieldGet(this, _SpotLight_light, "f").distance;
    }
    set distance(value) {
        try {
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).distance: Updating Distance to ${value}.`);
            __classPrivateFieldGet(this, _SpotLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).distance`, value, 'positive');
            __classPrivateFieldGet(this, _SpotLight_light, "f").distance = value;
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).distance: distance was set to: ${value}`);
            __classPrivateFieldGet(this, _SpotLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _SpotLight_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).distance`, e);
        }
    }
    get penumbra() {
        return __classPrivateFieldGet(this, _SpotLight_light, "f").penumbra;
    }
    set penumbra(value) {
        try {
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).penumbra: Updating Penumbra to ${value}.`);
            __classPrivateFieldGet(this, _SpotLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).penumbra`, value, 'positive');
            __classPrivateFieldGet(this, _SpotLight_light, "f").penumbra = value;
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).penumbra: penumbra was set to: ${value}`);
            __classPrivateFieldGet(this, _SpotLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _SpotLight_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).penumbra`, e);
        }
    }
    get position() {
        return __classPrivateFieldGet(this, _SpotLight_light, "f").position;
    }
    set position(value) {
        try {
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).position: Updating Position to ${value}.`);
            __classPrivateFieldGet(this, _SpotLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).position`, value, 'vec3');
            __classPrivateFieldGet(this, _SpotLight_light, "f").position = value;
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).position: position was set to: ${value}`);
            __classPrivateFieldGet(this, _SpotLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _SpotLight_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).position`, e);
        }
    }
    get target() {
        return __classPrivateFieldGet(this, _SpotLight_light, "f").target;
    }
    set target(value) {
        try {
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).target: Updating Target to ${value}.`);
            __classPrivateFieldGet(this, _SpotLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).target`, value, 'vec3');
            __classPrivateFieldGet(this, _SpotLight_light, "f").target = value;
            __classPrivateFieldGet(this, _SpotLight_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).target: target was set to: ${value}`);
            __classPrivateFieldGet(this, _SpotLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _SpotLight_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).target`, e);
        }
    }
}
exports.SpotLight = SpotLight;
_SpotLight_inputValidator = new WeakMap(), _SpotLight_light = new WeakMap(), _SpotLight_logger = new WeakMap(), _SpotLight_viewer = new WeakMap();
//# sourceMappingURL=SpotLight.js.map