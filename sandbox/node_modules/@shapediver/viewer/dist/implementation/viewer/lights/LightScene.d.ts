import { ILightScene as LightSceneLogic } from '@shapediver/viewer.rendering-engine.light-engine';
import { vec3 } from 'gl-matrix';
import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { ILightScene } from '../../../interfaces/viewer/lights/ILightScene';
import { ILight } from '../../../interfaces/viewer/lights/ILight';
import { IViewer } from '../../../interfaces/viewer/IViewer';
import { IAmbientLight } from '../../../interfaces/viewer/lights/IAmbientLight';
import { IDirectionalLight } from '../../../interfaces/viewer/lights/IDirectionalLight';
import { IHemisphereLight } from '../../../interfaces/viewer/lights/IHemisphereLight';
import { IPointLight } from '../../../interfaces/viewer/lights/IPointLight';
import { ISpotLight } from '../../../interfaces/viewer/lights/ISpotLight';
export declare class LightScene implements ILightScene {
    #private;
    /**
     * @ignore
     * @param light
     */
    constructor(lightSceneLogic: LightSceneLogic, viewer: IViewer);
    get id(): string;
    get lights(): {
        [key: string]: ILight;
    };
    get name(): string | undefined;
    set name(value: string | undefined);
    get node(): TreeNode;
    /**
     * Add an ambient light with the specified properties to the current light scene.
     * An id can be provided. If not, a unique id will be created.
     *
     * @param properties.color the color of the light
     * @param properties.intensity the intensity of the light
     * @returns
     */
    addAmbientLight(properties: {
        color?: string | number | vec3;
        intensity?: number;
        name?: string;
    }): IAmbientLight;
    /**
     * Add a directional light with the specified properties to the current light scene.
     * An id can be provided. If not, a unique id will be created.
     *
     * @param properties.color the color of the light
     * @param properties.intensity the intensity of the light
     * @param properties.direction the directional of the light
     * @param properties.castShadow the option to cast shadow
     * @param properties.shadowMapResolution the resolution of the shadow map
     * @param properties.shadowMapBias the bias of the shadow map
     * @returns
     */
    addDirectionalLight(properties: {
        color?: string | number | vec3;
        intensity?: number;
        direction?: vec3;
        castShadow?: boolean;
        shadowMapResolution?: number;
        shadowMapBias?: number;
        name?: string;
    }): IDirectionalLight;
    /**
     * Add a hemisphere light with the specified properties to the current light scene.
     * An id can be provided. If not, a unique id will be created.
     *
     * @param properties.color the color of the light
     * @param properties.intensity the intensity of the light
     * @param properties.groundColor the ground color of the light
     * @returns
     */
    addHemisphereLight(properties: {
        color?: string | number | vec3;
        intensity?: number;
        groundColor?: string | number | vec3;
        name?: string;
    }): IHemisphereLight;
    /**
     * Add a point light with the specified properties to the current light scene.
     * An id can be provided. If not, a unique id will be created.
     *
     * @param properties.color the color of the light
     * @param properties.intensity the intensity of the light
     * @param properties.position the position of the light
     * @param properties.distance the distance of the light radiance
     * @param properties.decay the decay of the light radiance
     * @returns
     */
    addPointLight(properties: {
        color?: string | number | vec3;
        intensity?: number;
        position?: vec3;
        distance?: number;
        decay?: number;
        name?: string;
    }): IPointLight;
    /**
     * Add a spot light with the specified properties to the current light scene.
     * An id can be provided. If not, a unique id will be created.
     *
     * @param properties.color the color of the light
     * @param properties.intensity the intensity of the light
     * @param properties.position the position of the light
     * @param properties.target the target of the light
     * @param properties.distance the distance of the light radiance
     * @param properties.decay the decay of the light radiance
     * @param properties.angle the angle of the light cone
     * @param properties.penumbra the percentage of the cone that is part of the penumbra
     * @returns
     */
    addSpotLight(properties?: {
        color?: string | number | vec3;
        intensity?: number;
        position?: vec3;
        target?: vec3;
        distance?: number;
        decay?: number;
        angle?: number;
        penumbra?: number;
        name?: string;
    }): ISpotLight;
    /**
     * Remove the light with the specified id from the current light scene.
     *
     * @param id the id of the light
     * @returns
     */
    removeLight(id: string): boolean;
}
//# sourceMappingURL=LightScene.d.ts.map