"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractCamera_camera, _AbstractCamera_inputValidator, _AbstractCamera_logger, _AbstractCamera_tree, _AbstractCamera_viewer;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractCamera = void 0;
const tsyringe_1 = require("tsyringe");
const gl_matrix_1 = require("gl-matrix");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
class AbstractCamera {
    // #endregion Properties (5)
    // #region Constructors (1)
    /**
     * @ignore
     * @param camera
     */
    constructor(camera, viewer) {
        // #region Properties (5)
        _AbstractCamera_camera.set(this, void 0);
        _AbstractCamera_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _AbstractCamera_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _AbstractCamera_tree.set(this, tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree));
        _AbstractCamera_viewer.set(this, void 0);
        try {
            __classPrivateFieldSet(this, _AbstractCamera_camera, camera, "f");
            __classPrivateFieldSet(this, _AbstractCamera_viewer, viewer, "f");
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).constructor: Camera api created.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).constructor`, e);
        }
    }
    // #endregion Constructors (1)
    // #region Public Accessors (24)
    get autoAdjust() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").autoAdjust;
    }
    set autoAdjust(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).autoAdjust: Updating AutoAdjust to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).autoAdjust`, value, 'boolean');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").autoAdjust = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).autoAdjust: autoAdjust was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).autoAdjust`, e);
        }
    }
    get cameraMovementDuration() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").cameraMovementDuration;
    }
    set cameraMovementDuration(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).cameraMovementDuration: Updating CameraMovementDuration to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).cameraMovementDuration`, value, 'positive');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").cameraMovementDuration = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).cameraMovementDuration: cameraMovementDuration was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).cameraMovementDuration`, e);
        }
    }
    get defaultPosition() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").defaultPosition;
    }
    set defaultPosition(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultPosition: Updating DefaultPosition to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultPosition`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").defaultPosition = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultPosition: defaultPosition was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultPosition`, e);
        }
    }
    get defaultTarget() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").defaultTarget;
    }
    set defaultTarget(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultTarget: Updating DefaultTarget to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultTarget`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").defaultTarget = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultTarget: defaultTarget was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).defaultTarget`, e);
        }
    }
    get enableCameraControls() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").enableCameraControls;
    }
    set enableCameraControls(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).enableCameraControls: Updating EnableCameraControls to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).enableCameraControls`, value, 'boolean');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").enableCameraControls = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).enableCameraControls: enableCameraControls was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).enableCameraControls`, e);
        }
    }
    get id() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").id;
    }
    get order() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").order;
    }
    set order(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).order: Updating Order to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).order`, value, 'number', false);
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").order = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).order: order was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).order`, e);
        }
    }
    get position() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").position;
    }
    set position(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).position: Updating Position to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).position`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").position = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).position: position was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).position`, e);
        }
    }
    get revertAtMouseUp() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").revertAtMouseUp;
    }
    set revertAtMouseUp(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUp: Updating RevertAtMouseUp to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUp`, value, 'boolean');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").revertAtMouseUp = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUp: revertAtMouseUp was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUp`, e);
        }
    }
    get revertAtMouseUpDuration() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").revertAtMouseUpDuration;
    }
    set revertAtMouseUpDuration(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUpDuration: Updating RevertAtMouseUpDuration to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUpDuration`, value, 'positive');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").revertAtMouseUpDuration = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUpDuration: revertAtMouseUpDuration was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).revertAtMouseUpDuration`, e);
        }
    }
    get target() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").target;
    }
    set target(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).target: Updating Target to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).target`, value, 'vec3');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").target = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).target: target was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).target`, e);
        }
    }
    get type() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").type;
    }
    get zoomExtentsFactor() {
        return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").zoomExtentsFactor;
    }
    set zoomExtentsFactor(value) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomExtentsFactor: Updating ZoomExtentsFactor to ${value}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomExtentsFactor`, value, 'positive');
            __classPrivateFieldGet(this, _AbstractCamera_camera, "f").zoomExtentsFactor = value;
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomExtentsFactor: zoomExtentsFactor was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractCamera_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomExtentsFactor`, e);
        }
    }
    // #endregion Public Accessors (24)
    // #region Public Methods (6)
    /**
     * Let the camera follow a path from different position and target pairs to another.
     *
     * @param path the defined path
     * @param options various options to be adjusted
     * @returns
     */
    animate(path, options) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate: Animating with path ${path} and options ${JSON.stringify(options)}.`);
            for (let i = 0; i < path.length; i++) {
                __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, path[i].position, 'vec3');
                __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, path[i].target, 'vec3');
            }
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, options, 'object', false);
            const o = Object.assign({}, options);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, o.easing, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, o.duration, 'number', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, o.default, 'boolean', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, o.coordinates, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, o.interpolation, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate: Starting camera path animation.`);
            return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").animate(path, o);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).animate`, e);
        }
    }
    /**
     * Calculate the position for our {@link zoomTo} method.
     * A specific target can be provided, as well as a specific camera startingPosition and startingTarget.
     * If no target is provided, the current bounding box is used.
     * If not startingPosition and startingTarget are provided, the current camera position and target are used.
     *
     * @param zoomTarget
     * @param startingPosition
     * @param startingTarget
     * @returns
     */
    calculateZoomTo(zoomTarget, startingPosition, startingTarget) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).getZoomPositionAndTarget`, startingTarget, 'vec3', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).getZoomPositionAndTarget`, startingPosition, 'vec3', false);
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).getZoomPositionAndTarget: Getting position and target for zoomTarget ${zoomTarget}.`);
            let target;
            if (zoomTarget) {
                if (Array.isArray(zoomTarget)) {
                    __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).getZoomPositionAndTarget`, zoomTarget, 'stringArray');
                    target = new viewer_shared_math_1.Box();
                    for (let i = 0; i < zoomTarget.length; i++) {
                        const node = __classPrivateFieldGet(this, _AbstractCamera_tree, "f").getNodeAtPath(zoomTarget[i]);
                        if (node)
                            target.union(node.boundingBox);
                    }
                }
                else if (zoomTarget instanceof viewer_shared_math_1.Box) {
                    target = zoomTarget.clone();
                }
                else {
                    const error = new viewer_shared_services_1.ShapeDiverViewerCameraError(`Camera(${this.id}).getZoomPositionAndTarget: No valid zoom target supplied.`);
                    throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).getZoomPositionAndTarget`, error);
                }
            }
            return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").calculateZoomTo(target, startingPosition, startingTarget);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).getZoomPositionAndTarget`, e);
        }
    }
    project(p) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).project: Projecting point ${p}.`);
            return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").project(p);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).project`, e);
        }
    }
    /**
     * Reset the camera to its default position and target.
     *
     * @param options various options to be adjusted
     * @returns
     */
    reset(options) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset: Resetting with options ${JSON.stringify(options)}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset`, options, 'object', false);
            const o = Object.assign({}, options);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset`, o.easing, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset`, o.duration, 'number', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset`, o.coordinates, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset`, o.interpolation, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset: Resetting position and target.`);
            return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").reset(o);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).reset`, e);
        }
    }
    /**
     * Set the camera to its a specific position and target.
     *
     * @param options various options to be adjusted
     * @returns
     */
    set(position, target, options) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set: Setting to position ${position} and target ${target} with options ${JSON.stringify(options)}.`);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, position, 'vec3');
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, target, 'vec3');
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, options, 'object', false);
            const o = Object.assign({}, options);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, o.easing, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, o.duration, 'number', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, o.coordinates, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, o.interpolation, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set: Setting position to ${position} and target to ${target}.`);
            return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").set(gl_matrix_1.vec3.fromValues(position[0], position[1], position[2]), gl_matrix_1.vec3.fromValues(target[0], target[1], target[2]), o);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).set`, e);
        }
    }
    unproject(p) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).unproject: Unprojecting point ${p}.`);
            return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").unproject(p);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).unproject`, e);
        }
    }
    /**
     * Zoom in on a specific part of the scene, or the whole scene (default).
     *
     * @param zoomTarget the target to zoom to
     * @param options various options to be adjusted
     * @returns
     */
    zoomTo(zoomTarget, options) {
        try {
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo: Zooming to ${zoomTarget} with options ${JSON.stringify(options)}.`);
            let target;
            if (zoomTarget) {
                if (Array.isArray(zoomTarget)) {
                    __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, zoomTarget, 'stringArray');
                    target = new viewer_shared_math_1.Box();
                    for (let i = 0; i < zoomTarget.length; i++) {
                        const node = __classPrivateFieldGet(this, _AbstractCamera_tree, "f").getNodeAtPath(zoomTarget[i]);
                        if (node)
                            target.union(node.boundingBox);
                    }
                }
                else if (zoomTarget instanceof viewer_shared_math_1.Box) {
                    target = zoomTarget.clone();
                }
                else {
                    const error = new viewer_shared_services_1.ShapeDiverViewerCameraError(`Camera(${this.id}).zoomTo: No valid zoom target supplied.`);
                    throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, error);
                }
            }
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, options, 'object', false);
            const o = Object.assign({}, options);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, o.easing, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, o.duration, 'number', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, o.coordinates, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, o.interpolation, 'string', false);
            __classPrivateFieldGet(this, _AbstractCamera_logger, "f").debug(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo: Zooming in.`);
            return __classPrivateFieldGet(this, _AbstractCamera_camera, "f").zoomTo(target, o);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.ShapeDiverViewerError || e instanceof viewer_shared_services_1.ShapeDiverBackendError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractCamera_logger, "f").handleError(viewer_shared_services_1.LOGGINGTOPIC.CAMERA, `Camera(${this.id}).zoomTo`, e);
        }
    }
}
exports.AbstractCamera = AbstractCamera;
_AbstractCamera_camera = new WeakMap(), _AbstractCamera_inputValidator = new WeakMap(), _AbstractCamera_logger = new WeakMap(), _AbstractCamera_tree = new WeakMap(), _AbstractCamera_viewer = new WeakMap();
//# sourceMappingURL=AbstractCamera.js.map