import { Tree, TreeNode } from '@shapediver/viewer.shared.node-tree';
import { IEvent, LOGGINGLEVEL, MAINEVENTTYPE } from '@shapediver/viewer.shared.services';
import { BUSY_MODE_DISPLAY, SPINNER_POSITIONING, VISIBILITYMODE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { vec3 } from 'gl-matrix';
import { SDTFOverview } from '@shapediver/viewer.shared.types';
import { ShapeDiverResponseDto } from '@shapediver/sdk.geometry-api-sdk-v2';
import { IApi } from '../interfaces/IApi';
import { ISession } from '../interfaces/session/ISession';
import { IViewer } from '../interfaces/viewer/IViewer';
export declare class Api implements IApi {
    #private;
    readonly sceneTree: Tree;
    readonly sessions: {
        [key: string]: ISession;
    };
    readonly viewers: {
        [key: string]: IViewer;
    };
    /**
     * @ignore
     */
    constructor();
    get automaticUpdate(): boolean;
    set automaticUpdate(value: boolean);
    get enableAR(): boolean;
    set enableAR(value: boolean);
    get globalRotation(): vec3;
    set globalRotation(value: vec3);
    get globalScale(): vec3;
    set globalScale(value: vec3);
    get globalTranslation(): vec3;
    set globalTranslation(value: vec3);
    get loggingLevel(): LOGGINGLEVEL;
    set loggingLevel(value: LOGGINGLEVEL);
    get showMessages(): boolean;
    set showMessages(value: boolean);
    addListener(type: string | MAINEVENTTYPE, cb: (event: IEvent) => void): string;
    applySettings(response: ShapeDiverResponseDto, sections?: {
        session?: {
            parameter?: {
                displayname?: boolean;
                order?: boolean;
                hidden?: boolean;
                value?: boolean;
            };
            export?: {
                displayname?: boolean;
                order?: boolean;
                hidden?: boolean;
            };
        };
        viewer?: {
            ar?: boolean;
            scene?: boolean;
            camera?: boolean;
            light?: boolean;
            environment?: boolean;
            general?: boolean;
        };
    }): Promise<void>;
    closeSession(id: string, force?: boolean): Promise<boolean>;
    closeViewer(id: string): Promise<boolean>;
    convertSceneToGLTF(convertForAR?: boolean): Promise<Blob>;
    createSDTFOverview(node?: TreeNode): SDTFOverview;
    createSession(properties: {
        ticket: string;
        modelViewUrl: string;
        bearerToken?: string;
        primarySession?: boolean;
        id?: string;
        excludeViewers?: string[];
        waitForOutputs?: boolean;
        loadOutputs?: boolean;
        initialParameters?: {
            [key: string]: string;
        };
    }): Promise<ISession>;
    createViewer(properties?: {
        visibility?: VISIBILITYMODE;
        canvas?: HTMLCanvasElement;
        id?: string;
        branding?: {
            logo?: string | null;
            backgroundColor?: string;
            busyModeSpinner?: string;
            busyModeDisplay?: BUSY_MODE_DISPLAY;
            spinnerPositioning?: SPINNER_POSITIONING;
        };
    }): Promise<IViewer>;
    removeListener(id: string): boolean;
    update(): void;
    viewInAR(options?: {
        arScale?: 'auto' | 'fixed';
        arPlacement?: 'floor' | 'wall';
        xrEnvironment?: boolean;
    }): Promise<void>;
    viewableInAR(): boolean;
    private _closeSession;
    private _closeViewer;
}
//# sourceMappingURL=Api.d.ts.map