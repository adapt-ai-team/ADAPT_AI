import { z } from "zod";
export declare const cameraSchema: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    name: z.ZodOptional<z.ZodString>;
    type: z.ZodString;
    autoAdjust: z.ZodBoolean;
    cameraMovementDuration: z.ZodNumber;
    controls: z.ZodObject<{
        autoRotationSpeed: z.ZodNumber;
        damping: z.ZodNumber;
        enableAutoRotation: z.ZodBoolean;
        enableKeyPan: z.ZodBoolean;
        enablePan: z.ZodBoolean;
        enableRotation: z.ZodBoolean;
        enableZoom: z.ZodBoolean;
        input: z.ZodObject<{
            keys: z.ZodObject<{
                up: z.ZodNumber;
                down: z.ZodNumber;
                left: z.ZodNumber;
                right: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                right: number;
                left: number;
                up: number;
                down: number;
            }, {
                right: number;
                left: number;
                up: number;
                down: number;
            }>;
            mouse: z.ZodObject<{
                rotate: z.ZodNumber;
                zoom: z.ZodNumber;
                pan: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                rotate: number;
                zoom: number;
                pan: number;
            }, {
                rotate: number;
                zoom: number;
                pan: number;
            }>;
            touch: z.ZodObject<{
                rotate: z.ZodNumber;
                zoom: z.ZodNumber;
                pan: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                rotate: number;
                zoom: number;
                pan: number;
            }, {
                rotate: number;
                zoom: number;
                pan: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        }, {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        }>;
        keyPanSpeed: z.ZodNumber;
        movementSmoothness: z.ZodNumber;
        restrictions: z.ZodObject<{
            position: z.ZodObject<{
                cube: z.ZodObject<{
                    min: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                    max: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }>;
                sphere: z.ZodObject<{
                    center: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    radius: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }>;
            }, "strip", z.ZodTypeAny, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }>;
            target: z.ZodObject<{
                cube: z.ZodObject<{
                    min: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                    max: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }>;
                sphere: z.ZodObject<{
                    center: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    radius: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }>;
            }, "strip", z.ZodTypeAny, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }>;
            rotation: z.ZodObject<{
                minPolarAngle: z.ZodNumber;
                maxPolarAngle: z.ZodNumber;
                minAzimuthAngle: z.ZodNullable<z.ZodNumber>;
                maxAzimuthAngle: z.ZodNullable<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            }, {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            }>;
            zoom: z.ZodObject<{
                minDistance: z.ZodNumber;
                maxDistance: z.ZodNullable<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minDistance: number;
                maxDistance: number | null;
            }, {
                minDistance: number;
                maxDistance: number | null;
            }>;
        }, "strip", z.ZodTypeAny, {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        }, {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        }>;
        rotationSpeed: z.ZodNumber;
        panSpeed: z.ZodNumber;
        zoomSpeed: z.ZodNumber;
        enableAzimuthRotation: z.ZodBoolean;
        enableObjectControls: z.ZodBoolean;
        enablePolarRotation: z.ZodBoolean;
        enableTurntableControls: z.ZodBoolean;
        objectControlsCenter: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
        turntableCenter: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    }, {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    }>;
    enableCameraControls: z.ZodBoolean;
    position: z.ZodObject<{
        x: z.ZodNullable<z.ZodNumber>;
        y: z.ZodNullable<z.ZodNumber>;
        z: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x: number | null;
        y: number | null;
        z: number | null;
    }, {
        x: number | null;
        y: number | null;
        z: number | null;
    }>;
    revertAtMouseUp: z.ZodBoolean;
    revertAtMouseUpDuration: z.ZodNumber;
    target: z.ZodObject<{
        x: z.ZodNullable<z.ZodNumber>;
        y: z.ZodNullable<z.ZodNumber>;
        z: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x: number | null;
        y: number | null;
        z: number | null;
    }, {
        x: number | null;
        y: number | null;
        z: number | null;
    }>;
    zoomExtentsFactor: z.ZodNumber;
    sceneRotation: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, {
    fov: z.ZodNumber;
}>, "strip", z.ZodTypeAny, {
    type: string;
    position: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    target: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    autoAdjust: boolean;
    cameraMovementDuration: number;
    controls: {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    };
    enableCameraControls: boolean;
    revertAtMouseUp: boolean;
    revertAtMouseUpDuration: number;
    zoomExtentsFactor: number;
    sceneRotation: {
        x: number;
        y: number;
    };
    fov: number;
    name?: string | undefined;
}, {
    type: string;
    position: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    target: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    autoAdjust: boolean;
    cameraMovementDuration: number;
    controls: {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    };
    enableCameraControls: boolean;
    revertAtMouseUp: boolean;
    revertAtMouseUpDuration: number;
    zoomExtentsFactor: number;
    sceneRotation: {
        x: number;
        y: number;
    };
    fov: number;
    name?: string | undefined;
}>, z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    type: z.ZodString;
    autoAdjust: z.ZodBoolean;
    cameraMovementDuration: z.ZodNumber;
    controls: z.ZodObject<{
        autoRotationSpeed: z.ZodNumber;
        damping: z.ZodNumber;
        enableAutoRotation: z.ZodBoolean;
        enableKeyPan: z.ZodBoolean;
        enablePan: z.ZodBoolean;
        enableRotation: z.ZodBoolean;
        enableZoom: z.ZodBoolean;
        input: z.ZodObject<{
            keys: z.ZodObject<{
                up: z.ZodNumber;
                down: z.ZodNumber;
                left: z.ZodNumber;
                right: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                right: number;
                left: number;
                up: number;
                down: number;
            }, {
                right: number;
                left: number;
                up: number;
                down: number;
            }>;
            mouse: z.ZodObject<{
                rotate: z.ZodNumber;
                zoom: z.ZodNumber;
                pan: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                rotate: number;
                zoom: number;
                pan: number;
            }, {
                rotate: number;
                zoom: number;
                pan: number;
            }>;
            touch: z.ZodObject<{
                rotate: z.ZodNumber;
                zoom: z.ZodNumber;
                pan: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                rotate: number;
                zoom: number;
                pan: number;
            }, {
                rotate: number;
                zoom: number;
                pan: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        }, {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        }>;
        keyPanSpeed: z.ZodNumber;
        movementSmoothness: z.ZodNumber;
        restrictions: z.ZodObject<{
            position: z.ZodObject<{
                cube: z.ZodObject<{
                    min: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                    max: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }>;
                sphere: z.ZodObject<{
                    center: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    radius: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }>;
            }, "strip", z.ZodTypeAny, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }>;
            target: z.ZodObject<{
                cube: z.ZodObject<{
                    min: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                    max: z.ZodObject<{
                        x: z.ZodNullable<z.ZodNumber>;
                        y: z.ZodNullable<z.ZodNumber>;
                        z: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }, {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }, {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                }>;
                sphere: z.ZodObject<{
                    center: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    radius: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }, {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                }>;
            }, "strip", z.ZodTypeAny, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }, {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            }>;
            rotation: z.ZodObject<{
                minPolarAngle: z.ZodNumber;
                maxPolarAngle: z.ZodNumber;
                minAzimuthAngle: z.ZodNullable<z.ZodNumber>;
                maxAzimuthAngle: z.ZodNullable<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            }, {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            }>;
            zoom: z.ZodObject<{
                minDistance: z.ZodNumber;
                maxDistance: z.ZodNullable<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                minDistance: number;
                maxDistance: number | null;
            }, {
                minDistance: number;
                maxDistance: number | null;
            }>;
        }, "strip", z.ZodTypeAny, {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        }, {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        }>;
        rotationSpeed: z.ZodNumber;
        panSpeed: z.ZodNumber;
        zoomSpeed: z.ZodNumber;
        enableAzimuthRotation: z.ZodBoolean;
        enableObjectControls: z.ZodBoolean;
        enablePolarRotation: z.ZodBoolean;
        enableTurntableControls: z.ZodBoolean;
        objectControlsCenter: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
        turntableCenter: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    }, {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    }>;
    enableCameraControls: z.ZodBoolean;
    position: z.ZodObject<{
        x: z.ZodNullable<z.ZodNumber>;
        y: z.ZodNullable<z.ZodNumber>;
        z: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x: number | null;
        y: number | null;
        z: number | null;
    }, {
        x: number | null;
        y: number | null;
        z: number | null;
    }>;
    revertAtMouseUp: z.ZodBoolean;
    revertAtMouseUpDuration: z.ZodNumber;
    target: z.ZodObject<{
        x: z.ZodNullable<z.ZodNumber>;
        y: z.ZodNullable<z.ZodNumber>;
        z: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x: number | null;
        y: number | null;
        z: number | null;
    }, {
        x: number | null;
        y: number | null;
        z: number | null;
    }>;
    zoomExtentsFactor: z.ZodNumber;
    sceneRotation: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: string;
    position: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    target: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    autoAdjust: boolean;
    cameraMovementDuration: number;
    controls: {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    };
    enableCameraControls: boolean;
    revertAtMouseUp: boolean;
    revertAtMouseUpDuration: number;
    zoomExtentsFactor: number;
    sceneRotation: {
        x: number;
        y: number;
    };
    name?: string | undefined;
}, {
    type: string;
    position: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    target: {
        x: number | null;
        y: number | null;
        z: number | null;
    };
    autoAdjust: boolean;
    cameraMovementDuration: number;
    controls: {
        autoRotationSpeed: number;
        damping: number;
        enableAutoRotation: boolean;
        enableKeyPan: boolean;
        enablePan: boolean;
        enableRotation: boolean;
        enableZoom: boolean;
        input: {
            keys: {
                right: number;
                left: number;
                up: number;
                down: number;
            };
            mouse: {
                rotate: number;
                zoom: number;
                pan: number;
            };
            touch: {
                rotate: number;
                zoom: number;
                pan: number;
            };
        };
        keyPanSpeed: number;
        movementSmoothness: number;
        restrictions: {
            rotation: {
                minPolarAngle: number;
                maxPolarAngle: number;
                minAzimuthAngle: number | null;
                maxAzimuthAngle: number | null;
            };
            zoom: {
                minDistance: number;
                maxDistance: number | null;
            };
            position: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
            target: {
                cube: {
                    min: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                    max: {
                        x: number | null;
                        y: number | null;
                        z: number | null;
                    };
                };
                sphere: {
                    center: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    radius: number | null;
                };
            };
        };
        rotationSpeed: number;
        panSpeed: number;
        zoomSpeed: number;
        enableAzimuthRotation: boolean;
        enableObjectControls: boolean;
        enablePolarRotation: boolean;
        enableTurntableControls: boolean;
        objectControlsCenter: {
            x: number;
            y: number;
            z: number;
        };
        turntableCenter: {
            x: number;
            y: number;
            z: number;
        };
    };
    enableCameraControls: boolean;
    revertAtMouseUp: boolean;
    revertAtMouseUpDuration: number;
    zoomExtentsFactor: number;
    sceneRotation: {
        x: number;
        y: number;
    };
    name?: string | undefined;
}>]>>;
export declare const lightSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    lights: z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        type: z.ZodString;
        order: z.ZodOptional<z.ZodNumber>;
        properties: z.ZodUnion<[z.ZodObject<{
            color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            intensity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            intensity: number;
            color: string | number;
        }, {
            intensity: number;
            color: string | number;
        }>, z.ZodObject<{
            color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            intensity: z.ZodNumber;
            direction: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
            castShadow: z.ZodBoolean;
            shadowMapResolution: z.ZodOptional<z.ZodNumber>;
            shadowMapBias: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            intensity: number;
            color: string | number;
            direction: {
                x: number;
                y: number;
                z: number;
            };
            castShadow: boolean;
            shadowMapResolution?: number | undefined;
            shadowMapBias?: number | undefined;
        }, {
            intensity: number;
            color: string | number;
            direction: {
                x: number;
                y: number;
                z: number;
            };
            castShadow: boolean;
            shadowMapResolution?: number | undefined;
            shadowMapBias?: number | undefined;
        }>, z.ZodObject<{
            skyColor: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            intensity: z.ZodNumber;
            groundColor: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            intensity: number;
            skyColor: string | number;
            groundColor: string | number;
        }, {
            intensity: number;
            skyColor: string | number;
            groundColor: string | number;
        }>, z.ZodObject<{
            color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            intensity: z.ZodNumber;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
            distance: z.ZodNumber;
            decay: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            position: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
        }, {
            position: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
        }>, z.ZodObject<{
            color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            intensity: z.ZodNumber;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
            target: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
            distance: z.ZodNumber;
            decay: z.ZodNumber;
            angle: z.ZodNumber;
            penumbra: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            position: {
                x: number;
                y: number;
                z: number;
            };
            target: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
            angle: number;
            penumbra: number;
        }, {
            position: {
                x: number;
                y: number;
                z: number;
            };
            target: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
            angle: number;
            penumbra: number;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties: {
            intensity: number;
            color: string | number;
        } | {
            intensity: number;
            color: string | number;
            direction: {
                x: number;
                y: number;
                z: number;
            };
            castShadow: boolean;
            shadowMapResolution?: number | undefined;
            shadowMapBias?: number | undefined;
        } | {
            intensity: number;
            skyColor: string | number;
            groundColor: string | number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            target: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
            angle: number;
            penumbra: number;
        };
        name?: string | undefined;
        order?: number | undefined;
    }, {
        type: string;
        properties: {
            intensity: number;
            color: string | number;
        } | {
            intensity: number;
            color: string | number;
            direction: {
                x: number;
                y: number;
                z: number;
            };
            castShadow: boolean;
            shadowMapResolution?: number | undefined;
            shadowMapBias?: number | undefined;
        } | {
            intensity: number;
            skyColor: string | number;
            groundColor: string | number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            target: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
            angle: number;
            penumbra: number;
        };
        name?: string | undefined;
        order?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    lights: Record<string, {
        type: string;
        properties: {
            intensity: number;
            color: string | number;
        } | {
            intensity: number;
            color: string | number;
            direction: {
                x: number;
                y: number;
                z: number;
            };
            castShadow: boolean;
            shadowMapResolution?: number | undefined;
            shadowMapBias?: number | undefined;
        } | {
            intensity: number;
            skyColor: string | number;
            groundColor: string | number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            target: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
            angle: number;
            penumbra: number;
        };
        name?: string | undefined;
        order?: number | undefined;
    }>;
    name?: string | undefined;
}, {
    lights: Record<string, {
        type: string;
        properties: {
            intensity: number;
            color: string | number;
        } | {
            intensity: number;
            color: string | number;
            direction: {
                x: number;
                y: number;
                z: number;
            };
            castShadow: boolean;
            shadowMapResolution?: number | undefined;
            shadowMapBias?: number | undefined;
        } | {
            intensity: number;
            skyColor: string | number;
            groundColor: string | number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
        } | {
            position: {
                x: number;
                y: number;
                z: number;
            };
            target: {
                x: number;
                y: number;
                z: number;
            };
            intensity: number;
            color: string | number;
            distance: number;
            decay: number;
            angle: number;
            penumbra: number;
        };
        name?: string | undefined;
        order?: number | undefined;
    }>;
    name?: string | undefined;
}>>;
export declare const postProcessingSchema: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        intensity: z.ZodOptional<z.ZodNumber>;
        kernelSize: z.ZodOptional<z.ZodNumber>;
        luminanceSmoothing: z.ZodOptional<z.ZodNumber>;
        luminanceThreshold: z.ZodOptional<z.ZodNumber>;
        mipmapBlur: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        mipmapBlur: boolean;
        intensity?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        luminanceSmoothing?: number | undefined;
        luminanceThreshold?: number | undefined;
    }, {
        mipmapBlur: boolean;
        intensity?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        luminanceSmoothing?: number | undefined;
        luminanceThreshold?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        mipmapBlur: boolean;
        intensity?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        luminanceSmoothing?: number | undefined;
        luminanceThreshold?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        mipmapBlur: boolean;
        intensity?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        luminanceSmoothing?: number | undefined;
        luminanceThreshold?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        modulationOffset: z.ZodOptional<z.ZodNumber>;
        offset: z.ZodOptional<z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>>;
        radialModulation: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        blendFunction?: number | undefined;
        modulationOffset?: number | undefined;
        offset?: {
            x: number;
            y: number;
        } | undefined;
        radialModulation?: boolean | undefined;
    }, {
        blendFunction?: number | undefined;
        modulationOffset?: number | undefined;
        offset?: {
            x: number;
            y: number;
        } | undefined;
        radialModulation?: boolean | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        modulationOffset?: number | undefined;
        offset?: {
            x: number;
            y: number;
        } | undefined;
        radialModulation?: boolean | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        modulationOffset?: number | undefined;
        offset?: {
            x: number;
            y: number;
        } | undefined;
        radialModulation?: boolean | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        bokehScale: z.ZodOptional<z.ZodNumber>;
        focusDistance: z.ZodOptional<z.ZodNumber>;
        focusRange: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        blendFunction?: number | undefined;
        bokehScale?: number | undefined;
        focusDistance?: number | undefined;
        focusRange?: number | undefined;
    }, {
        blendFunction?: number | undefined;
        bokehScale?: number | undefined;
        focusDistance?: number | undefined;
        focusRange?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        bokehScale?: number | undefined;
        focusDistance?: number | undefined;
        focusRange?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        bokehScale?: number | undefined;
        focusDistance?: number | undefined;
        focusRange?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        angle: z.ZodOptional<z.ZodNumber>;
        blendFunction: z.ZodOptional<z.ZodNumber>;
        scale: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        scale?: number | undefined;
        angle?: number | undefined;
        blendFunction?: number | undefined;
    }, {
        scale?: number | undefined;
        angle?: number | undefined;
        blendFunction?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        scale?: number | undefined;
        angle?: number | undefined;
        blendFunction?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        scale?: number | undefined;
        angle?: number | undefined;
        blendFunction?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        scale: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        scale?: number | undefined;
        blendFunction?: number | undefined;
    }, {
        scale?: number | undefined;
        blendFunction?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        scale?: number | undefined;
        blendFunction?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        scale?: number | undefined;
        blendFunction?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        resolutionScale: z.ZodOptional<z.ZodNumber>;
        spp: z.ZodOptional<z.ZodNumber>;
        distance: z.ZodOptional<z.ZodNumber>;
        distanceIntensity: z.ZodOptional<z.ZodNumber>;
        intensity: z.ZodOptional<z.ZodNumber>;
        color: z.ZodOptional<z.ZodString>;
        bias: z.ZodOptional<z.ZodNumber>;
        thickness: z.ZodOptional<z.ZodNumber>;
        iterations: z.ZodOptional<z.ZodNumber>;
        radius: z.ZodOptional<z.ZodNumber>;
        rings: z.ZodOptional<z.ZodNumber>;
        lumaPhi: z.ZodOptional<z.ZodNumber>;
        depthPhi: z.ZodOptional<z.ZodNumber>;
        normalPhi: z.ZodOptional<z.ZodNumber>;
        samples: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        bias?: number | undefined;
        thickness?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    }, {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        bias?: number | undefined;
        thickness?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        bias?: number | undefined;
        thickness?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        bias?: number | undefined;
        thickness?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        hue: z.ZodOptional<z.ZodNumber>;
        saturation: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        blendFunction?: number | undefined;
        hue?: number | undefined;
        saturation?: number | undefined;
    }, {
        blendFunction?: number | undefined;
        hue?: number | undefined;
        saturation?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        hue?: number | undefined;
        saturation?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        hue?: number | undefined;
        saturation?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        premultiply: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        blendFunction?: number | undefined;
        premultiply?: boolean | undefined;
    }, {
        blendFunction?: number | undefined;
        premultiply?: boolean | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        premultiply?: boolean | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        premultiply?: boolean | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        granularity: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        blendFunction?: number | undefined;
        granularity?: number | undefined;
    }, {
        blendFunction?: number | undefined;
        granularity?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        granularity?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        granularity?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        density: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        blendFunction?: number | undefined;
        density?: number | undefined;
    }, {
        blendFunction?: number | undefined;
        density?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        density?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        density?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        resolutionScale: z.ZodOptional<z.ZodNumber>;
        spp: z.ZodOptional<z.ZodNumber>;
        distance: z.ZodOptional<z.ZodNumber>;
        distanceIntensity: z.ZodOptional<z.ZodNumber>;
        intensity: z.ZodOptional<z.ZodNumber>;
        color: z.ZodOptional<z.ZodString>;
        iterations: z.ZodOptional<z.ZodNumber>;
        radius: z.ZodOptional<z.ZodNumber>;
        rings: z.ZodOptional<z.ZodNumber>;
        lumaPhi: z.ZodOptional<z.ZodNumber>;
        depthPhi: z.ZodOptional<z.ZodNumber>;
        normalPhi: z.ZodOptional<z.ZodNumber>;
        samples: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    }, {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        radius?: number | undefined;
        intensity?: number | undefined;
        color?: string | undefined;
        distance?: number | undefined;
        resolutionScale?: number | undefined;
        spp?: number | undefined;
        distanceIntensity?: number | undefined;
        iterations?: number | undefined;
        rings?: number | undefined;
        lumaPhi?: number | undefined;
        depthPhi?: number | undefined;
        normalPhi?: number | undefined;
        samples?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        feather: z.ZodOptional<z.ZodNumber>;
        focusArea: z.ZodOptional<z.ZodNumber>;
        kernelSize: z.ZodOptional<z.ZodNumber>;
        offset: z.ZodOptional<z.ZodNumber>;
        rotation: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        rotation?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        offset?: number | undefined;
        feather?: number | undefined;
        focusArea?: number | undefined;
    }, {
        rotation?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        offset?: number | undefined;
        feather?: number | undefined;
        focusArea?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        rotation?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        offset?: number | undefined;
        feather?: number | undefined;
        focusArea?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        rotation?: number | undefined;
        blendFunction?: number | undefined;
        kernelSize?: number | undefined;
        offset?: number | undefined;
        feather?: number | undefined;
        focusArea?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    properties: z.ZodOptional<z.ZodObject<{
        blendFunction: z.ZodOptional<z.ZodNumber>;
        darkness: z.ZodOptional<z.ZodNumber>;
        offset: z.ZodOptional<z.ZodNumber>;
        technique: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        blendFunction?: number | undefined;
        offset?: number | undefined;
        darkness?: number | undefined;
        technique?: number | undefined;
    }, {
        blendFunction?: number | undefined;
        offset?: number | undefined;
        darkness?: number | undefined;
        technique?: number | undefined;
    }>>;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        offset?: number | undefined;
        darkness?: number | undefined;
        technique?: number | undefined;
    } | undefined;
}, {
    type: string;
    properties?: {
        blendFunction?: number | undefined;
        offset?: number | undefined;
        darkness?: number | undefined;
        technique?: number | undefined;
    } | undefined;
}>]>, "many">;
export declare const arSettingsSchema: z.ZodOptional<z.ZodObject<{
    enable: z.ZodBoolean;
    autoScaling: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    enable: boolean;
    autoScaling: boolean;
}, {
    enable: boolean;
    autoScaling: boolean;
}>>;
export declare const cameraSettingsSchema: z.ZodObject<{
    cameraId: z.ZodString;
    cameras: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        name: z.ZodOptional<z.ZodString>;
        type: z.ZodString;
        autoAdjust: z.ZodBoolean;
        cameraMovementDuration: z.ZodNumber;
        controls: z.ZodObject<{
            autoRotationSpeed: z.ZodNumber;
            damping: z.ZodNumber;
            enableAutoRotation: z.ZodBoolean;
            enableKeyPan: z.ZodBoolean;
            enablePan: z.ZodBoolean;
            enableRotation: z.ZodBoolean;
            enableZoom: z.ZodBoolean;
            input: z.ZodObject<{
                keys: z.ZodObject<{
                    up: z.ZodNumber;
                    down: z.ZodNumber;
                    left: z.ZodNumber;
                    right: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                }, {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                }>;
                mouse: z.ZodObject<{
                    rotate: z.ZodNumber;
                    zoom: z.ZodNumber;
                    pan: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }>;
                touch: z.ZodObject<{
                    rotate: z.ZodNumber;
                    zoom: z.ZodNumber;
                    pan: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }>;
            }, "strip", z.ZodTypeAny, {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            }, {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            }>;
            keyPanSpeed: z.ZodNumber;
            movementSmoothness: z.ZodNumber;
            restrictions: z.ZodObject<{
                position: z.ZodObject<{
                    cube: z.ZodObject<{
                        min: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                        max: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }>;
                    sphere: z.ZodObject<{
                        center: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        radius: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }>;
                target: z.ZodObject<{
                    cube: z.ZodObject<{
                        min: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                        max: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }>;
                    sphere: z.ZodObject<{
                        center: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        radius: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }>;
                rotation: z.ZodObject<{
                    minPolarAngle: z.ZodNumber;
                    maxPolarAngle: z.ZodNumber;
                    minAzimuthAngle: z.ZodNullable<z.ZodNumber>;
                    maxAzimuthAngle: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                }, {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                }>;
                zoom: z.ZodObject<{
                    minDistance: z.ZodNumber;
                    maxDistance: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    minDistance: number;
                    maxDistance: number | null;
                }, {
                    minDistance: number;
                    maxDistance: number | null;
                }>;
            }, "strip", z.ZodTypeAny, {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            }, {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            }>;
            rotationSpeed: z.ZodNumber;
            panSpeed: z.ZodNumber;
            zoomSpeed: z.ZodNumber;
            enableAzimuthRotation: z.ZodBoolean;
            enableObjectControls: z.ZodBoolean;
            enablePolarRotation: z.ZodBoolean;
            enableTurntableControls: z.ZodBoolean;
            objectControlsCenter: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
            turntableCenter: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        }, {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        }>;
        enableCameraControls: z.ZodBoolean;
        position: z.ZodObject<{
            x: z.ZodNullable<z.ZodNumber>;
            y: z.ZodNullable<z.ZodNumber>;
            z: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            x: number | null;
            y: number | null;
            z: number | null;
        }, {
            x: number | null;
            y: number | null;
            z: number | null;
        }>;
        revertAtMouseUp: z.ZodBoolean;
        revertAtMouseUpDuration: z.ZodNumber;
        target: z.ZodObject<{
            x: z.ZodNullable<z.ZodNumber>;
            y: z.ZodNullable<z.ZodNumber>;
            z: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            x: number | null;
            y: number | null;
            z: number | null;
        }, {
            x: number | null;
            y: number | null;
            z: number | null;
        }>;
        zoomExtentsFactor: z.ZodNumber;
        sceneRotation: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
    }, {
        fov: z.ZodNumber;
    }>, "strip", z.ZodTypeAny, {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        fov: number;
        name?: string | undefined;
    }, {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        fov: number;
        name?: string | undefined;
    }>, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        type: z.ZodString;
        autoAdjust: z.ZodBoolean;
        cameraMovementDuration: z.ZodNumber;
        controls: z.ZodObject<{
            autoRotationSpeed: z.ZodNumber;
            damping: z.ZodNumber;
            enableAutoRotation: z.ZodBoolean;
            enableKeyPan: z.ZodBoolean;
            enablePan: z.ZodBoolean;
            enableRotation: z.ZodBoolean;
            enableZoom: z.ZodBoolean;
            input: z.ZodObject<{
                keys: z.ZodObject<{
                    up: z.ZodNumber;
                    down: z.ZodNumber;
                    left: z.ZodNumber;
                    right: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                }, {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                }>;
                mouse: z.ZodObject<{
                    rotate: z.ZodNumber;
                    zoom: z.ZodNumber;
                    pan: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }>;
                touch: z.ZodObject<{
                    rotate: z.ZodNumber;
                    zoom: z.ZodNumber;
                    pan: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }, {
                    rotate: number;
                    zoom: number;
                    pan: number;
                }>;
            }, "strip", z.ZodTypeAny, {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            }, {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            }>;
            keyPanSpeed: z.ZodNumber;
            movementSmoothness: z.ZodNumber;
            restrictions: z.ZodObject<{
                position: z.ZodObject<{
                    cube: z.ZodObject<{
                        min: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                        max: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }>;
                    sphere: z.ZodObject<{
                        center: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        radius: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }>;
                target: z.ZodObject<{
                    cube: z.ZodObject<{
                        min: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                        max: z.ZodObject<{
                            x: z.ZodNullable<z.ZodNumber>;
                            y: z.ZodNullable<z.ZodNumber>;
                            z: z.ZodNullable<z.ZodNumber>;
                        }, "strip", z.ZodTypeAny, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }, {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }, {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    }>;
                    sphere: z.ZodObject<{
                        center: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        radius: z.ZodNullable<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }, {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }, {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                }>;
                rotation: z.ZodObject<{
                    minPolarAngle: z.ZodNumber;
                    maxPolarAngle: z.ZodNumber;
                    minAzimuthAngle: z.ZodNullable<z.ZodNumber>;
                    maxAzimuthAngle: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                }, {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                }>;
                zoom: z.ZodObject<{
                    minDistance: z.ZodNumber;
                    maxDistance: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    minDistance: number;
                    maxDistance: number | null;
                }, {
                    minDistance: number;
                    maxDistance: number | null;
                }>;
            }, "strip", z.ZodTypeAny, {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            }, {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            }>;
            rotationSpeed: z.ZodNumber;
            panSpeed: z.ZodNumber;
            zoomSpeed: z.ZodNumber;
            enableAzimuthRotation: z.ZodBoolean;
            enableObjectControls: z.ZodBoolean;
            enablePolarRotation: z.ZodBoolean;
            enableTurntableControls: z.ZodBoolean;
            objectControlsCenter: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
            turntableCenter: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        }, {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        }>;
        enableCameraControls: z.ZodBoolean;
        position: z.ZodObject<{
            x: z.ZodNullable<z.ZodNumber>;
            y: z.ZodNullable<z.ZodNumber>;
            z: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            x: number | null;
            y: number | null;
            z: number | null;
        }, {
            x: number | null;
            y: number | null;
            z: number | null;
        }>;
        revertAtMouseUp: z.ZodBoolean;
        revertAtMouseUpDuration: z.ZodNumber;
        target: z.ZodObject<{
            x: z.ZodNullable<z.ZodNumber>;
            y: z.ZodNullable<z.ZodNumber>;
            z: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            x: number | null;
            y: number | null;
            z: number | null;
        }, {
            x: number | null;
            y: number | null;
            z: number | null;
        }>;
        zoomExtentsFactor: z.ZodNumber;
        sceneRotation: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        name?: string | undefined;
    }, {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        name?: string | undefined;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    cameraId: string;
    cameras: Record<string, {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        name?: string | undefined;
    } | {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        fov: number;
        name?: string | undefined;
    }>;
}, {
    cameraId: string;
    cameras: Record<string, {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        name?: string | undefined;
    } | {
        type: string;
        position: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        target: {
            x: number | null;
            y: number | null;
            z: number | null;
        };
        autoAdjust: boolean;
        cameraMovementDuration: number;
        controls: {
            autoRotationSpeed: number;
            damping: number;
            enableAutoRotation: boolean;
            enableKeyPan: boolean;
            enablePan: boolean;
            enableRotation: boolean;
            enableZoom: boolean;
            input: {
                keys: {
                    right: number;
                    left: number;
                    up: number;
                    down: number;
                };
                mouse: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
                touch: {
                    rotate: number;
                    zoom: number;
                    pan: number;
                };
            };
            keyPanSpeed: number;
            movementSmoothness: number;
            restrictions: {
                rotation: {
                    minPolarAngle: number;
                    maxPolarAngle: number;
                    minAzimuthAngle: number | null;
                    maxAzimuthAngle: number | null;
                };
                zoom: {
                    minDistance: number;
                    maxDistance: number | null;
                };
                position: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
                target: {
                    cube: {
                        min: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                        max: {
                            x: number | null;
                            y: number | null;
                            z: number | null;
                        };
                    };
                    sphere: {
                        center: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        radius: number | null;
                    };
                };
            };
            rotationSpeed: number;
            panSpeed: number;
            zoomSpeed: number;
            enableAzimuthRotation: boolean;
            enableObjectControls: boolean;
            enablePolarRotation: boolean;
            enableTurntableControls: boolean;
            objectControlsCenter: {
                x: number;
                y: number;
                z: number;
            };
            turntableCenter: {
                x: number;
                y: number;
                z: number;
            };
        };
        enableCameraControls: boolean;
        revertAtMouseUp: boolean;
        revertAtMouseUpDuration: number;
        zoomExtentsFactor: number;
        sceneRotation: {
            x: number;
            y: number;
        };
        fov: number;
        name?: string | undefined;
    }>;
}>;
export declare const environmentSettingsSchema: z.ZodObject<{
    clearAlpha: z.ZodNumber;
    clearColor: z.ZodString;
    map: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    mapAsBackground: z.ZodBoolean;
    mapResolution: z.ZodString;
    rotation: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        z: z.ZodNumber;
        w: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
        w: number;
    }, {
        x: number;
        y: number;
        z: number;
        w: number;
    }>;
    blurriness: z.ZodNumber;
    intensity: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    map: string | string[];
    rotation: {
        x: number;
        y: number;
        z: number;
        w: number;
    };
    clearAlpha: number;
    clearColor: string;
    mapAsBackground: boolean;
    mapResolution: string;
    blurriness: number;
    intensity: number;
}, {
    map: string | string[];
    rotation: {
        x: number;
        y: number;
        z: number;
        w: number;
    };
    clearAlpha: number;
    clearColor: string;
    mapAsBackground: boolean;
    mapResolution: string;
    blurriness: number;
    intensity: number;
}>;
export declare const environmentGeometrySettingsSchema: z.ZodObject<{
    gridColor: z.ZodString;
    gridVisibility: z.ZodBoolean;
    groundPlaneColor: z.ZodString;
    groundPlaneVisibility: z.ZodBoolean;
    groundPlaneShadowColor: z.ZodString;
    groundPlaneShadowVisibility: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    gridColor: string;
    gridVisibility: boolean;
    groundPlaneColor: string;
    groundPlaneVisibility: boolean;
    groundPlaneShadowColor: string;
    groundPlaneShadowVisibility: boolean;
}, {
    gridColor: string;
    gridVisibility: boolean;
    groundPlaneColor: string;
    groundPlaneVisibility: boolean;
    groundPlaneShadowColor: string;
    groundPlaneShadowVisibility: boolean;
}>;
export declare const generalSettingsSchema: z.ZodObject<{
    transformation: z.ZodObject<{
        scale: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
        translation: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
        rotation: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            z: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: number;
            y: number;
            z: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    }, {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    }>;
    blurWhenBusy: z.ZodBoolean;
    commitSettings: z.ZodBoolean;
    commitParameters: z.ZodBoolean;
    pointSize: z.ZodNumber;
    showMessages: z.ZodBoolean;
    defaultMaterialColor: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transformation: {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    };
    blurWhenBusy: boolean;
    commitSettings: boolean;
    commitParameters: boolean;
    pointSize: number;
    showMessages: boolean;
    defaultMaterialColor: string;
}, {
    transformation: {
        scale: {
            x: number;
            y: number;
            z: number;
        };
        translation: {
            x: number;
            y: number;
            z: number;
        };
        rotation: {
            x: number;
            y: number;
            z: number;
        };
    };
    blurWhenBusy: boolean;
    commitSettings: boolean;
    commitParameters: boolean;
    pointSize: number;
    showMessages: boolean;
    defaultMaterialColor: string;
}>;
export declare const lightSettingsSchema: z.ZodObject<{
    lightSceneId: z.ZodOptional<z.ZodString>;
    lightScenes: z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        lights: z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            type: z.ZodString;
            order: z.ZodOptional<z.ZodNumber>;
            properties: z.ZodUnion<[z.ZodObject<{
                color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
                intensity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                intensity: number;
                color: string | number;
            }, {
                intensity: number;
                color: string | number;
            }>, z.ZodObject<{
                color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
                intensity: z.ZodNumber;
                direction: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                castShadow: z.ZodBoolean;
                shadowMapResolution: z.ZodOptional<z.ZodNumber>;
                shadowMapBias: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            }, {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            }>, z.ZodObject<{
                skyColor: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
                intensity: z.ZodNumber;
                groundColor: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            }, "strip", z.ZodTypeAny, {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            }, {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            }>, z.ZodObject<{
                color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
                intensity: z.ZodNumber;
                position: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                distance: z.ZodNumber;
                decay: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            }, {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            }>, z.ZodObject<{
                color: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
                intensity: z.ZodNumber;
                position: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                target: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                distance: z.ZodNumber;
                decay: z.ZodNumber;
                angle: z.ZodNumber;
                penumbra: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            }, {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            properties: {
                intensity: number;
                color: string | number;
            } | {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            } | {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            };
            name?: string | undefined;
            order?: number | undefined;
        }, {
            type: string;
            properties: {
                intensity: number;
                color: string | number;
            } | {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            } | {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            };
            name?: string | undefined;
            order?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        lights: Record<string, {
            type: string;
            properties: {
                intensity: number;
                color: string | number;
            } | {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            } | {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            };
            name?: string | undefined;
            order?: number | undefined;
        }>;
        name?: string | undefined;
    }, {
        lights: Record<string, {
            type: string;
            properties: {
                intensity: number;
                color: string | number;
            } | {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            } | {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            };
            name?: string | undefined;
            order?: number | undefined;
        }>;
        name?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    lightScenes: Record<string, {
        lights: Record<string, {
            type: string;
            properties: {
                intensity: number;
                color: string | number;
            } | {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            } | {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            };
            name?: string | undefined;
            order?: number | undefined;
        }>;
        name?: string | undefined;
    }>;
    lightSceneId?: string | undefined;
}, {
    lightScenes: Record<string, {
        lights: Record<string, {
            type: string;
            properties: {
                intensity: number;
                color: string | number;
            } | {
                intensity: number;
                color: string | number;
                direction: {
                    x: number;
                    y: number;
                    z: number;
                };
                castShadow: boolean;
                shadowMapResolution?: number | undefined;
                shadowMapBias?: number | undefined;
            } | {
                intensity: number;
                skyColor: string | number;
                groundColor: string | number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
            } | {
                position: {
                    x: number;
                    y: number;
                    z: number;
                };
                target: {
                    x: number;
                    y: number;
                    z: number;
                };
                intensity: number;
                color: string | number;
                distance: number;
                decay: number;
                angle: number;
                penumbra: number;
            };
            name?: string | undefined;
            order?: number | undefined;
        }>;
        name?: string | undefined;
    }>;
    lightSceneId?: string | undefined;
}>;
export declare const postProcessingSettingsSchema: z.ZodObject<{
    antiAliasingTechnique: z.ZodString;
    antiAliasingTechniqueMobile: z.ZodString;
    enablePostProcessingOnMobile: z.ZodBoolean;
    ssaaSampleLevel: z.ZodNumber;
    effects: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            intensity: z.ZodOptional<z.ZodNumber>;
            kernelSize: z.ZodOptional<z.ZodNumber>;
            luminanceSmoothing: z.ZodOptional<z.ZodNumber>;
            luminanceThreshold: z.ZodOptional<z.ZodNumber>;
            mipmapBlur: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            mipmapBlur: boolean;
            intensity?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            luminanceSmoothing?: number | undefined;
            luminanceThreshold?: number | undefined;
        }, {
            mipmapBlur: boolean;
            intensity?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            luminanceSmoothing?: number | undefined;
            luminanceThreshold?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            mipmapBlur: boolean;
            intensity?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            luminanceSmoothing?: number | undefined;
            luminanceThreshold?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            mipmapBlur: boolean;
            intensity?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            luminanceSmoothing?: number | undefined;
            luminanceThreshold?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            modulationOffset: z.ZodOptional<z.ZodNumber>;
            offset: z.ZodOptional<z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>>;
            radialModulation: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            blendFunction?: number | undefined;
            modulationOffset?: number | undefined;
            offset?: {
                x: number;
                y: number;
            } | undefined;
            radialModulation?: boolean | undefined;
        }, {
            blendFunction?: number | undefined;
            modulationOffset?: number | undefined;
            offset?: {
                x: number;
                y: number;
            } | undefined;
            radialModulation?: boolean | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            modulationOffset?: number | undefined;
            offset?: {
                x: number;
                y: number;
            } | undefined;
            radialModulation?: boolean | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            modulationOffset?: number | undefined;
            offset?: {
                x: number;
                y: number;
            } | undefined;
            radialModulation?: boolean | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            bokehScale: z.ZodOptional<z.ZodNumber>;
            focusDistance: z.ZodOptional<z.ZodNumber>;
            focusRange: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            blendFunction?: number | undefined;
            bokehScale?: number | undefined;
            focusDistance?: number | undefined;
            focusRange?: number | undefined;
        }, {
            blendFunction?: number | undefined;
            bokehScale?: number | undefined;
            focusDistance?: number | undefined;
            focusRange?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            bokehScale?: number | undefined;
            focusDistance?: number | undefined;
            focusRange?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            bokehScale?: number | undefined;
            focusDistance?: number | undefined;
            focusRange?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            angle: z.ZodOptional<z.ZodNumber>;
            blendFunction: z.ZodOptional<z.ZodNumber>;
            scale: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            scale?: number | undefined;
            angle?: number | undefined;
            blendFunction?: number | undefined;
        }, {
            scale?: number | undefined;
            angle?: number | undefined;
            blendFunction?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            scale?: number | undefined;
            angle?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            scale?: number | undefined;
            angle?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            scale: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            scale?: number | undefined;
            blendFunction?: number | undefined;
        }, {
            scale?: number | undefined;
            blendFunction?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            scale?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            scale?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            resolutionScale: z.ZodOptional<z.ZodNumber>;
            spp: z.ZodOptional<z.ZodNumber>;
            distance: z.ZodOptional<z.ZodNumber>;
            distanceIntensity: z.ZodOptional<z.ZodNumber>;
            intensity: z.ZodOptional<z.ZodNumber>;
            color: z.ZodOptional<z.ZodString>;
            bias: z.ZodOptional<z.ZodNumber>;
            thickness: z.ZodOptional<z.ZodNumber>;
            iterations: z.ZodOptional<z.ZodNumber>;
            radius: z.ZodOptional<z.ZodNumber>;
            rings: z.ZodOptional<z.ZodNumber>;
            lumaPhi: z.ZodOptional<z.ZodNumber>;
            depthPhi: z.ZodOptional<z.ZodNumber>;
            normalPhi: z.ZodOptional<z.ZodNumber>;
            samples: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            bias?: number | undefined;
            thickness?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        }, {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            bias?: number | undefined;
            thickness?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            bias?: number | undefined;
            thickness?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            bias?: number | undefined;
            thickness?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            hue: z.ZodOptional<z.ZodNumber>;
            saturation: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            blendFunction?: number | undefined;
            hue?: number | undefined;
            saturation?: number | undefined;
        }, {
            blendFunction?: number | undefined;
            hue?: number | undefined;
            saturation?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            hue?: number | undefined;
            saturation?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            hue?: number | undefined;
            saturation?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            premultiply: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            blendFunction?: number | undefined;
            premultiply?: boolean | undefined;
        }, {
            blendFunction?: number | undefined;
            premultiply?: boolean | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            premultiply?: boolean | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            premultiply?: boolean | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            granularity: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            blendFunction?: number | undefined;
            granularity?: number | undefined;
        }, {
            blendFunction?: number | undefined;
            granularity?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            granularity?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            granularity?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            density: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            blendFunction?: number | undefined;
            density?: number | undefined;
        }, {
            blendFunction?: number | undefined;
            density?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            density?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            density?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            resolutionScale: z.ZodOptional<z.ZodNumber>;
            spp: z.ZodOptional<z.ZodNumber>;
            distance: z.ZodOptional<z.ZodNumber>;
            distanceIntensity: z.ZodOptional<z.ZodNumber>;
            intensity: z.ZodOptional<z.ZodNumber>;
            color: z.ZodOptional<z.ZodString>;
            iterations: z.ZodOptional<z.ZodNumber>;
            radius: z.ZodOptional<z.ZodNumber>;
            rings: z.ZodOptional<z.ZodNumber>;
            lumaPhi: z.ZodOptional<z.ZodNumber>;
            depthPhi: z.ZodOptional<z.ZodNumber>;
            normalPhi: z.ZodOptional<z.ZodNumber>;
            samples: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        }, {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            feather: z.ZodOptional<z.ZodNumber>;
            focusArea: z.ZodOptional<z.ZodNumber>;
            kernelSize: z.ZodOptional<z.ZodNumber>;
            offset: z.ZodOptional<z.ZodNumber>;
            rotation: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            rotation?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            offset?: number | undefined;
            feather?: number | undefined;
            focusArea?: number | undefined;
        }, {
            rotation?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            offset?: number | undefined;
            feather?: number | undefined;
            focusArea?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            rotation?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            offset?: number | undefined;
            feather?: number | undefined;
            focusArea?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            rotation?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            offset?: number | undefined;
            feather?: number | undefined;
            focusArea?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        properties: z.ZodOptional<z.ZodObject<{
            blendFunction: z.ZodOptional<z.ZodNumber>;
            darkness: z.ZodOptional<z.ZodNumber>;
            offset: z.ZodOptional<z.ZodNumber>;
            technique: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            blendFunction?: number | undefined;
            offset?: number | undefined;
            darkness?: number | undefined;
            technique?: number | undefined;
        }, {
            blendFunction?: number | undefined;
            offset?: number | undefined;
            darkness?: number | undefined;
            technique?: number | undefined;
        }>>;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            offset?: number | undefined;
            darkness?: number | undefined;
            technique?: number | undefined;
        } | undefined;
    }, {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            offset?: number | undefined;
            darkness?: number | undefined;
            technique?: number | undefined;
        } | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    antiAliasingTechnique: string;
    antiAliasingTechniqueMobile: string;
    enablePostProcessingOnMobile: boolean;
    ssaaSampleLevel: number;
    effects: ({
        type: string;
        properties?: {
            mipmapBlur: boolean;
            intensity?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            luminanceSmoothing?: number | undefined;
            luminanceThreshold?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            modulationOffset?: number | undefined;
            offset?: {
                x: number;
                y: number;
            } | undefined;
            radialModulation?: boolean | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            bokehScale?: number | undefined;
            focusDistance?: number | undefined;
            focusRange?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            scale?: number | undefined;
            angle?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            scale?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            bias?: number | undefined;
            thickness?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            hue?: number | undefined;
            saturation?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            premultiply?: boolean | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            granularity?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            density?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            rotation?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            offset?: number | undefined;
            feather?: number | undefined;
            focusArea?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            offset?: number | undefined;
            darkness?: number | undefined;
            technique?: number | undefined;
        } | undefined;
    })[];
}, {
    antiAliasingTechnique: string;
    antiAliasingTechniqueMobile: string;
    enablePostProcessingOnMobile: boolean;
    ssaaSampleLevel: number;
    effects: ({
        type: string;
        properties?: {
            mipmapBlur: boolean;
            intensity?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            luminanceSmoothing?: number | undefined;
            luminanceThreshold?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            modulationOffset?: number | undefined;
            offset?: {
                x: number;
                y: number;
            } | undefined;
            radialModulation?: boolean | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            bokehScale?: number | undefined;
            focusDistance?: number | undefined;
            focusRange?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            scale?: number | undefined;
            angle?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            scale?: number | undefined;
            blendFunction?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            bias?: number | undefined;
            thickness?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            hue?: number | undefined;
            saturation?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            premultiply?: boolean | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            granularity?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            density?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            radius?: number | undefined;
            intensity?: number | undefined;
            color?: string | undefined;
            distance?: number | undefined;
            resolutionScale?: number | undefined;
            spp?: number | undefined;
            distanceIntensity?: number | undefined;
            iterations?: number | undefined;
            rings?: number | undefined;
            lumaPhi?: number | undefined;
            depthPhi?: number | undefined;
            normalPhi?: number | undefined;
            samples?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            rotation?: number | undefined;
            blendFunction?: number | undefined;
            kernelSize?: number | undefined;
            offset?: number | undefined;
            feather?: number | undefined;
            focusArea?: number | undefined;
        } | undefined;
    } | {
        type: string;
        properties?: {
            blendFunction?: number | undefined;
            offset?: number | undefined;
            darkness?: number | undefined;
            technique?: number | undefined;
        } | undefined;
    })[];
}>;
export declare const renderingSettingsSchema: z.ZodObject<{
    automaticColorAdjustment: z.ZodBoolean;
    beautyRenderDelay: z.ZodNumber;
    beautyRenderBlendingDuration: z.ZodNumber;
    lights: z.ZodBoolean;
    outputEncoding: z.ZodString;
    physicallyCorrectLights: z.ZodBoolean;
    shadows: z.ZodBoolean;
    softShadows: z.ZodBoolean;
    textureEncoding: z.ZodString;
    toneMapping: z.ZodString;
    toneMappingExposure: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    lights: boolean;
    automaticColorAdjustment: boolean;
    beautyRenderDelay: number;
    beautyRenderBlendingDuration: number;
    outputEncoding: string;
    physicallyCorrectLights: boolean;
    shadows: boolean;
    softShadows: boolean;
    textureEncoding: string;
    toneMapping: string;
    toneMappingExposure: number;
}, {
    lights: boolean;
    automaticColorAdjustment: boolean;
    beautyRenderDelay: number;
    beautyRenderBlendingDuration: number;
    outputEncoding: string;
    physicallyCorrectLights: boolean;
    shadows: boolean;
    softShadows: boolean;
    textureEncoding: string;
    toneMapping: string;
    toneMappingExposure: number;
}>;
export declare const sessionSettingsSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    order: z.ZodOptional<z.ZodNumber>;
    displayname: z.ZodOptional<z.ZodString>;
    hidden: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    order?: number | undefined;
    displayname?: string | undefined;
    hidden?: boolean | undefined;
}, {
    order?: number | undefined;
    displayname?: string | undefined;
    hidden?: boolean | undefined;
}>>;
export declare const validate: (s: any) => void;
//# sourceMappingURL=Validator.d.ts.map