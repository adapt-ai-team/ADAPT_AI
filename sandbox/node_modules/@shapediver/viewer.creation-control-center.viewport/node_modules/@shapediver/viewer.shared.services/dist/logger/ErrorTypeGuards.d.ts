import { ShapeDiverGeometryBackendError, ShapeDiverGeometryBackendRequestError, ShapeDiverGeometryBackendResponseError } from "./ShapeDiverBackendErrors";
import { ShapeDiverViewerError } from "./ShapeDiverError";
import { ShapeDiverViewerArError, ShapeDiverViewerCameraError, ShapeDiverViewerCustomizationError, ShapeDiverViewerDataProcessingError, ShapeDiverViewerDrawingToolsError, ShapeDiverViewerEnvironmentMapError, ShapeDiverViewerInteractionError, ShapeDiverViewerLightError, ShapeDiverViewerSessionError, ShapeDiverViewerSettingsError, ShapeDiverViewerUnknownError, ShapeDiverViewerValidationError, ShapeDiverViewerViewportError, ShapeDiverViewerWebGLError } from "./ShapeDiverViewerErrors";
/** Type guard for all error types of the viewer package. */
export declare function isViewerError(e: any): e is ShapeDiverViewerError;
/** Type guard for an unknown viewer error. */
export declare function isViewerUnknownError(e: any): e is ShapeDiverViewerUnknownError;
/** Type guard for a data processing viewer error. */
export declare function isViewerDataProcessingError(e: any): e is ShapeDiverViewerDataProcessingError;
/** Type guard for a environment map viewer error. */
export declare function isViewerEnvironmentMapError(e: any): e is ShapeDiverViewerEnvironmentMapError;
/** Type guard for a webGL viewer error. */
export declare function isViewerWebGLError(e: any): e is ShapeDiverViewerWebGLError;
/** Type guard for a settings viewer error. */
export declare function isViewerSettingsError(e: any): e is ShapeDiverViewerSettingsError;
/** Type guard for a session viewer error. */
export declare function isViewerSessionError(e: any): e is ShapeDiverViewerSessionError;
/** Type guard for a customization viewer error. */
export declare function isViewerCustomizationError(e: any): e is ShapeDiverViewerCustomizationError;
/** Type guard for a viewport viewer error. */
export declare function isViewerViewportError(e: any): e is ShapeDiverViewerViewportError;
/** Type guard for a light viewer error. */
export declare function isViewerLightError(e: any): e is ShapeDiverViewerLightError;
/** Type guard for a camera viewer error. */
export declare function isViewerCameraError(e: any): e is ShapeDiverViewerCameraError;
/** Type guard for an AR viewer error. */
export declare function isARError(e: any): e is ShapeDiverViewerArError;
/** Type guard for a validation viewer error. */
export declare function isViewerValidationError(e: any): e is ShapeDiverViewerValidationError;
/** Type guard for a interaction viewer error. */
export declare function isViewerInteractionError(e: any): e is ShapeDiverViewerInteractionError;
/** Type guard for a drawing tools viewer error. */
export declare function isViewerDrawingToolsError(e: any): e is ShapeDiverViewerDrawingToolsError;
/** Type guard for all error types of the Geometry Backend SDK package that are mapped to viewer errors. */
export declare function isViewerGeometryBackendError(e: any): e is ShapeDiverGeometryBackendError & ShapeDiverGeometryBackendRequestError & ShapeDiverGeometryBackendResponseError;
/** Type guard for a Geometry Backend SDK generic error that is mapped to a viewer error. */
export declare function isViewerGeometryBackendGenericError(e: any): e is ShapeDiverGeometryBackendError;
/** Type guard for a Geometry Backend SDK request error that is mapped to a viewer error. */
export declare function isViewerGeometryBackendRequestError(e: any): e is ShapeDiverGeometryBackendRequestError;
/** Type guard for a Geometry Backend SDK response error that is mapped to a viewer error. */
export declare function isViewerGeometryBackendResponseError(e: any): e is ShapeDiverGeometryBackendResponseError;
//# sourceMappingURL=ErrorTypeGuards.d.ts.map