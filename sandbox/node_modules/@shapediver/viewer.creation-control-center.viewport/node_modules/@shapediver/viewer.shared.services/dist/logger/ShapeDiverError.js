"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverViewerError = exports.ShapeDiverError = exports.ShapeDiverViewerErrorType = void 0;
var ShapeDiverViewerErrorType;
(function (ShapeDiverViewerErrorType) {
    ShapeDiverViewerErrorType["AR_ERROR"] = "SdARError";
    ShapeDiverViewerErrorType["GEOMETRY_BACKEND_ERROR"] = "SdGeometryBackendError";
    ShapeDiverViewerErrorType["GEOMETRY_BACKEND_REQUEST_ERROR"] = "SdGeometryBackendRequestError";
    ShapeDiverViewerErrorType["GEOMETRY_BACKEND_RESPONSE_ERROR"] = "SdGeometryBackendResponseError";
    ShapeDiverViewerErrorType["CAMERA_ERROR"] = "SdCameraError";
    ShapeDiverViewerErrorType["CONNECTION_ERROR"] = "SdConnectionError";
    ShapeDiverViewerErrorType["CUSTOMIZATION_ERROR"] = "SdCustomizationError";
    ShapeDiverViewerErrorType["DATA_PROCESSING_ERROR"] = "SdDataProcessingError";
    ShapeDiverViewerErrorType["DRAWING_TOOLS_ERROR"] = "SdDrawingToolsError";
    ShapeDiverViewerErrorType["ENVIRONMENT_MAP_ERROR"] = "SdEnvironmentMapError";
    ShapeDiverViewerErrorType["INTERACTION_ERROR"] = "SdInteractionError";
    ShapeDiverViewerErrorType["LIGHT_ERROR"] = "SdLightError";
    ShapeDiverViewerErrorType["SESSION_ERROR"] = "SdSessionError";
    ShapeDiverViewerErrorType["SETTINGS_ERROR"] = "SdSettingsError";
    ShapeDiverViewerErrorType["VALIDATION_ERROR"] = "SdValidationError";
    ShapeDiverViewerErrorType["VIEWPORT_ERROR"] = "SdViewerError";
    ShapeDiverViewerErrorType["WEBGL_ERROR"] = "SdWebGLError";
    ShapeDiverViewerErrorType["UNKNOWN"] = "";
})(ShapeDiverViewerErrorType = exports.ShapeDiverViewerErrorType || (exports.ShapeDiverViewerErrorType = {}));
class ShapeDiverError extends Error {
    // #region Constructors (1)
    constructor(message) {
        super(message);
    }
}
exports.ShapeDiverError = ShapeDiverError;
class ShapeDiverViewerError extends ShapeDiverError {
    constructor(errorType, desc, message) {
        super(message);
        this.desc = desc;
        // #region Constructors (1)
        this.errorType = ShapeDiverViewerErrorType.UNKNOWN;
        this.errorType = Object.values(ShapeDiverViewerErrorType).includes(errorType)
            ? errorType
            : ShapeDiverViewerErrorType.UNKNOWN;
    }
}
exports.ShapeDiverViewerError = ShapeDiverViewerError;
//# sourceMappingURL=ShapeDiverError.js.map