"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LOGGING_LEVEL = void 0;
var LOGGING_LEVEL;
(function (LOGGING_LEVEL) {
    LOGGING_LEVEL["NONE"] = "none";
    LOGGING_LEVEL["ERROR"] = "error";
    LOGGING_LEVEL["FATAL"] = "fatal";
    LOGGING_LEVEL["WARN"] = "warn";
    LOGGING_LEVEL["INFO"] = "info";
    LOGGING_LEVEL["DEBUG"] = "debug";
    LOGGING_LEVEL["DEBUG_HIGH"] = "debug_high";
    LOGGING_LEVEL["DEBUG_MEDIUM"] = "debug_medium";
    LOGGING_LEVEL["DEBUG_LOW"] = "debug_low";
})(LOGGING_LEVEL = exports.LOGGING_LEVEL || (exports.LOGGING_LEVEL = {}));
class Logger {
    constructor() {
        // #region Properties (8)
        this._loggingLevel = LOGGING_LEVEL.WARN;
        this._showMessages = true;
        // #endregion Private Methods (2)
    }
    // #endregion Properties (8)
    // #region Public Static Accessors (1)
    static get instance() {
        return this._instance || (this._instance = new this());
    }
    // #endregion Public Static Accessors (1)
    // #region Public Accessors (4)
    get loggingLevel() {
        return this._loggingLevel;
    }
    set loggingLevel(value) {
        this._loggingLevel = value;
    }
    get showMessages() {
        return this._showMessages;
    }
    set showMessages(value) {
        this._showMessages = value;
    }
    // #endregion Public Accessors (4)
    // #region Public Methods (11)
    /**
     * Logging a debug message.
     * @param msg the message
     */
    debug(msg) {
        if (this.canLog(LOGGING_LEVEL.DEBUG) && this.showMessages === true)
            console.debug("(DEBUG) " + this.messageConstruction(msg));
    }
    /**
     * Logging a debug message with high priority.
     * @param msg the message
     */
    debugHigh(msg) {
        if (this.canLog(LOGGING_LEVEL.DEBUG_HIGH) && this.showMessages === true)
            console.debug("(DEBUG_HIGH) " + this.messageConstruction(msg));
    }
    /**
     * Logging a debug message with low priority.
     * @param msg the message
     */
    debugLow(msg) {
        if (this.canLog(LOGGING_LEVEL.DEBUG_LOW) && this.showMessages === true)
            console.debug("(DEBUG_LOW) " + this.messageConstruction(msg));
    }
    /**
     * Logging a debug message with medium priority.
     * @param msg the message
     */
    debugMedium(msg) {
        if (this.canLog(LOGGING_LEVEL.DEBUG_MEDIUM) &&
            this.showMessages === true)
            console.debug("(DEBUG_MEDIUM) " + this.messageConstruction(msg));
    }
    /**
     * Logging an error.
     * @param msg the message
     */
    error(msg) {
        if (this.canLog(LOGGING_LEVEL.ERROR) && this.showMessages === true)
            console.error("(ERROR) " + this.messageConstruction(msg));
    }
    /**
     * Logging a fatal error.
     * @param msg the message
     */
    fatal(msg) {
        if (this.canLog(LOGGING_LEVEL.FATAL) && this.showMessages === true)
            console.error("(FATAL) " + this.messageConstruction(msg));
    }
    /**
     * Logging an info.
     * @param msg the message
     */
    info(msg) {
        if (this.canLog(LOGGING_LEVEL.INFO) && this.showMessages === true)
            console.info("(INFO) " + this.messageConstruction(msg));
    }
    /**
     * Logging a warning.
     * @param msg the message
     */
    warn(msg) {
        if (this.canLog(LOGGING_LEVEL.WARN) && this.showMessages === true)
            console.warn("(WARN) " + this.messageConstruction(msg));
    }
    // #endregion Public Methods (11)
    // #region Private Methods (2)
    canLog(loggingLevel) {
        switch (this.loggingLevel) {
            case LOGGING_LEVEL.ERROR:
                if (loggingLevel === LOGGING_LEVEL.FATAL)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)
                    return false;
            case LOGGING_LEVEL.FATAL:
                if (loggingLevel === LOGGING_LEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)
                    return false;
            case LOGGING_LEVEL.WARN:
                if (loggingLevel === LOGGING_LEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)
                    return false;
            case LOGGING_LEVEL.INFO:
                if (loggingLevel === LOGGING_LEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)
                    return false;
            case LOGGING_LEVEL.DEBUG_HIGH:
                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)
                    return false;
            case LOGGING_LEVEL.DEBUG_MEDIUM:
                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)
                    return false;
            case LOGGING_LEVEL.DEBUG_LOW:
            case LOGGING_LEVEL.DEBUG:
            default:
                return true;
        }
    }
    messageConstruction(msg) {
        return new Date().toISOString() + ": " + msg;
    }
}
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map