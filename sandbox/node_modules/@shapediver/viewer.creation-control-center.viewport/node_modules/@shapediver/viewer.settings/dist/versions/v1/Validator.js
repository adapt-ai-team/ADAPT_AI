"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const zod_1 = require("zod");
const lightSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    name: zod_1.z.string().optional(),
    type: zod_1.z.string().optional(),
    properties: zod_1.z.object({
        color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),
        direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),
        position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),
        target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),
        castShadow: zod_1.z.boolean().optional(),
        skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),
        groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),
        intensity: zod_1.z.number().optional(),
        distance: zod_1.z.number().optional(),
        angle: zod_1.z.number().optional(),
        penumbra: zod_1.z.number().optional(),
        decay: zod_1.z.number().optional(),
        shadowMapResolution: zod_1.z.number().optional(),
        shadowMapBias: zod_1.z.number().optional()
    })
}).optional();
const lightsSchema = zod_1.z.record(lightSchema);
const lightScenesSchema = zod_1.z.record(zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional(),
    lights: lightsSchema
}));
const schema = zod_1.z.object({
    build_date: zod_1.z.string().optional(),
    build_version: zod_1.z.string().optional(),
    settings_version: zod_1.z.string().optional(),
    ambientOcclusion: zod_1.z.boolean().optional(),
    autoRotateSpeed: zod_1.z.number().optional(),
    backgroundColor: zod_1.z.string().optional(),
    bumpAmplitude: zod_1.z.number().optional(),
    camera: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional(), target: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional() }).optional(),
    cameraAutoAdjust: zod_1.z.boolean().optional(),
    cameraMovementDuration: zod_1.z.number().optional(),
    cameraOrtho: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional(), target: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional() }).optional(),
    cameraRevertAtMouseUp: zod_1.z.boolean().optional(),
    clearAlpha: zod_1.z.number().optional(),
    clearColor: zod_1.z.string().optional(),
    commitParameters: zod_1.z.boolean().optional(),
    controlDamping: zod_1.z.number().optional(),
    controlNames: zod_1.z.record(zod_1.z.string()).optional(),
    controlOrder: zod_1.z.string().array().optional(),
    defaultMaterialColor: zod_1.z.union([zod_1.z.string(), zod_1.z.number().array().optional()]),
    disablePan: zod_1.z.boolean().optional(),
    disableZoom: zod_1.z.boolean().optional(),
    enableAutoRotation: zod_1.z.boolean().optional(),
    enableRotation: zod_1.z.boolean().optional(),
    environmentMap: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array().optional()]),
    environmentMapResolution: zod_1.z.string().optional(),
    fov: zod_1.z.number().positive().optional(),
    lightScene: zod_1.z.string().optional(),
    lightScenes: lightScenesSchema.nullable().optional(),
    panSpeed: zod_1.z.number().optional(),
    parametersHidden: zod_1.z.string().array().optional(),
    pointSize: zod_1.z.number().optional(),
    revertAtMouseUpDuration: zod_1.z.number().optional(),
    rotateSpeed: zod_1.z.number().optional(),
    showEnvironmentMap: zod_1.z.boolean().optional(),
    showGrid: zod_1.z.boolean().optional(),
    showGroundPlane: zod_1.z.boolean().optional(),
    showShadows: zod_1.z.boolean().optional(),
    topView: zod_1.z.boolean().optional(),
    zoomExtentFactor: zod_1.z.number().optional(),
    zoomSpeed: zod_1.z.number().optional(),
}).passthrough();
const validate = (s) => {
    const result = schema.parse(s);
    s = result;
};
exports.validate = validate;
//# sourceMappingURL=Validator.js.map