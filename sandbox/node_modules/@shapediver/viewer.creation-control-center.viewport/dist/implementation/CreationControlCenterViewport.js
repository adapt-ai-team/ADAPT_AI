"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CreationControlCenterViewport_eventEngine, _CreationControlCenterViewport_logger, _CreationControlCenterViewport_sceneTree, _CreationControlCenterViewport_stateEngine, _CreationControlCenterViewport_uuidGenerator;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreationControlCenterViewport = void 0;
const viewer_rendering_engine_rendering_engine_threejs_1 = require("@shapediver/viewer.rendering-engine.rendering-engine-threejs");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const ViewportGlobalAccessObject_1 = require("./ViewportGlobalAccessObject");
class CreationControlCenterViewport {
    constructor() {
        _CreationControlCenterViewport_eventEngine.set(this, viewer_shared_services_1.EventEngine.instance);
        _CreationControlCenterViewport_logger.set(this, viewer_shared_services_1.Logger.instance);
        _CreationControlCenterViewport_sceneTree.set(this, viewer_shared_node_tree_1.Tree.instance);
        _CreationControlCenterViewport_stateEngine.set(this, viewer_shared_services_1.StateEngine.instance);
        _CreationControlCenterViewport_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);
        this.viewportEngines = {};
    }
    static get instance() {
        return this._instance || (this._instance = new this());
    }
    applyViewportSettings(viewportId, settings, sections = {
        ar: false,
        scene: false,
        camera: false,
        light: false,
        environment: false,
        general: false,
    }) {
        var _a;
        sections = sections || {};
        const settingsEngine = new viewer_shared_services_1.SettingsEngine();
        settingsEngine.loadSettings(settings);
        const promises = [];
        (_a = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[viewportId]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.reset();
        promises.push(new Promise((resolve) => {
            var _a;
            (_a = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[viewportId]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.then(() => {
                resolve();
            });
        }));
        this.viewportEngines[viewportId].applySettings(sections, settingsEngine);
        return new Promise((resolve) => Promise.all(promises).then(() => resolve()));
    }
    closeViewportEngine(id) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.viewportEngines[id])
                return;
            __classPrivateFieldGet(this, _CreationControlCenterViewport_logger, "f").debugLow(`CreationControlCenter.closeViewportEngine: Closing viewport ${id}.`);
            if (((_a = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[id]) === null || _a === void 0 ? void 0 : _a.initialized.resolved) ===
                false)
                yield new Promise((resolve) => {
                    var _a;
                    (_a = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[id]) === null || _a === void 0 ? void 0 : _a.initialized.then(() => resolve());
                });
            (_b = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[id]) === null || _b === void 0 ? void 0 : _b.settingsAssigned.reset();
            (_c = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[id]) === null || _c === void 0 ? void 0 : _c.environmentMapLoaded.reset();
            (_d = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[id]) === null || _d === void 0 ? void 0 : _d.initialized.reset();
            yield this.viewportEngines[id].close();
            this.viewportEngines[id] = undefined;
            delete this.viewportEngines[id];
            delete __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[id];
            __classPrivateFieldGet(this, _CreationControlCenterViewport_logger, "f").debug("CreationControlCenter.closeViewportEngine: Viewport closed.");
            if (this.updateViewports)
                this.updateViewports(this.viewportEngines);
            __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_CLOSED, {
                viewportId: id,
            });
        });
    }
    createViewportEngine(properties) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = __classPrivateFieldGet(this, _CreationControlCenterViewport_uuidGenerator, "f").create();
            const viewportEngineId = properties.id || __classPrivateFieldGet(this, _CreationControlCenterViewport_uuidGenerator, "f").create();
            properties.id = viewportEngineId;
            try {
                const eventStart = {
                    type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION,
                    id: eventId,
                    progress: 0,
                    status: "Creating viewport",
                    data: { viewportId: viewportEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);
                // check if the given id is valid
                if (this.viewportEngines[viewportEngineId]) {
                    const eventClose = {
                        type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION,
                        id: eventId,
                        progress: 0.1,
                        status: "Closing viewport with same id",
                        data: { viewportId: viewportEngineId },
                    };
                    __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);
                    __classPrivateFieldGet(this, _CreationControlCenterViewport_logger, "f").warn(`CreationControlCenter.createViewport: Viewer with this id (${viewportEngineId}) already exists. Closing initial instance.`);
                    yield this.closeViewportEngine(viewportEngineId);
                }
                const viewportEngine = new viewer_rendering_engine_rendering_engine_threejs_1.RenderingEngine(properties);
                __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[viewportEngineId] =
                    new ViewportGlobalAccessObject_1.ViewportGlobalAccessObject(viewportEngine);
                this.viewportEngines[viewportEngineId] = viewportEngine;
                viewportEngine.start();
                viewportEngine.cameraEngine.createDefaultCameras();
                if (properties.sessionSettingsMode === viewer_shared_services_1.SESSION_SETTINGS_MODE.MANUAL) {
                    if (!properties.sessionSettingsId)
                        throw new viewer_shared_services_1.ShapeDiverViewerViewportError("Session with sessionSettingsMode MANUAL needs to have a sessionSettingsId.");
                    const sessionSettingsId = properties.sessionSettingsId;
                    if (__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionSettingsId]) {
                        yield this.assignSettings(viewportEngine.id, sessionSettingsId, true);
                    }
                    else {
                        // in createSession
                    }
                }
                else if (properties.sessionSettingsMode === viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST) {
                    const firstSessionEngine = Object.values(__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines).find((sessionEngine) => sessionEngine && sessionEngine.isFirstSession === true);
                    if (firstSessionEngine) {
                        yield this.assignSettings(viewportEngine.id, firstSessionEngine.id, true);
                    }
                    else {
                        // in createSession
                    }
                }
                if (viewportEngine.sessionSettingsMode ===
                    viewer_shared_services_1.SESSION_SETTINGS_MODE.NONE &&
                    viewportEngine.visibility === viewer_shared_types_1.VISIBILITY_MODE.SESSION) {
                    viewportEngine.show = true;
                }
                else if (viewportEngine.visibility === viewer_shared_types_1.VISIBILITY_MODE.INSTANT) {
                    viewportEngine.show = true;
                }
                else if (viewportEngine.visibility === viewer_shared_types_1.VISIBILITY_MODE.SESSION) {
                    // wait for settings to load before showing the scene
                    if (__classPrivateFieldGet(this, _CreationControlCenterViewport_sceneTree, "f").root.boundingBox.isEmpty()) {
                        __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {
                            const event = e;
                            if (event.viewportId === viewportEngine.id) {
                                const boundingBox = new viewer_shared_math_1.Box(event.boundingBox.min, event.boundingBox.max);
                                if (boundingBox.isEmpty()) {
                                    viewportEngine.show = false;
                                }
                                else {
                                    this.showAfterSettingsAssignment(viewportEngine, viewportEngineId);
                                }
                            }
                        });
                    }
                    else {
                        this.showAfterSettingsAssignment(viewportEngine, viewportEngineId);
                    }
                }
                else if (viewportEngine.visibility === viewer_shared_types_1.VISIBILITY_MODE.SESSIONS) {
                    if (properties.visibilitySessionIds) {
                        const promises = [];
                        // gather all session promises
                        // either they are resolved already or we wait for them to resolve
                        properties.visibilitySessionIds.forEach((sessionId) => {
                            if (__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionId] &&
                                __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionId]
                                    .settingsRegistered.resolved === true) {
                                promises.push(Promise.resolve());
                            }
                            else {
                                promises.push(new Promise((resolve) => {
                                    if (__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionId]) {
                                        // case where session has been created, but not yet initialized
                                        if (__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionId].settingsRegistered.resolved ===
                                            false) {
                                            __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionId].settingsRegistered.then(() => {
                                                resolve();
                                            });
                                        }
                                        else {
                                            resolve();
                                        }
                                    }
                                    else {
                                        const sessionCreationListener = __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").addListener(viewer_shared_services_1.EVENTTYPE.SESSION
                                            .SESSION_CREATED, (e) => {
                                            const event = e;
                                            if (event.sessionId ===
                                                sessionId) {
                                                __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").removeListener(sessionCreationListener);
                                                resolve();
                                            }
                                        });
                                    }
                                }));
                            }
                        });
                        // wait for sessions to load before showing the scene
                        Promise.all(promises).then(() => {
                            this.showAfterSettingsAssignment(viewportEngine, viewportEngineId);
                        });
                    }
                    else {
                        viewportEngine.show = false;
                    }
                }
                (_a = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[viewportEngineId]) === null || _a === void 0 ? void 0 : _a.initialized.resolve(true);
                __classPrivateFieldGet(this, _CreationControlCenterViewport_logger, "f").debug(`CreationControlCenter.createViewport: Viewport(${viewportEngineId}) created.`);
                const eventEnd = {
                    type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION,
                    id: eventId,
                    progress: 1,
                    status: "Viewport created",
                    data: { viewportId: viewportEngineId },
                };
                if (this.updateViewports)
                    this.updateViewports(this.viewportEngines);
                __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_CREATED, {
                    viewportId: viewportEngineId,
                });
                __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);
                return (this.viewportEngines[viewportEngineId]);
            }
            catch (e) {
                const eventCancel1 = {
                    type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION,
                    id: eventId,
                    progress: 0.9,
                    status: "Viewport created failed, closing viewport",
                    data: { viewportId: viewportEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);
                try {
                    yield this.closeViewportEngine(viewportEngineId);
                }
                catch (_b) {
                    /* empty */
                }
                const eventCancel2 = {
                    type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION,
                    id: eventId,
                    progress: 1,
                    status: "Viewport created failed, exiting",
                    data: { viewportId: viewportEngineId },
                };
                __classPrivateFieldGet(this, _CreationControlCenterViewport_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);
                throw e;
            }
        });
    }
    getViewportSettings(viewportId) {
        const viewportEngine = this.viewportEngines[viewportId];
        if (!viewportEngine)
            throw new viewer_shared_services_1.ShapeDiverViewerViewportError("Viewport with id " + viewportId + " could not be found.");
        const settingsEngine = new viewer_shared_services_1.SettingsEngine();
        viewportEngine.saveSettings(settingsEngine);
        return settingsEngine.settings;
    }
    assignSettings(viewportEngineId, sessionEngineId, updateViewports = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const viewportEngine = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[viewportEngineId];
            if (!viewportEngine)
                return;
            if (__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionEngineId] &&
                __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionEngineId].initialized
                    .resolved === true) {
                // immediate
                viewportEngine.assignSettingsEngine(__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionEngineId]
                    .settingsEngine);
                yield viewportEngine.applySettings(undefined, undefined, updateViewports);
            }
            else {
                yield new Promise((resolve) => {
                    var _a;
                    (_a = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionEngineId]) === null || _a === void 0 ? void 0 : _a.initialized.then(() => __awaiter(this, void 0, void 0, function* () {
                        if (__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionEngineId]) {
                            viewportEngine.assignSettingsEngine(__classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").sessionEngines[sessionEngineId]
                                .settingsEngine);
                            yield viewportEngine.applySettings(undefined, undefined, updateViewports);
                        }
                        resolve();
                    }));
                });
            }
        });
    }
    showAfterSettingsAssignment(viewportEngine, viewportEngineId) {
        return new Promise((resolve) => {
            var _a, _b;
            if ((_a = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[viewportEngineId]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.resolved) {
                viewportEngine.show = true;
                resolve();
            }
            else {
                (_b = __classPrivateFieldGet(this, _CreationControlCenterViewport_stateEngine, "f").viewportEngines[viewportEngineId]) === null || _b === void 0 ? void 0 : _b.settingsAssigned.then(() => {
                    viewportEngine.show = true;
                    resolve();
                });
            }
        });
    }
}
exports.CreationControlCenterViewport = CreationControlCenterViewport;
_CreationControlCenterViewport_eventEngine = new WeakMap(), _CreationControlCenterViewport_logger = new WeakMap(), _CreationControlCenterViewport_sceneTree = new WeakMap(), _CreationControlCenterViewport_stateEngine = new WeakMap(), _CreationControlCenterViewport_uuidGenerator = new WeakMap();
//# sourceMappingURL=CreationControlCenterViewport.js.map