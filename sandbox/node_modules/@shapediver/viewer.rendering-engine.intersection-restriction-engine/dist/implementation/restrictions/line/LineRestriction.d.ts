import { IViewportApi } from "@shapediver/viewer";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { IRay } from "@shapediver/viewer.shared.types";
import { vec3 } from "gl-matrix";
import { IRestriction, RestrictionMetaData, RestrictionPropertiesBase, RestrictionResult } from "../../../interfaces/IRestriction";
import { ISnapRestriction } from "../../../interfaces/ISnapRestriction";
import { IVisualizationSettings } from "../../../interfaces/IVisualizationSettings";
import { GeometryMathManager } from "../../GeometryMathManager";
import { AbstractRestriction } from "../AbstractRestriction";
import { PointRestriction } from "../point/PointRestriction";
export interface LineRestrictionProperties extends RestrictionPropertiesBase {
    /**
     * The first point of the line.
     */
    point1: vec3;
    /**
     * The second point of the line.
     */
    point2: vec3;
    /**
     * The radius in which the restriction is active.
     */
    radius?: number;
    /**
     * The radius of the first point.
     */
    point1Radius?: number;
    /**
     * The radius of the second point.
     */
    point2Radius?: number;
}
export declare class LineRestriction extends AbstractRestriction implements IRestriction {
    #private;
    constructor(viewport: IViewportApi, geometryMathManager: GeometryMathManager, parentNode: ITreeNode, id: string, settings: IVisualizationSettings, properties: LineRestrictionProperties);
    get point1(): vec3;
    get point1Restriction(): PointRestriction | undefined;
    get point2(): vec3;
    get point2Restriction(): PointRestriction | undefined;
    get radius(): number;
    get snapRestrictions(): {
        [key: string]: ISnapRestriction;
    };
    isWithinRadius(point: vec3): boolean;
    rayTrace(ray: IRay, metaData?: RestrictionMetaData): RestrictionResult | undefined;
    protected visibilityChanged(): void;
}
//# sourceMappingURL=LineRestriction.d.ts.map