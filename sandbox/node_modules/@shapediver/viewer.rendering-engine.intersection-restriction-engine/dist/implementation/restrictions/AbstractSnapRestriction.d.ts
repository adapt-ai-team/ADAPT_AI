import { IViewportApi } from "@shapediver/viewer";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { IRay } from "@shapediver/viewer.shared.types";
import { vec3 } from "gl-matrix";
import * as THREE from "three";
import { RestrictionMetaData, RestrictionResult } from "../../interfaces/IRestriction";
import { ISnapRestriction } from "../../interfaces/ISnapRestriction";
export declare abstract class AbstractSnapRestriction implements ISnapRestriction {
    #private;
    protected _active: boolean;
    protected _enabled: boolean;
    protected _enabledEditable: boolean;
    protected _object3D: THREE.Object3D;
    protected _priority: number;
    constructor(viewport: IViewportApi, parentNode: ITreeNode, id: string);
    get active(): boolean;
    set active(value: boolean);
    get enabled(): boolean;
    set enabled(value: boolean);
    get enabledEditable(): boolean;
    set enabledEditable(value: boolean);
    get id(): string;
    get priority(): number;
    set priority(value: number);
    get showVisualization(): boolean;
    set showVisualization(value: boolean);
    removeVisualization(): void;
    abstract snap(ray: IRay, point: vec3, distance: number, metaData?: RestrictionMetaData): RestrictionResult | undefined;
    protected abstract visibilityChanged(visible: boolean): void;
    private createGridHelperObject;
}
//# sourceMappingURL=AbstractSnapRestriction.d.ts.map