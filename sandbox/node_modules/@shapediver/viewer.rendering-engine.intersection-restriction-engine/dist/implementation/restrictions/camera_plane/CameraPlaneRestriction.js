"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CameraPlaneRestriction_viewport, _CameraPlaneRestriction_dragPlane, _CameraPlaneRestriction_snapRestrictions;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraPlaneRestriction = void 0;
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const gl_matrix_1 = require("gl-matrix");
const AbstractRestriction_1 = require("../AbstractRestriction");
// #endregion Type aliases (1)
// #region Classes (1)
class CameraPlaneRestriction extends AbstractRestriction_1.AbstractRestriction {
    // #endregion Properties (3)
    // #region Constructors (1)
    constructor(viewport, geometryMathManager, parentNode, id, settings, properties) {
        super(viewport, parentNode, id, properties);
        // #region Properties (3)
        _CameraPlaneRestriction_viewport.set(this, void 0);
        _CameraPlaneRestriction_dragPlane.set(this, void 0);
        _CameraPlaneRestriction_snapRestrictions.set(this, {});
        __classPrivateFieldSet(this, _CameraPlaneRestriction_viewport, viewport, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (2)
    get snapRestrictions() {
        return __classPrivateFieldGet(this, _CameraPlaneRestriction_snapRestrictions, "f");
    }
    // #endregion Public Getters And Setters (2)
    // #region Public Methods (1)
    rayTrace(ray, metaData) {
        var _a;
        const cameraDirection = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.sub(gl_matrix_1.vec3.create(), __classPrivateFieldGet(this, _CameraPlaneRestriction_viewport, "f").camera.target, __classPrivateFieldGet(this, _CameraPlaneRestriction_viewport, "f").camera.position));
        __classPrivateFieldSet(this, _CameraPlaneRestriction_dragPlane, new viewer_shared_math_1.Plane().setFromNormalAndCoplanarPoint(cameraDirection, metaData.startPoint || gl_matrix_1.vec3.create()), "f");
        const distance = (_a = __classPrivateFieldGet(this, _CameraPlaneRestriction_dragPlane, "f")) === null || _a === void 0 ? void 0 : _a.intersect(ray.origin, ray.direction);
        if (distance && distance > 0) {
            const point = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), ray.direction, gl_matrix_1.vec3.fromValues(distance, distance, distance)), ray.origin);
            return {
                closestIntersectionPoint: point,
                distanceOriginToClosestIntersectionPointSquared: distance * distance,
                targetPoint: point,
                distanceClosestPointToTargetPointSquared: 0,
                restriction: this,
            };
        }
        return;
    }
    // #endregion Public Methods (1)
    // #region Protected Methods (1)
    visibilityChanged() { }
}
exports.CameraPlaneRestriction = CameraPlaneRestriction;
_CameraPlaneRestriction_viewport = new WeakMap(), _CameraPlaneRestriction_dragPlane = new WeakMap(), _CameraPlaneRestriction_snapRestrictions = new WeakMap();
// #endregion Classes (1)
//# sourceMappingURL=CameraPlaneRestriction.js.map