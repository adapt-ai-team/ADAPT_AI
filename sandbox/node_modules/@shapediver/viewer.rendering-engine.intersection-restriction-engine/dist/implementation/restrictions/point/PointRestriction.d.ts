import { ITreeNode, IViewportApi } from "@shapediver/viewer";
import { IRay } from "@shapediver/viewer.shared.types";
import { vec3 } from "gl-matrix";
import { IRestriction, RestrictionMetaData, RestrictionPropertiesBase, RestrictionResult } from "../../../interfaces/IRestriction";
import { ISnapRestriction } from "../../../interfaces/ISnapRestriction";
import { IVisualizationSettings } from "../../../interfaces/IVisualizationSettings";
import { GeometryMathManager } from "../../GeometryMathManager";
import { AbstractRestriction } from "../AbstractRestriction";
export interface PointRestrictionProperties extends RestrictionPropertiesBase {
    /**
     * The location of the restriction.
     */
    point: vec3;
    /**
     * The radius in which the restriction is active.
     */
    radius?: number;
}
export declare class PointRestriction extends AbstractRestriction implements IRestriction {
    #private;
    constructor(viewport: IViewportApi, geometryMathManager: GeometryMathManager, parentNode: ITreeNode, id: string, settings: IVisualizationSettings, properties: PointRestrictionProperties);
    get point(): vec3;
    get radius(): number;
    get snapRestrictions(): {
        [key: string]: ISnapRestriction;
    };
    isWithinRadius(point: vec3): boolean;
    rayTrace(ray: IRay, metaData?: RestrictionMetaData): RestrictionResult | undefined;
    protected visibilityChanged(): void;
}
//# sourceMappingURL=PointRestriction.d.ts.map