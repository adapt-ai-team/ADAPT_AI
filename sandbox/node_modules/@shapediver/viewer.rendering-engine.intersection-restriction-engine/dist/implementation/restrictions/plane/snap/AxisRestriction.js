"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AxisRestriction_activationKeyPlane, _AxisRestriction_activationKeyX, _AxisRestriction_activationKeyY, _AxisRestriction_activationKeyZ, _AxisRestriction_planeRestriction, _AxisRestriction_active, _AxisRestriction_axesHelper, _AxisRestriction_geometryMathManager, _AxisRestriction_priority;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxisRestriction = void 0;
const viewer_1 = require("@shapediver/viewer");
const gl_matrix_1 = require("gl-matrix");
const THREE = __importStar(require("three"));
const AbstractSnapRestriction_1 = require("../../AbstractSnapRestriction");
// #endregion Type aliases (1)
// #region Classes (1)
class AxisRestriction extends AbstractSnapRestriction_1.AbstractSnapRestriction {
    // #endregion Properties (9)
    // #region Constructors (1)
    constructor(viewport, geometryMathManager, parentNode, planeRestriction, properties) {
        super(viewport, parentNode, "axis");
        // #region Properties (9)
        _AxisRestriction_activationKeyPlane.set(this, void 0);
        _AxisRestriction_activationKeyX.set(this, void 0);
        _AxisRestriction_activationKeyY.set(this, void 0);
        _AxisRestriction_activationKeyZ.set(this, void 0);
        _AxisRestriction_planeRestriction.set(this, void 0);
        _AxisRestriction_active.set(this, false);
        _AxisRestriction_axesHelper.set(this, void 0);
        _AxisRestriction_geometryMathManager.set(this, void 0);
        _AxisRestriction_priority.set(this, 0);
        __classPrivateFieldSet(this, _AxisRestriction_planeRestriction, planeRestriction, "f");
        __classPrivateFieldSet(this, _AxisRestriction_geometryMathManager, geometryMathManager, "f");
        __classPrivateFieldSet(this, _AxisRestriction_activationKeyX, (properties === null || properties === void 0 ? void 0 : properties.activationKeyX) || "x", "f");
        __classPrivateFieldSet(this, _AxisRestriction_activationKeyY, (properties === null || properties === void 0 ? void 0 : properties.activationKeyY) || "y", "f");
        __classPrivateFieldSet(this, _AxisRestriction_activationKeyZ, (properties === null || properties === void 0 ? void 0 : properties.activationKeyZ) || "z", "f");
        __classPrivateFieldSet(this, _AxisRestriction_activationKeyPlane, (properties === null || properties === void 0 ? void 0 : properties.activationKeyPlane) || "p", "f");
        __classPrivateFieldSet(this, _AxisRestriction_priority, (properties === null || properties === void 0 ? void 0 : properties.priority) || 1, "f");
        // create the axes visualization
        this.createAxesVisualization();
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (5)
    get active() {
        return __classPrivateFieldGet(this, _AxisRestriction_active, "f");
    }
    set active(value) {
        __classPrivateFieldSet(this, _AxisRestriction_active, value, "f");
        if (__classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f"))
            __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").visible = value;
    }
    get enabledEditable() {
        return this._enabledEditable;
    }
    get priority() {
        return __classPrivateFieldGet(this, _AxisRestriction_priority, "f");
    }
    set priority(value) {
        __classPrivateFieldSet(this, _AxisRestriction_priority, value, "f");
    }
    // #endregion Public Getters And Setters (5)
    // #region Public Methods (2)
    snap(ray, point, distance, metaData) {
        var _a, _b, _c, _d;
        if (this.enabled === false)
            return;
        if (!metaData || !metaData.startPoint)
            return;
        const xPressed = ((_a = metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys) === null || _a === void 0 ? void 0 : _a.length) === 1 &&
            (metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys[0]) === __classPrivateFieldGet(this, _AxisRestriction_activationKeyX, "f");
        const yPressed = ((_b = metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys) === null || _b === void 0 ? void 0 : _b.length) === 1 &&
            (metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys[0]) === __classPrivateFieldGet(this, _AxisRestriction_activationKeyY, "f");
        const zPressed = ((_c = metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys) === null || _c === void 0 ? void 0 : _c.length) === 1 &&
            (metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys[0]) === __classPrivateFieldGet(this, _AxisRestriction_activationKeyZ, "f");
        const pPressed = ((_d = metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys) === null || _d === void 0 ? void 0 : _d.length) === 1 &&
            (metaData === null || metaData === void 0 ? void 0 : metaData.pressedKeys[0]) === __classPrivateFieldGet(this, _AxisRestriction_activationKeyPlane, "f");
        // we move the axes helper to the reference point
        if (__classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f") && (xPressed || yPressed || zPressed)) {
            __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").position.copy(new THREE.Vector3(metaData.startPoint[0], metaData.startPoint[1], metaData.startPoint[2]));
            __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").visible = false;
        }
        if (xPressed) {
            const snappedPoint = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPoint({
                origin: metaData.startPoint,
                direction: __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorU,
            }, point);
            const closestPointOnRay = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPoint(ray, snappedPoint);
            return {
                targetPoint: snappedPoint,
                closestIntersectionPoint: closestPointOnRay,
                distanceOriginToClosestIntersectionPointSquared: gl_matrix_1.vec3.sqrDist(ray.origin, closestPointOnRay),
                distanceClosestPointToTargetPointSquared: gl_matrix_1.vec3.sqrDist(snappedPoint, closestPointOnRay),
                restriction: __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f"),
                snapRestriction: this,
            };
        }
        else if (yPressed) {
            const snappedPoint = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPoint({
                origin: metaData.startPoint,
                direction: __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorV,
            }, point);
            const closestPointOnRay = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPoint(ray, snappedPoint);
            return {
                targetPoint: snappedPoint,
                closestIntersectionPoint: closestPointOnRay,
                distanceOriginToClosestIntersectionPointSquared: gl_matrix_1.vec3.sqrDist(ray.origin, closestPointOnRay),
                distanceClosestPointToTargetPointSquared: gl_matrix_1.vec3.sqrDist(snappedPoint, closestPointOnRay),
                restriction: __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f"),
                snapRestriction: this,
            };
        }
        else if (zPressed) {
            const snappedPoint = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPointsRayRay({
                origin: metaData.startPoint,
                direction: __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").normal,
            }, ray).closestPointOnRay1;
            const closestPointOnRay = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPoint(ray, snappedPoint);
            return {
                targetPoint: snappedPoint,
                closestIntersectionPoint: closestPointOnRay,
                distanceOriginToClosestIntersectionPointSquared: gl_matrix_1.vec3.sqrDist(ray.origin, closestPointOnRay),
                distanceClosestPointToTargetPointSquared: gl_matrix_1.vec3.sqrDist(snappedPoint, closestPointOnRay),
                restriction: __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f"),
                snapRestriction: this,
            };
        }
        else if (pPressed) {
            const snappedPoint = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPointOnPlane(__classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").origin, __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").normal, point);
            const closestPointOnRay = __classPrivateFieldGet(this, _AxisRestriction_geometryMathManager, "f").closestPoint(ray, snappedPoint);
            return {
                targetPoint: snappedPoint,
                closestIntersectionPoint: closestPointOnRay,
                distanceOriginToClosestIntersectionPointSquared: gl_matrix_1.vec3.sqrDist(ray.origin, closestPointOnRay),
                distanceClosestPointToTargetPointSquared: gl_matrix_1.vec3.sqrDist(snappedPoint, closestPointOnRay),
                restriction: __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f"),
                snapRestriction: this,
            };
        }
    }
    updatePlaneDefinition() {
        this.createAxesVisualization();
    }
    // #endregion Public Methods (2)
    // #region Protected Methods (1)
    visibilityChanged(visible) {
        if (visible === false) {
            if (__classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f")) {
                __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").visible = false;
            }
        }
    }
    // #endregion Protected Methods (1)
    // #region Private Methods (1)
    createAxesVisualization() {
        if (__classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f")) {
            this._object3D.remove(__classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f"));
            __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").dispose();
        }
        const bb = new viewer_1.Box();
        for (let i = 0; i < viewer_1.sceneTree.root.children.length; i++) {
            if (viewer_1.sceneTree.root.children[i].sessionNode === true) {
                bb.union(viewer_1.sceneTree.root.children[i].boundingBox);
            }
        }
        const radius = bb.boundingSphere.radius;
        __classPrivateFieldSet(this, _AxisRestriction_axesHelper, new THREE.AxesHelper(radius), "f");
        __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").position.copy(new THREE.Vector3(__classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").origin[0], __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").origin[1], __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").origin[2]));
        __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").visible = false;
        __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").renderOrder = 100;
        __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").material.depthTest =
            false;
        __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").material.transparent =
            true;
        // three.js uses a right-handed coordinate system, so we need to rotate the axes helper
        const rotationMatrix = new THREE.Matrix4().fromArray([
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorU[0],
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorU[1],
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorU[2],
            0,
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorV[0],
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorV[1],
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").vectorV[2],
            0,
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").normal[0],
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").normal[1],
            __classPrivateFieldGet(this, _AxisRestriction_planeRestriction, "f").normal[2],
            0,
            0,
            0,
            0,
            1,
        ]);
        __classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f").rotation.setFromRotationMatrix(rotationMatrix);
        this._object3D.add(__classPrivateFieldGet(this, _AxisRestriction_axesHelper, "f"));
    }
}
exports.AxisRestriction = AxisRestriction;
_AxisRestriction_activationKeyPlane = new WeakMap(), _AxisRestriction_activationKeyX = new WeakMap(), _AxisRestriction_activationKeyY = new WeakMap(), _AxisRestriction_activationKeyZ = new WeakMap(), _AxisRestriction_planeRestriction = new WeakMap(), _AxisRestriction_active = new WeakMap(), _AxisRestriction_axesHelper = new WeakMap(), _AxisRestriction_geometryMathManager = new WeakMap(), _AxisRestriction_priority = new WeakMap();
// #endregion Classes (1)
//# sourceMappingURL=AxisRestriction.js.map