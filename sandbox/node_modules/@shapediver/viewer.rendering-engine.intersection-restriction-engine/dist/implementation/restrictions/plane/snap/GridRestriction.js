"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GridRestriction_activationKey, _GridRestriction_eventEngine, _GridRestriction_planeRestriction, _GridRestriction_active, _GridRestriction_gridHelper, _GridRestriction_gridSize, _GridRestriction_gridUnit, _GridRestriction_gridUnitEditable, _GridRestriction_offsetFromUnit, _GridRestriction_toggleInversion, _GridRestriction_priority;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridRestriction = void 0;
const viewer_1 = require("@shapediver/viewer");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const gl_matrix_1 = require("gl-matrix");
const THREE = __importStar(require("three"));
const AbstractSnapRestriction_1 = require("../../AbstractSnapRestriction");
// #endregion Type aliases (1)
// #region Classes (1)
class GridRestriction extends AbstractSnapRestriction_1.AbstractSnapRestriction {
    // #endregion Properties (9)
    // #region Constructors (1)
    constructor(viewport, geometryMathManager, parentNode, planeRestriction, properties) {
        var _a, _b, _c;
        super(viewport, parentNode, "grid");
        // #region Properties (9)
        _GridRestriction_activationKey.set(this, void 0);
        _GridRestriction_eventEngine.set(this, viewer_shared_services_1.EventEngine.instance);
        _GridRestriction_planeRestriction.set(this, void 0);
        _GridRestriction_active.set(this, false);
        _GridRestriction_gridHelper.set(this, void 0);
        _GridRestriction_gridSize.set(this, 100);
        _GridRestriction_gridUnit.set(this, void 0);
        _GridRestriction_gridUnitEditable.set(this, true);
        _GridRestriction_offsetFromUnit.set(this, gl_matrix_1.vec3.create());
        _GridRestriction_toggleInversion.set(this, false);
        _GridRestriction_priority.set(this, 0);
        __classPrivateFieldSet(this, _GridRestriction_planeRestriction, planeRestriction, "f");
        __classPrivateFieldSet(this, _GridRestriction_activationKey, (properties === null || properties === void 0 ? void 0 : properties.activationKey) || "g", "f");
        this.enabled = (_a = properties === null || properties === void 0 ? void 0 : properties.enabled) !== null && _a !== void 0 ? _a : false;
        this._enabledEditable = (_b = properties === null || properties === void 0 ? void 0 : properties.enabledEditable) !== null && _b !== void 0 ? _b : true;
        // if a grid unit is provided, we toggle it on by default
        if ((properties === null || properties === void 0 ? void 0 : properties.gridUnit) !== undefined && (properties === null || properties === void 0 ? void 0 : properties.gridUnit) !== 0) {
            __classPrivateFieldSet(this, _GridRestriction_toggleInversion, true, "f");
            __classPrivateFieldSet(this, _GridRestriction_gridUnit, properties.gridUnit, "f");
        }
        else {
            // we define our own grid unit
            __classPrivateFieldSet(this, _GridRestriction_gridUnit, 1, "f");
            /**
             * Depending on the scene radius, we calculate the grid unit.
             * The grid unit is calculated as follows:
             * - calculate 1% of the scene radius
             * - find the closest power of 10 that is smaller than the 1% of the scene radius
             * - find the closest power of 10 that is larger than the 1% of the scene radius
             * - the grid unit is whichever of the two is closer to the 1% of the scene radius
             *
             * @param sceneRadius
             * @returns
             */
            const calculateGridUnit = (sceneRadius) => {
                const percentage = 0.01;
                const percentageSceneRadius = sceneRadius * percentage;
                const log10 = Math.log10(percentageSceneRadius);
                const smaller = Math.pow(10, Math.floor(log10));
                const larger = Math.pow(10, Math.ceil(log10));
                const gridUnit = Math.abs(smaller - percentageSceneRadius) <
                    Math.abs(larger - percentageSceneRadius)
                    ? smaller
                    : larger;
                return gridUnit;
            };
            if (viewer_1.sceneTree.root.boundingBox.isEmpty()) {
                // add an event listener to update the grid size
                const eventListenerToken = __classPrivateFieldGet(this, _GridRestriction_eventEngine, "f").addListener(viewer_shared_services_1.EVENTTYPE_SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {
                    const sceneEvent = e;
                    if (sceneEvent.boundingBox) {
                        const box = new viewer_1.Box(sceneEvent.boundingBox.min, sceneEvent.boundingBox.max);
                        if (box.isEmpty())
                            return;
                        __classPrivateFieldSet(this, _GridRestriction_gridUnit, calculateGridUnit(box.boundingSphere.radius), "f");
                        this.createOffsetFromUnit();
                        this.createGridVisualization();
                        __classPrivateFieldGet(this, _GridRestriction_eventEngine, "f").removeListener(eventListenerToken);
                    }
                });
            }
            else {
                __classPrivateFieldSet(this, _GridRestriction_gridUnit, calculateGridUnit(viewer_1.sceneTree.root.boundingBox.boundingSphere.radius), "f");
            }
        }
        __classPrivateFieldSet(this, _GridRestriction_gridUnitEditable, (_c = properties === null || properties === void 0 ? void 0 : properties.gridUnitEditable) !== null && _c !== void 0 ? _c : true, "f");
        __classPrivateFieldSet(this, _GridRestriction_priority, (properties === null || properties === void 0 ? void 0 : properties.priority) || 0, "f");
        // create the offset of the grid size to origin
        this.createOffsetFromUnit();
        // calculate offset of grid size to origin
        this.createGridVisualization();
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (8)
    get active() {
        return __classPrivateFieldGet(this, _GridRestriction_active, "f");
    }
    set active(value) {
        __classPrivateFieldSet(this, _GridRestriction_active, value, "f");
        if (__classPrivateFieldGet(this, _GridRestriction_gridHelper, "f"))
            __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").visible = value;
    }
    get enabledEditable() {
        return this._enabledEditable;
    }
    get gridUnit() {
        return __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f");
    }
    set gridUnit(value) {
        if (__classPrivateFieldGet(this, _GridRestriction_gridUnitEditable, "f") === false)
            return;
        __classPrivateFieldSet(this, _GridRestriction_gridUnit, value, "f");
        this.createOffsetFromUnit();
        this.createGridVisualization();
    }
    get gridUnitEditable() {
        return __classPrivateFieldGet(this, _GridRestriction_gridUnitEditable, "f");
    }
    get priority() {
        return __classPrivateFieldGet(this, _GridRestriction_priority, "f");
    }
    set priority(value) {
        __classPrivateFieldSet(this, _GridRestriction_priority, value, "f");
    }
    // #endregion Public Getters And Setters (8)
    // #region Public Methods (2)
    // public get
    snap(ray, point, distance, metaData) {
        var _a;
        // check if the activation key is pressed
        let isKeyToggled = ((_a = metaData === null || metaData === void 0 ? void 0 : metaData.toggledKeys) === null || _a === void 0 ? void 0 : _a.length) === 1 &&
            (metaData === null || metaData === void 0 ? void 0 : metaData.toggledKeys[0]) === __classPrivateFieldGet(this, _GridRestriction_activationKey, "f");
        // invert the result if toggleInversion is set
        if (__classPrivateFieldGet(this, _GridRestriction_toggleInversion, "f"))
            isKeyToggled = !isKeyToggled;
        // if the restriction is not enabled and the activation key is set and the key is not pressed, return
        if (this.enabled === false && !isKeyToggled)
            return;
        /**
         * Explanation of the following code:
         * 1. Calculate the projection of the origin onto the plane that is created by the point and the normal
         * 2. Move the grid helper to the projected origin
         */
        // vector from the point to the origin
        const v = gl_matrix_1.vec3.sub(gl_matrix_1.vec3.create(), __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin, point);
        // dot product of the vector and the normal
        const dot = gl_matrix_1.vec3.dot(v, __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").normal);
        // projection of the origin onto the plane that is created by the point and the normal
        const projectedOrigin = gl_matrix_1.vec3.sub(gl_matrix_1.vec3.create(), __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin, gl_matrix_1.vec3.scale(gl_matrix_1.vec3.create(), __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").normal, dot));
        // we move the grid helper to the projected origin
        if (__classPrivateFieldGet(this, _GridRestriction_gridHelper, "f")) {
            __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").position.copy(new THREE.Vector3(projectedOrigin[0], projectedOrigin[1], projectedOrigin[2]));
            __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").visible = false;
        }
        /**
         * Explanation of the following code:
         * 1. Rotate the point so that the normal of the plane is aligned with the Z axis (with previously calculated transformation matrix)
         * 2. Snap the point to the grid
         * 3. Rotate the point back to the original coordinate system (with previously calculated transformation matrix)
         */
        // Apply the transformation to the point
        const rotatedPoint = gl_matrix_1.vec3.transformMat4(gl_matrix_1.vec3.create(), point, __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").transformationToXYPlaneMatrix);
        // Snap the offset to the grid
        const snappedOffset = gl_matrix_1.vec3.create();
        snappedOffset[0] =
            Math.round(rotatedPoint[0] / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f")) * __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f") -
                __classPrivateFieldGet(this, _GridRestriction_offsetFromUnit, "f")[0];
        snappedOffset[1] =
            Math.round(rotatedPoint[1] / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f")) * __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f") -
                __classPrivateFieldGet(this, _GridRestriction_offsetFromUnit, "f")[1];
        snappedOffset[2] = rotatedPoint[2];
        // Move the snapped point back to the original coordinate system
        const snappedPoint = gl_matrix_1.vec3.transformMat4(gl_matrix_1.vec3.create(), snappedOffset, __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").transformationFromXYPlaneMatrix);
        return {
            targetPoint: snappedPoint,
            closestIntersectionPoint: point,
            distanceOriginToClosestIntersectionPointSquared: distance,
            distanceClosestPointToTargetPointSquared: gl_matrix_1.vec3.sqrDist(snappedPoint, point),
            restriction: __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f"),
            snapRestriction: this,
        };
    }
    updatePlaneDefinition() {
        this.createOffsetFromUnit();
        this.createGridVisualization();
    }
    // #endregion Public Methods (2)
    // #region Protected Methods (1)
    visibilityChanged(visible) {
        if (visible === false) {
            if (__classPrivateFieldGet(this, _GridRestriction_gridHelper, "f")) {
                __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").visible = false;
            }
        }
    }
    // #endregion Protected Methods (1)
    // #region Private Methods (2)
    createGridVisualization() {
        if (__classPrivateFieldGet(this, _GridRestriction_gridHelper, "f")) {
            this._object3D.remove(__classPrivateFieldGet(this, _GridRestriction_gridHelper, "f"));
            __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").dispose();
        }
        const bb = new viewer_1.Box();
        for (let i = 0; i < viewer_1.sceneTree.root.children.length; i++) {
            if (viewer_1.sceneTree.root.children[i].sessionNode === true) {
                bb.union(viewer_1.sceneTree.root.children[i].boundingBox);
            }
        }
        const radius = bb.boundingSphere.radius;
        __classPrivateFieldSet(this, _GridRestriction_gridSize, radius * 2, "f");
        if (__classPrivateFieldGet(this, _GridRestriction_gridSize, "f") === Infinity ||
            __classPrivateFieldGet(this, _GridRestriction_gridSize, "f") === -Infinity ||
            isNaN(__classPrivateFieldGet(this, _GridRestriction_gridSize, "f")) ||
            __classPrivateFieldGet(this, _GridRestriction_gridSize, "f") === 0)
            __classPrivateFieldSet(this, _GridRestriction_gridSize, 100, "f");
        // if the grid size is not divisible by the grid unit, we need to adjust the grid size
        let gridSize = __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f") * Math.ceil(__classPrivateFieldGet(this, _GridRestriction_gridSize, "f") / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f"));
        // if the number of divisions is odd, we need to add one more division
        if ((gridSize / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f")) % 2 === 1)
            gridSize += __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f");
        // todo  adjust grid size so that is divisible by grid unit
        __classPrivateFieldSet(this, _GridRestriction_gridHelper, new THREE.GridHelper(gridSize, gridSize / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f"), 0x666666, 0x222222), "f");
        const adjustedOrigin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin, __classPrivateFieldGet(this, _GridRestriction_offsetFromUnit, "f"));
        __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").position.copy(new THREE.Vector3(adjustedOrigin[0], adjustedOrigin[1], adjustedOrigin[2]));
        __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").visible = false;
        __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").renderOrder = 100;
        __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").material.depthTest =
            false;
        __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").material.transparent =
            true;
        // three.js uses a right-handed coordinate system, so we need to rotate the grid helper
        const rotationMatrix = new THREE.Matrix4().fromArray([
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").vectorU[0],
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").vectorU[1],
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").vectorU[2],
            0,
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").vectorV[0],
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").vectorV[1],
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").vectorV[2],
            0,
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").normal[0],
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").normal[1],
            __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").normal[2],
            0,
            0,
            0,
            0,
            1,
        ]);
        __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").rotation.setFromRotationMatrix(rotationMatrix);
        // three.js grid helper is created in the XY plane, so we need to rotate it by 90 degrees around the X axis
        __classPrivateFieldGet(this, _GridRestriction_gridHelper, "f").rotateX(Math.PI / 2);
        this._object3D.add(__classPrivateFieldGet(this, _GridRestriction_gridHelper, "f"));
    }
    createOffsetFromUnit() {
        // Calculate the offset of the rotated point from the rotated origin
        __classPrivateFieldGet(this, _GridRestriction_offsetFromUnit, "f")[0] =
            __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f") *
                Math.round(__classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin[0] / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f")) -
                __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin[0];
        __classPrivateFieldGet(this, _GridRestriction_offsetFromUnit, "f")[1] =
            __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f") *
                Math.round(__classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin[1] / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f")) -
                __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin[1];
        __classPrivateFieldGet(this, _GridRestriction_offsetFromUnit, "f")[2] =
            __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f") *
                Math.round(__classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin[2] / __classPrivateFieldGet(this, _GridRestriction_gridUnit, "f")) -
                __classPrivateFieldGet(this, _GridRestriction_planeRestriction, "f").origin[2];
    }
}
exports.GridRestriction = GridRestriction;
_GridRestriction_activationKey = new WeakMap(), _GridRestriction_eventEngine = new WeakMap(), _GridRestriction_planeRestriction = new WeakMap(), _GridRestriction_active = new WeakMap(), _GridRestriction_gridHelper = new WeakMap(), _GridRestriction_gridSize = new WeakMap(), _GridRestriction_gridUnit = new WeakMap(), _GridRestriction_gridUnitEditable = new WeakMap(), _GridRestriction_offsetFromUnit = new WeakMap(), _GridRestriction_toggleInversion = new WeakMap(), _GridRestriction_priority = new WeakMap();
// #endregion Classes (1)
//# sourceMappingURL=GridRestriction.js.map