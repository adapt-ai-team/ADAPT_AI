import { ITreeNode, IViewportApi } from "@shapediver/viewer";
import { IRay } from "@shapediver/viewer.shared.types";
import { vec3 } from "gl-matrix";
import { RestrictionMetaData, RestrictionResult } from "../../../../interfaces/IRestriction";
import { ISnapRestriction, SnapRestrictionProperties } from "../../../../interfaces/ISnapRestriction";
import { GeometryMathManager } from "../../../GeometryMathManager";
import { AbstractSnapRestriction } from "../../AbstractSnapRestriction";
import { PlaneRestriction } from "../PlaneRestriction";
export declare type AxisRestrictionProperties = {
    activationKeyX?: string;
    activationKeyY?: string;
    activationKeyZ?: string;
    activationKeyPlane?: string;
} & SnapRestrictionProperties;
export declare class AxisRestriction extends AbstractSnapRestriction implements ISnapRestriction {
    #private;
    constructor(viewport: IViewportApi, geometryMathManager: GeometryMathManager, parentNode: ITreeNode, planeRestriction: PlaneRestriction, properties?: AxisRestrictionProperties);
    get active(): boolean;
    set active(value: boolean);
    get enabledEditable(): boolean;
    get priority(): number;
    set priority(value: number);
    snap(ray: IRay, point: vec3, distance: number, metaData?: RestrictionMetaData): RestrictionResult | undefined;
    updatePlaneDefinition(): void;
    protected visibilityChanged(visible: boolean): void;
    private createAxesVisualization;
}
//# sourceMappingURL=AxisRestriction.d.ts.map