import { ITreeNode, IViewportApi } from "@shapediver/viewer";
import { IRay } from "@shapediver/viewer.shared.types";
import { mat4, vec3 } from "gl-matrix";
import { IRestriction, RestrictionMetaData, RestrictionPropertiesBase, RestrictionResult } from "../../../interfaces/IRestriction";
import { ISnapRestriction } from "../../../interfaces/ISnapRestriction";
import { IVisualizationSettings } from "../../../interfaces/IVisualizationSettings";
import { GeometryMathManager } from "../../GeometryMathManager";
import { AbstractRestriction } from "../AbstractRestriction";
import { AngularRestriction, AngularRestrictionProperties } from "./snap/AngularRestriction";
import { AxisRestriction, AxisRestrictionProperties } from "./snap/AxisRestriction";
import { GridRestriction, GridRestrictionProperties } from "./snap/GridRestriction";
export interface PlaneRestrictionProperties extends RestrictionPropertiesBase {
    /**
     * The origin of the plane.
     *
     * @default vec3.fromValues(0, 0, 0)
     */
    origin?: vec3;
    /**
     * Vector U of the plane
     * with the cross product of vector_u and vector_v the normal of the plane can be calculated
     */
    vector_u?: vec3;
    /**
     * Vector V of the plane
     * with the cross product of vector_u and vector_v the normal of the plane can be calculated
     */
    vector_v?: vec3;
    /**
     * grid snap restriction
     */
    gridSnapRestriction?: GridRestrictionProperties;
    /**
     * angular snap restriction
     */
    angularSnapRestriction?: AngularRestrictionProperties;
    /**
     * axis snap restriction
     */
    axisSnapRestriction?: AxisRestrictionProperties;
}
export declare class PlaneRestriction extends AbstractRestriction implements IRestriction {
    #private;
    constructor(viewport: IViewportApi, geometryMathManager: GeometryMathManager, parentNode: ITreeNode, id: string, settings: IVisualizationSettings, properties: PlaneRestrictionProperties);
    get angularRestriction(): AngularRestriction;
    get axisRestriction(): AxisRestriction;
    get gridRestriction(): GridRestriction;
    get normal(): vec3;
    get origin(): vec3;
    set origin(value: vec3);
    get snapRestrictions(): {
        [key: string]: ISnapRestriction;
    };
    get transformationFromXYPlaneMatrix(): mat4;
    get transformationToXYPlaneMatrix(): mat4;
    get vectorU(): vec3;
    set vectorU(value: vec3);
    get vectorV(): vec3;
    set vectorV(value: vec3);
    rayTrace(ray: IRay, metaData?: RestrictionMetaData): RestrictionResult | undefined;
    protected visibilityChanged(): void;
    private createDefaultPlane;
    private createTransformationMatrices;
    private snap;
    private updatePlaneDefinition;
}
//# sourceMappingURL=PlaneRestriction.d.ts.map