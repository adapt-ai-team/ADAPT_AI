import { IViewportApi } from "@shapediver/viewer";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { IRay } from "@shapediver/viewer.shared.types";
import { vec3 } from "gl-matrix";
import * as THREE from "three";
import { IRestriction, RestrictionMetaData, RestrictionProperties, RestrictionResult, RESTRICTION_TYPE } from "../../interfaces/IRestriction";
import { ISnapRestriction } from "../../interfaces/ISnapRestriction";
export declare abstract class AbstractRestriction implements IRestriction {
    #private;
    protected _enabled: boolean;
    protected _enabledEditable: boolean;
    protected _object3D: THREE.Object3D;
    protected _snapRestrictions: {
        [key: string]: ISnapRestriction;
    };
    constructor(viewport: IViewportApi, parentNode: ITreeNode, id: string, properties: RestrictionProperties);
    get enabled(): boolean;
    set enabled(value: boolean);
    get hideable(): boolean;
    set hideable(value: boolean);
    get id(): string;
    get priority(): number;
    set priority(value: number);
    get rotation(): {
        axis: vec3;
        angle: number;
    };
    set rotation(value: {
        axis: vec3;
        angle: number;
    });
    get showVisualization(): boolean;
    set showVisualization(value: boolean);
    get snapRestrictions(): {
        [key: string]: ISnapRestriction;
    };
    get type(): RESTRICTION_TYPE;
    removeVisualization(): void;
    abstract rayTrace(ray: IRay, metaData?: RestrictionMetaData): RestrictionResult | undefined;
    protected abstract visibilityChanged(visible: boolean): void;
    private createGridHelperObject;
}
//# sourceMappingURL=AbstractRestriction.d.ts.map