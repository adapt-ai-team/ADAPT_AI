import { IViewportApi } from "@shapediver/viewer";
import { IRay } from "@shapediver/viewer.shared.types";
import { vec3 } from "gl-matrix";
import { IVisualizationSettings } from "../interfaces/IVisualizationSettings";
export declare class GeometryMathManager {
    #private;
    constructor(viewport: IViewportApi, settings: IVisualizationSettings);
    /**
     * Check which distances of lines to ray
     *
     * @param ray
     * @returns
     */
    checkLineDistances(ray: IRay, positionArray: Float32Array, indicesArrayLines?: Uint8Array | null): {
        index: number[];
        distance: number;
    }[] | undefined;
    /**
     * Check which distances of points to ray
     *
     * @param ray
     * @returns
     */
    checkPointDistances(ray: IRay, positionArray: Float32Array): {
        index: number;
        distance: number;
    }[] | undefined;
    close(): void;
    /**
     * Calculate the closest point on a ray to a point
     *
     * @param ray
     * @param point
     * @returns
     */
    closestPoint(ray: IRay, point: vec3): vec3;
    /**
     * Calculate the closest point on a line to a point
     *
     * @param start
     * @param end
     * @param point
     */
    closestPointOnLine(start: vec3, end: vec3, point: vec3): vec3;
    /**
     * Calculate the closest point on a plane to a point
     *
     * @param point
     * @param planeNormal
     * @param planeOrigin
     * @returns
     */
    closestPointOnPlane(planeOrigin: vec3, planeNormal: vec3, point: vec3): vec3;
    /**
     * Calculate the distance between a ray and a line segment
     *
     * @param ray
     * @param lineStart
     * @param lineEnd
     * @returns
     */
    closestPointsRayLine(ray: IRay, lineStart: vec3, lineEnd: vec3): {
        closestPointOnRay: vec3;
        closestPointOnLine: vec3;
    };
    /**
     * Calculate the distance between two rays
     *
     * @param ray1
     * @param ray2
     * @returns
     */
    closestPointsRayRay(ray1: IRay, ray2: IRay): {
        closestPointOnRay1: vec3;
        closestPointOnRay2: vec3;
    };
    screenSpaceDistanceCheck(point1: vec3, point2: vec3, threshold: number): {
        distanceSquared: number;
        check: boolean;
    };
}
//# sourceMappingURL=GeometryMathManager.d.ts.map