"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RestrictionManager_eventManager, _RestrictionManager_geometryMathManager, _RestrictionManager_parentNode, _RestrictionManager_restrictions, _RestrictionManager_settings, _RestrictionManager_uuidGenerator, _RestrictionManager_viewport, _RestrictionManager_closed, _RestrictionManager_keysPressed, _RestrictionManager_keysToggled, _RestrictionManager_restrictionManagerNode, _RestrictionManager_showRestrictionVisualization;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestrictionManager = void 0;
const viewer_1 = require("@shapediver/viewer");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const IRestriction_1 = require("../interfaces/IRestriction");
const EventManager_1 = require("./EventManager");
const GeometryMathManager_1 = require("./GeometryMathManager");
const CameraPlaneRestriction_1 = require("./restrictions/camera_plane/CameraPlaneRestriction");
const GeometryRestriction_1 = require("./restrictions/geometry/GeometryRestriction");
const LineRestriction_1 = require("./restrictions/line/LineRestriction");
const PlaneRestriction_1 = require("./restrictions/plane/PlaneRestriction");
const PointRestriction_1 = require("./restrictions/point/PointRestriction");
const RestrictionsHelper_1 = require("./restrictions/RestrictionsHelper");
class RestrictionManager {
    // #endregion Properties (11)
    // #region Constructors (1)
    constructor(viewport, parentNode = viewer_1.sceneTree.root, restrictions, settings) {
        // #region Properties (11)
        _RestrictionManager_eventManager.set(this, void 0);
        _RestrictionManager_geometryMathManager.set(this, void 0);
        _RestrictionManager_parentNode.set(this, void 0);
        _RestrictionManager_restrictions.set(this, {});
        _RestrictionManager_settings.set(this, {
            distanceLabels: true,
            distanceMultiplicationFactor: 2,
            lines: {
                color: "#0d44f0",
            },
            pointLabels: false,
            points: {
                size_0: 15,
                size_1: 20,
                size_2: 15,
                size_3: 20,
                size_4: 15,
                size_5: 20,
                color_0: "#0d44f0",
                color_1: "#197aeb",
                color_2: "#9e27d8",
                color_3: "#bc47fd",
                color_4: "#00ff78",
                color_5: "#00ff78",
            },
        });
        _RestrictionManager_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);
        _RestrictionManager_viewport.set(this, void 0);
        _RestrictionManager_closed.set(this, false);
        _RestrictionManager_keysPressed.set(this, {});
        _RestrictionManager_keysToggled.set(this, {});
        _RestrictionManager_restrictionManagerNode.set(this, void 0);
        _RestrictionManager_showRestrictionVisualization.set(this, false);
        __classPrivateFieldSet(this, _RestrictionManager_viewport, viewport, "f");
        __classPrivateFieldSet(this, _RestrictionManager_parentNode, parentNode, "f");
        __classPrivateFieldSet(this, _RestrictionManager_restrictionManagerNode, new viewer_shared_node_tree_1.TreeNode("RestrictionManager"), "f");
        __classPrivateFieldGet(this, _RestrictionManager_parentNode, "f").addChild(__classPrivateFieldGet(this, _RestrictionManager_restrictionManagerNode, "f"));
        __classPrivateFieldGet(this, _RestrictionManager_parentNode, "f").updateVersion(false, false);
        if (settings)
            __classPrivateFieldSet(this, _RestrictionManager_settings, settings, "f");
        __classPrivateFieldSet(this, _RestrictionManager_geometryMathManager, new GeometryMathManager_1.GeometryMathManager(__classPrivateFieldGet(this, _RestrictionManager_viewport, "f"), __classPrivateFieldGet(this, _RestrictionManager_settings, "f")), "f");
        __classPrivateFieldSet(this, _RestrictionManager_eventManager, new EventManager_1.EventManager(__classPrivateFieldGet(this, _RestrictionManager_viewport, "f"), {
            onDown: this.onDown.bind(this),
            onUp: this.onUp.bind(this),
            onOut: this.onOut.bind(this),
            onMove: this.onMove.bind(this),
            onKeyDown: this.onKeyDown.bind(this),
            onKeyUp: this.onKeyUp.bind(this),
        }), "f");
        if (restrictions) {
            for (const r of restrictions) {
                this.addRestriction(r);
            }
        }
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (4)
    get closed() {
        return __classPrivateFieldGet(this, _RestrictionManager_closed, "f");
    }
    get restrictions() {
        return __classPrivateFieldGet(this, _RestrictionManager_restrictions, "f");
    }
    get showRestrictionVisualization() {
        return __classPrivateFieldGet(this, _RestrictionManager_showRestrictionVisualization, "f");
    }
    set showRestrictionVisualization(value) {
        __classPrivateFieldSet(this, _RestrictionManager_showRestrictionVisualization, value, "f");
        for (const restriction of Object.values(__classPrivateFieldGet(this, _RestrictionManager_restrictions, "f"))) {
            restriction.showVisualization = value;
            for (const snapRestriction of Object.values(restriction.snapRestrictions)) {
                snapRestriction.showVisualization = value;
            }
        }
    }
    // #endregion Public Getters And Setters (4)
    // #region Public Methods (6)
    addRestriction(properties) {
        const token = properties.id || __classPrivateFieldGet(this, _RestrictionManager_uuidGenerator, "f").create();
        let restriction;
        if (properties.type === IRestriction_1.RESTRICTION_TYPE.PLANE) {
            restriction = new PlaneRestriction_1.PlaneRestriction(__classPrivateFieldGet(this, _RestrictionManager_viewport, "f"), __classPrivateFieldGet(this, _RestrictionManager_geometryMathManager, "f"), __classPrivateFieldGet(this, _RestrictionManager_restrictionManagerNode, "f"), token, __classPrivateFieldGet(this, _RestrictionManager_settings, "f"), properties);
        }
        else if (properties.type === IRestriction_1.RESTRICTION_TYPE.GEOMETRY) {
            restriction = new GeometryRestriction_1.GeometryRestriction(__classPrivateFieldGet(this, _RestrictionManager_viewport, "f"), __classPrivateFieldGet(this, _RestrictionManager_geometryMathManager, "f"), __classPrivateFieldGet(this, _RestrictionManager_restrictionManagerNode, "f"), token, __classPrivateFieldGet(this, _RestrictionManager_settings, "f"), properties);
        }
        else if (properties.type === IRestriction_1.RESTRICTION_TYPE.CAMERA_PLANE) {
            restriction = new CameraPlaneRestriction_1.CameraPlaneRestriction(__classPrivateFieldGet(this, _RestrictionManager_viewport, "f"), __classPrivateFieldGet(this, _RestrictionManager_geometryMathManager, "f"), __classPrivateFieldGet(this, _RestrictionManager_restrictionManagerNode, "f"), token, __classPrivateFieldGet(this, _RestrictionManager_settings, "f"), properties);
        }
        else if (properties.type === IRestriction_1.RESTRICTION_TYPE.POINT) {
            restriction = new PointRestriction_1.PointRestriction(__classPrivateFieldGet(this, _RestrictionManager_viewport, "f"), __classPrivateFieldGet(this, _RestrictionManager_geometryMathManager, "f"), __classPrivateFieldGet(this, _RestrictionManager_restrictionManagerNode, "f"), token, __classPrivateFieldGet(this, _RestrictionManager_settings, "f"), properties);
        }
        else if (properties.type === IRestriction_1.RESTRICTION_TYPE.LINE) {
            restriction = new LineRestriction_1.LineRestriction(__classPrivateFieldGet(this, _RestrictionManager_viewport, "f"), __classPrivateFieldGet(this, _RestrictionManager_geometryMathManager, "f"), __classPrivateFieldGet(this, _RestrictionManager_restrictionManagerNode, "f"), token, __classPrivateFieldGet(this, _RestrictionManager_settings, "f"), properties);
        }
        if (restriction) {
            __classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")[token] = restriction;
            return token;
        }
        return;
    }
    close() {
        __classPrivateFieldSet(this, _RestrictionManager_closed, true, "f");
        __classPrivateFieldGet(this, _RestrictionManager_parentNode, "f").removeChild(__classPrivateFieldGet(this, _RestrictionManager_restrictionManagerNode, "f"));
        __classPrivateFieldGet(this, _RestrictionManager_parentNode, "f").updateVersion(false, false);
        __classPrivateFieldGet(this, _RestrictionManager_eventManager, "f").close();
        __classPrivateFieldGet(this, _RestrictionManager_geometryMathManager, "f").close();
        Object.keys(__classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")).forEach((key) => this.removeRestriction(key));
    }
    getPressedKeys() {
        return Object.keys(__classPrivateFieldGet(this, _RestrictionManager_keysPressed, "f")).filter((key) => __classPrivateFieldGet(this, _RestrictionManager_keysPressed, "f")[key] === true);
    }
    getToggleKeys() {
        return Object.keys(__classPrivateFieldGet(this, _RestrictionManager_keysToggled, "f")).filter((key) => __classPrivateFieldGet(this, _RestrictionManager_keysToggled, "f")[key] === true);
    }
    getRestriction(token) {
        return __classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")[token];
    }
    rayTrace(ray, metaData) {
        const restrictionResults = [];
        metaData.pressedKeys = this.getPressedKeys();
        metaData.toggledKeys = this.getToggleKeys();
        for (const restrictionId in __classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")) {
            const restriction = __classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")[restrictionId];
            const hit = restriction.rayTrace(ray, metaData);
            if (!hit)
                continue;
            const distanceSquared = hit.distanceOriginToClosestIntersectionPointSquared;
            if (distanceSquared >= Infinity)
                continue;
            restrictionResults.push(hit);
        }
        if (restrictionResults.length === 0)
            return;
        // first, sort the results by distance
        restrictionResults.sort((a, b) => a.distanceOriginToClosestIntersectionPointSquared -
            b.distanceOriginToClosestIntersectionPointSquared);
        /**
         * We iterate over the results and check if the restriction with the higher priority has a radius
         * and if the hit of the restriction with the higher priority is within the radius of the restriction with the lower priority.
         *
         * If this is the case, we set the restriction with the higher priority as the hit restriction.
         */
        let restrictionResult = restrictionResults[0];
        for (const result of restrictionResults) {
            // if the priority of the restriction is higher than the priority of the restriction that is currently hit
            if (result.restriction.priority >
                restrictionResult.restriction.priority) {
                // check if the closest point of the restriction with the higher priority is within the radius of the restriction with the lower priority
                const hitHigherPriority = result.closestIntersectionPoint;
                if (restrictionResult.restriction instanceof PointRestriction_1.PointRestriction ||
                    restrictionResult.restriction instanceof LineRestriction_1.LineRestriction) {
                    if (restrictionResult.restriction.isWithinRadius(hitHigherPriority)) {
                        restrictionResult = result;
                    }
                }
            }
            else if (result.restriction.priority ===
                restrictionResult.restriction.priority) {
                // if the priority is the same, we check the distance id the type is a point or line restriction
                if (result.restriction instanceof PointRestriction_1.PointRestriction ||
                    result.restriction instanceof LineRestriction_1.LineRestriction) {
                    if (result.distanceClosestPointToTargetPointSquared <
                        restrictionResult.distanceClosestPointToTargetPointSquared) {
                        restrictionResult = result;
                    }
                }
            }
        }
        // if the restriction is hideable, we check if the closest restriction is actually hidden
        if (restrictionResult.restriction.hideable) {
            // create a filter to check if the node is hidden or is not fully opaque
            const filter = (node, geometryData) => {
                if (node.visible === false)
                    return false;
                if (geometryData &&
                    geometryData.material &&
                    geometryData.material.opacity < 1.0)
                    return false;
                return true;
            };
            // check if the closest restriction is actually hidden
            const sceneRayTrace = __classPrivateFieldGet(this, _RestrictionManager_viewport, "f").raytraceScene(ray.origin, ray.direction, [filter]);
            if (sceneRayTrace.length > 0) {
                const squaredDistanceSceneRayTrace = sceneRayTrace[0].distance * sceneRayTrace[0].distance;
                if (squaredDistanceSceneRayTrace <
                    restrictionResult.distanceOriginToClosestIntersectionPointSquared) {
                    // the second check is to make sure that the geometry data of the geometry restriction and the scene ray trace is available
                    if (restrictionResult.restriction.type !==
                        IRestriction_1.RESTRICTION_TYPE.GEOMETRY ||
                        (restrictionResult.restriction.type ===
                            IRestriction_1.RESTRICTION_TYPE.GEOMETRY &&
                            (!restrictionResult.restrictionIntersectionData ||
                                !sceneRayTrace[0].data)))
                        return;
                    const geometryRestrictionIntersectionData = restrictionResult.restrictionIntersectionData;
                    // it is NOT the same geometry
                    if (!(geometryRestrictionIntersectionData.geometryData
                        .id === sceneRayTrace[0].data.id &&
                        geometryRestrictionIntersectionData.geometryData
                            .version === sceneRayTrace[0].data.version))
                        return;
                }
            }
        }
        // deactivate the visualization of all restrictions that are not hit
        for (const restriction of Object.values(__classPrivateFieldGet(this, _RestrictionManager_restrictions, "f"))) {
            if (restrictionResult &&
                restriction !== restrictionResult.restriction) {
                for (const snapRestriction of Object.values(restriction.snapRestrictions)) {
                    snapRestriction.active = false;
                }
            }
        }
        if ((0, IRestriction_1.isDraggingRestriction)(metaData)) {
            const { matrix, dragAnchor } = (0, RestrictionsHelper_1.calculateDragMatrix)(restrictionResult.targetPoint, restrictionResult.restriction.rotation, metaData.dragOrigin, metaData.dragAnchors, restrictionResult.closestIntersectionPoint);
            return {
                restriction: restrictionResult.restriction,
                point: restrictionResult.targetPoint,
                closestPointOnRay: restrictionResult.closestIntersectionPoint,
                distanceSquared: restrictionResult.distanceOriginToClosestIntersectionPointSquared,
                dragAnchor: dragAnchor,
                transformation: matrix,
            };
        }
        else {
            return {
                restriction: restrictionResult.restriction,
                point: restrictionResult.targetPoint,
                closestPointOnRay: restrictionResult.closestIntersectionPoint,
                distanceSquared: restrictionResult.distanceOriginToClosestIntersectionPointSquared,
            };
        }
    }
    removeRestriction(token) {
        if (__classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")[token]) {
            Object.values(__classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")[token].snapRestrictions).forEach((r) => r.removeVisualization());
            __classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")[token].removeVisualization();
            delete __classPrivateFieldGet(this, _RestrictionManager_restrictions, "f")[token];
            return true;
        }
        return false;
    }
    // #endregion Public Methods (6)
    // #region Private Methods (6)
    onDown(event, ray) {
        if (this.closed)
            return;
    }
    onKeyDown(event) {
        if (this.closed)
            return;
        __classPrivateFieldGet(this, _RestrictionManager_keysPressed, "f")[event.key] = true;
        if (__classPrivateFieldGet(this, _RestrictionManager_keysToggled, "f")[event.key] === undefined)
            __classPrivateFieldGet(this, _RestrictionManager_keysToggled, "f")[event.key] = true;
        else
            __classPrivateFieldGet(this, _RestrictionManager_keysToggled, "f")[event.key] = !__classPrivateFieldGet(this, _RestrictionManager_keysToggled, "f")[event.key];
    }
    onKeyUp(event) {
        if (this.closed)
            return;
        __classPrivateFieldGet(this, _RestrictionManager_keysPressed, "f")[event.key] = false;
    }
    onMove(event, ray) {
        if (this.closed)
            return;
    }
    onOut() {
        if (this.closed)
            return;
    }
    onUp() {
        if (this.closed)
            return;
    }
}
exports.RestrictionManager = RestrictionManager;
_RestrictionManager_eventManager = new WeakMap(), _RestrictionManager_geometryMathManager = new WeakMap(), _RestrictionManager_parentNode = new WeakMap(), _RestrictionManager_restrictions = new WeakMap(), _RestrictionManager_settings = new WeakMap(), _RestrictionManager_uuidGenerator = new WeakMap(), _RestrictionManager_viewport = new WeakMap(), _RestrictionManager_closed = new WeakMap(), _RestrictionManager_keysPressed = new WeakMap(), _RestrictionManager_keysToggled = new WeakMap(), _RestrictionManager_restrictionManagerNode = new WeakMap(), _RestrictionManager_showRestrictionVisualization = new WeakMap();
//# sourceMappingURL=RestrictionManager.js.map