import { IViewportApi } from "@shapediver/viewer";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { IRay } from "@shapediver/viewer.shared.types";
import { DraggingRestrictionMetaData, DrawingRestrictionMetaData, IRestriction, RayTraceResult, RestrictionProperties } from "../interfaces/IRestriction";
import { IRestrictionManager } from "../interfaces/IRestrictionManager";
import { IVisualizationSettings } from "../interfaces/IVisualizationSettings";
export declare class RestrictionManager implements IRestrictionManager {
    #private;
    constructor(viewport: IViewportApi, parentNode?: ITreeNode, restrictions?: RestrictionProperties[], settings?: IVisualizationSettings);
    get closed(): boolean;
    get restrictions(): {
        [token: string]: IRestriction;
    };
    get showRestrictionVisualization(): boolean;
    set showRestrictionVisualization(value: boolean);
    addRestriction(properties: RestrictionProperties): string | undefined;
    close(): void;
    getPressedKeys(): string[];
    getToggleKeys(): string[];
    getRestriction(token: string): IRestriction | undefined;
    rayTrace(ray: IRay, metaData: DrawingRestrictionMetaData | DraggingRestrictionMetaData): RayTraceResult | undefined;
    removeRestriction(token: string): boolean;
    private onDown;
    private onKeyDown;
    private onKeyUp;
    private onMove;
    private onOut;
    private onUp;
}
//# sourceMappingURL=RestrictionManager.d.ts.map