"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaterialLoader = void 0;
const viewer_data_engine_material_engine_1 = require("@shapediver/viewer.data-engine.material-engine");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const gl_matrix_1 = require("gl-matrix");
const GLTFLoader_1 = require("../GLTFLoader");
class MaterialLoader {
    // #endregion Properties (4)
    // #region Constructors (1)
    constructor(_content, _textureLoader) {
        this._content = _content;
        this._textureLoader = _textureLoader;
        // #region Properties (4)
        this._converter = viewer_shared_services_1.Converter.instance;
        this._materialEngine = viewer_data_engine_material_engine_1.MaterialEngine.instance;
        this._loaded = {};
    }
    // #endregion Constructors (1)
    // #region Public Methods (2)
    getMaterial(materialId) {
        if (!this._content.materials)
            throw new Error("MaterialLoader.getMaterial: Materials not available.");
        if (!this._content.materials[materialId])
            throw new Error("MaterialLoader.getMaterial: Material not available.");
        if (!this._loaded[materialId])
            throw new Error("MaterialLoader.getMaterial: Material not loaded.");
        return this._loaded[materialId];
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            this._loaded = {};
            if (!this._content.materials)
                return;
            const promises = [];
            for (let i = 0; i < this._content.materials.length; i++) {
                const materialId = i;
                const material = this._content.materials[materialId];
                const materialExtensions = material.extensions || {};
                const materialDataProperties = {};
                if (material.name !== undefined)
                    materialDataProperties.name = material.name;
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.SHAPEDIVER_MATERIALS_PRESET]) {
                    const materialPreset = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.SHAPEDIVER_MATERIALS_PRESET];
                    promises.push(new Promise((resolve, reject) => {
                        try {
                            this._materialEngine
                                .loadPresetMaterial(materialPreset.materialpreset)
                                .then((materialData) => {
                                materialData.name = material.name;
                                materialData.color = materialPreset.color;
                                this._loaded[materialId] = materialData;
                                resolve();
                            })
                                .catch(reject);
                        }
                        catch (e) {
                            reject(e);
                        }
                    }));
                    continue;
                }
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS]) {
                    const pbrSpecularGlossiness = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS];
                    const specularGlossinessMaterialDataProperties = materialDataProperties;
                    specularGlossinessMaterialDataProperties.color = "#ffffff";
                    specularGlossinessMaterialDataProperties.opacity = 1.0;
                    if (pbrSpecularGlossiness.diffuseFactor !== undefined) {
                        specularGlossinessMaterialDataProperties.color = [
                            pbrSpecularGlossiness.diffuseFactor[0] * 255,
                            pbrSpecularGlossiness.diffuseFactor[1] * 255,
                            pbrSpecularGlossiness.diffuseFactor[2] * 255,
                        ];
                        specularGlossinessMaterialDataProperties.opacity =
                            pbrSpecularGlossiness.diffuseFactor[3];
                    }
                    if (pbrSpecularGlossiness.diffuseTexture !== undefined) {
                        const diffuseTextureOptions = pbrSpecularGlossiness.diffuseTexture.extensions &&
                            pbrSpecularGlossiness.diffuseTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? pbrSpecularGlossiness.diffuseTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (pbrSpecularGlossiness.diffuseTexture.texCoord !==
                            undefined)
                            diffuseTextureOptions.texCoord =
                                pbrSpecularGlossiness.diffuseTexture.texCoord;
                        specularGlossinessMaterialDataProperties.map = this.loadMap(pbrSpecularGlossiness.diffuseTexture.index, diffuseTextureOptions);
                    }
                    specularGlossinessMaterialDataProperties.emissiveness =
                        "#000000";
                    specularGlossinessMaterialDataProperties.glossiness =
                        pbrSpecularGlossiness.glossinessFactor !== undefined
                            ? pbrSpecularGlossiness.glossinessFactor
                            : 1.0;
                    specularGlossinessMaterialDataProperties.specular = "#ffffff";
                    if (pbrSpecularGlossiness.specularFactor !== undefined) {
                        specularGlossinessMaterialDataProperties.specular = [
                            pbrSpecularGlossiness.specularFactor[0] * 255,
                            pbrSpecularGlossiness.specularFactor[1] * 255,
                            pbrSpecularGlossiness.specularFactor[2] * 255,
                        ];
                    }
                    if (pbrSpecularGlossiness.specularGlossinessTexture !==
                        undefined) {
                        const specularGlossinessTextureOptions = pbrSpecularGlossiness.specularGlossinessTexture
                            .extensions &&
                            pbrSpecularGlossiness.specularGlossinessTexture
                                .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? pbrSpecularGlossiness.specularGlossinessTexture
                                .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (pbrSpecularGlossiness.specularGlossinessTexture
                            .texCoord !== undefined)
                            specularGlossinessTextureOptions.texCoord =
                                pbrSpecularGlossiness.specularGlossinessTexture.texCoord;
                        specularGlossinessMaterialDataProperties.specularGlossinessMap =
                            this.loadMap(pbrSpecularGlossiness.specularGlossinessTexture
                                .index, specularGlossinessTextureOptions);
                    }
                }
                else if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_UNLIT]) {
                    const unlitMaterialDataProperties = materialDataProperties;
                    unlitMaterialDataProperties.color = "#ffffff";
                    unlitMaterialDataProperties.opacity = 1.0;
                    if (material.pbrMetallicRoughness !== undefined) {
                        if (material.pbrMetallicRoughness.baseColorFactor !==
                            undefined) {
                            unlitMaterialDataProperties.color = [
                                material.pbrMetallicRoughness.baseColorFactor[0] *
                                    255,
                                material.pbrMetallicRoughness.baseColorFactor[1] *
                                    255,
                                material.pbrMetallicRoughness.baseColorFactor[2] *
                                    255,
                            ];
                            unlitMaterialDataProperties.opacity =
                                material.pbrMetallicRoughness.baseColorFactor[3];
                        }
                        if (material.pbrMetallicRoughness.baseColorTexture !==
                            undefined) {
                            const baseColorTextureOptions = material.pbrMetallicRoughness.baseColorTexture
                                .extensions &&
                                material.pbrMetallicRoughness.baseColorTexture
                                    .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                                ? material.pbrMetallicRoughness.baseColorTexture
                                    .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                                : {};
                            if (material.pbrMetallicRoughness.baseColorTexture
                                .texCoord !== undefined)
                                baseColorTextureOptions.texCoord =
                                    material.pbrMetallicRoughness.baseColorTexture.texCoord;
                            unlitMaterialDataProperties.map = this.loadMap(material.pbrMetallicRoughness.baseColorTexture
                                .index, baseColorTextureOptions);
                        }
                    }
                }
                else {
                    const standardMaterialDataProperties = materialDataProperties;
                    if (material.pbrMetallicRoughness !== undefined) {
                        standardMaterialDataProperties.color = "#ffffff";
                        if (material.pbrMetallicRoughness.baseColorFactor !==
                            undefined) {
                            standardMaterialDataProperties.color = [
                                material.pbrMetallicRoughness.baseColorFactor[0] *
                                    255,
                                material.pbrMetallicRoughness.baseColorFactor[1] *
                                    255,
                                material.pbrMetallicRoughness.baseColorFactor[2] *
                                    255,
                            ];
                            standardMaterialDataProperties.opacity =
                                material.pbrMetallicRoughness.baseColorFactor[3];
                        }
                        if (material.pbrMetallicRoughness.baseColorTexture !==
                            undefined) {
                            const baseColorTextureOptions = material.pbrMetallicRoughness.baseColorTexture
                                .extensions &&
                                material.pbrMetallicRoughness.baseColorTexture
                                    .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                                ? material.pbrMetallicRoughness.baseColorTexture
                                    .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                                : {};
                            if (material.pbrMetallicRoughness.baseColorTexture
                                .texCoord !== undefined)
                                baseColorTextureOptions.texCoord =
                                    material.pbrMetallicRoughness.baseColorTexture.texCoord;
                            standardMaterialDataProperties.map = this.loadMap(material.pbrMetallicRoughness.baseColorTexture
                                .index, baseColorTextureOptions);
                        }
                        if (material.pbrMetallicRoughness.metallicFactor !==
                            undefined) {
                            standardMaterialDataProperties.metalness =
                                material.pbrMetallicRoughness.metallicFactor;
                        }
                        if (material.pbrMetallicRoughness.roughnessFactor !==
                            undefined) {
                            standardMaterialDataProperties.roughness =
                                material.pbrMetallicRoughness.roughnessFactor;
                        }
                        if (material.pbrMetallicRoughness
                            .metallicRoughnessTexture !== undefined) {
                            const metallicRoughnessTextureOptions = material.pbrMetallicRoughness
                                .metallicRoughnessTexture.extensions &&
                                material.pbrMetallicRoughness
                                    .metallicRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                                ? material.pbrMetallicRoughness
                                    .metallicRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                                : {};
                            if (material.pbrMetallicRoughness
                                .metallicRoughnessTexture.texCoord !== undefined)
                                metallicRoughnessTextureOptions.texCoord =
                                    material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord;
                            standardMaterialDataProperties.metalnessRoughnessMap =
                                this.loadMap(material.pbrMetallicRoughness
                                    .metallicRoughnessTexture.index, metallicRoughnessTextureOptions);
                        }
                    }
                }
                /**
                 * Loading of the general properties
                 */
                if (material.normalTexture !== undefined) {
                    const normalTextureOptions = material.normalTexture.extensions &&
                        material.normalTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                        ? material.normalTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                        : {};
                    if (material.normalTexture.texCoord !== undefined)
                        normalTextureOptions.texCoord =
                            material.normalTexture.texCoord;
                    materialDataProperties.normalMap = this.loadMap(material.normalTexture.index, normalTextureOptions);
                    materialDataProperties.normalScale = 1;
                    if (material.normalTexture.scale !== undefined) {
                        materialDataProperties.normalScale =
                            material.normalTexture.scale;
                    }
                }
                if (material.occlusionTexture !== undefined) {
                    const occlusionTextureOptions = material.occlusionTexture.extensions &&
                        material.occlusionTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                        ? material.occlusionTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                        : {};
                    if (material.occlusionTexture.texCoord !== undefined)
                        occlusionTextureOptions.texCoord =
                            material.occlusionTexture.texCoord;
                    materialDataProperties.aoMap = this.loadMap(material.occlusionTexture.index, occlusionTextureOptions);
                    if (material.occlusionTexture.strength !== undefined) {
                        materialDataProperties.aoMapIntensity =
                            material.occlusionTexture.strength;
                    }
                }
                if (material.emissiveTexture !== undefined) {
                    const emissiveTextureOptions = material.emissiveTexture.extensions &&
                        material.emissiveTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                        ? material.emissiveTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                        : {};
                    if (material.emissiveTexture.texCoord !== undefined)
                        emissiveTextureOptions.texCoord =
                            material.emissiveTexture.texCoord;
                    materialDataProperties.emissiveMap = this.loadMap(material.emissiveTexture.index, emissiveTextureOptions);
                }
                if (material.emissiveFactor !== undefined) {
                    materialDataProperties.emissiveness = [
                        material.emissiveFactor[0] * 255,
                        material.emissiveFactor[1] * 255,
                        material.emissiveFactor[2] * 255,
                    ];
                }
                if (material.alphaMode !== undefined) {
                    materialDataProperties.alphaMode =
                        material.alphaMode.toLowerCase() === viewer_shared_types_1.MATERIAL_ALPHA.MASK
                            ? viewer_shared_types_1.MATERIAL_ALPHA.MASK
                            : material.alphaMode.toLowerCase() ===
                                viewer_shared_types_1.MATERIAL_ALPHA.BLEND
                                ? viewer_shared_types_1.MATERIAL_ALPHA.BLEND
                                : viewer_shared_types_1.MATERIAL_ALPHA.OPAQUE;
                    if (materialDataProperties.alphaMode === viewer_shared_types_1.MATERIAL_ALPHA.MASK) {
                        materialDataProperties.alphaCutoff =
                            material.alphaCutoff !== undefined
                                ? material.alphaCutoff
                                : 0.5;
                    }
                }
                if (material.alphaCutoff !== undefined) {
                    materialDataProperties.alphaCutoff = material.alphaCutoff;
                }
                if (material.doubleSided !== undefined) {
                    materialDataProperties.side = material.doubleSided
                        ? viewer_shared_types_1.MATERIAL_SIDE.DOUBLE
                        : viewer_shared_types_1.MATERIAL_SIDE.FRONT;
                }
                /**
                 * Early exit for specular glossiness and unlit materials
                 */
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS]) {
                    const specularGlossinessMaterialDataProperties = materialDataProperties;
                    const materialData = new viewer_shared_types_1.MaterialSpecularGlossinessData(specularGlossinessMaterialDataProperties);
                    this._loaded[materialId] = materialData;
                    continue;
                }
                else if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_UNLIT]) {
                    const unlitMaterialDataProperties = materialDataProperties;
                    const materialData = new viewer_shared_types_1.MaterialUnlitData(unlitMaterialDataProperties);
                    this._loaded[materialId] = materialData;
                    continue;
                }
                const standardMaterialDataProperties = materialDataProperties;
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {
                    const clearcoatExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_CLEARCOAT];
                    if (clearcoatExtension.clearcoatFactor !== undefined) {
                        standardMaterialDataProperties.clearcoat =
                            clearcoatExtension.clearcoatFactor;
                    }
                    if (clearcoatExtension.clearcoatTexture !== undefined) {
                        const clearcoatTextureOptions = clearcoatExtension.clearcoatTexture.extensions &&
                            clearcoatExtension.clearcoatTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? clearcoatExtension.clearcoatTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (clearcoatExtension.clearcoatTexture.texCoord !==
                            undefined)
                            clearcoatTextureOptions.texCoord =
                                clearcoatExtension.clearcoatTexture.texCoord;
                        standardMaterialDataProperties.clearcoatMap = this.loadMap(clearcoatExtension.clearcoatTexture.index, clearcoatTextureOptions);
                    }
                    if (clearcoatExtension.clearcoatRoughnessFactor !== undefined) {
                        standardMaterialDataProperties.clearcoatRoughness =
                            clearcoatExtension.clearcoatRoughnessFactor;
                    }
                    if (clearcoatExtension.clearcoatRoughnessTexture !== undefined) {
                        const clearcoatRoughnessTextureOptions = clearcoatExtension.clearcoatRoughnessTexture
                            .extensions &&
                            clearcoatExtension.clearcoatRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? clearcoatExtension.clearcoatRoughnessTexture
                                .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (clearcoatExtension.clearcoatRoughnessTexture
                            .texCoord !== undefined)
                            clearcoatRoughnessTextureOptions.texCoord =
                                clearcoatExtension.clearcoatRoughnessTexture.texCoord;
                        standardMaterialDataProperties.clearcoatRoughnessMap =
                            this.loadMap(clearcoatExtension.clearcoatRoughnessTexture.index, clearcoatRoughnessTextureOptions);
                    }
                    if (clearcoatExtension.clearcoatNormalTexture !== undefined) {
                        const clearcoatNormalTextureOptions = clearcoatExtension.clearcoatNormalTexture.extensions &&
                            clearcoatExtension.clearcoatNormalTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? clearcoatExtension.clearcoatNormalTexture
                                .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (clearcoatExtension.clearcoatNormalTexture.texCoord !==
                            undefined)
                            clearcoatNormalTextureOptions.texCoord =
                                clearcoatExtension.clearcoatNormalTexture.texCoord;
                        standardMaterialDataProperties.clearcoatNormalMap =
                            this.loadMap(clearcoatExtension.clearcoatNormalTexture.index, clearcoatNormalTextureOptions);
                    }
                }
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_IOR]) {
                    const iorExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_IOR];
                    if (iorExtension.ior !== undefined) {
                        standardMaterialDataProperties.ior = iorExtension.ior;
                    }
                }
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_TRANSMISSION]) {
                    const transmissionExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_TRANSMISSION];
                    if (transmissionExtension.transmissionFactor !== undefined) {
                        standardMaterialDataProperties.transmission =
                            transmissionExtension.transmissionFactor;
                    }
                    if (transmissionExtension.transmissionTexture !== undefined) {
                        const transmissionTextureOptions = transmissionExtension.transmissionTexture.extensions &&
                            transmissionExtension.transmissionTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? transmissionExtension.transmissionTexture
                                .extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (transmissionExtension.transmissionTexture.texCoord !==
                            undefined)
                            transmissionTextureOptions.texCoord =
                                transmissionExtension.transmissionTexture.texCoord;
                        standardMaterialDataProperties.transmissionMap =
                            this.loadMap(transmissionExtension.transmissionTexture.index, transmissionTextureOptions);
                    }
                }
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_VOLUME]) {
                    const volumeExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_VOLUME];
                    if (volumeExtension.thicknessFactor !== undefined) {
                        standardMaterialDataProperties.thickness =
                            volumeExtension.thicknessFactor;
                    }
                    if (volumeExtension.thicknessTexture !== undefined) {
                        const thicknessTextureOptions = volumeExtension.thicknessTexture.extensions &&
                            volumeExtension.thicknessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? volumeExtension.thicknessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (volumeExtension.thicknessTexture.texCoord !== undefined)
                            thicknessTextureOptions.texCoord =
                                volumeExtension.thicknessTexture.texCoord;
                        standardMaterialDataProperties.thicknessMap = this.loadMap(volumeExtension.thicknessTexture.index, thicknessTextureOptions);
                    }
                    if (volumeExtension.attenuationDistance !== undefined) {
                        standardMaterialDataProperties.attenuationDistance =
                            volumeExtension.attenuationDistance;
                    }
                    if (volumeExtension.attenuationColor !== undefined) {
                        standardMaterialDataProperties.attenuationColor = [
                            volumeExtension.attenuationColor[0] * 255,
                            volumeExtension.attenuationColor[1] * 255,
                            volumeExtension.attenuationColor[2] * 255,
                        ];
                    }
                }
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SHEEN]) {
                    const sheenExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SHEEN];
                    standardMaterialDataProperties.sheen = 1.0;
                    if (sheenExtension.sheenColorFactor !== undefined) {
                        standardMaterialDataProperties.sheenColor = [
                            sheenExtension.sheenColorFactor[0] * 255,
                            sheenExtension.sheenColorFactor[1] * 255,
                            sheenExtension.sheenColorFactor[2] * 255,
                        ];
                    }
                    if (sheenExtension.sheenRoughnessFactor !== undefined) {
                        standardMaterialDataProperties.sheenRoughness =
                            sheenExtension.sheenRoughnessFactor;
                    }
                    if (sheenExtension.sheenColorTexture !== undefined) {
                        const sheenColorTextureOptions = sheenExtension.sheenColorTexture.extensions &&
                            sheenExtension.sheenColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? sheenExtension.sheenColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (sheenExtension.sheenColorTexture.texCoord !== undefined)
                            sheenColorTextureOptions.texCoord =
                                sheenExtension.sheenColorTexture.texCoord;
                        standardMaterialDataProperties.sheenColorMap = this.loadMap(sheenExtension.sheenColorTexture.index, sheenColorTextureOptions);
                    }
                    if (sheenExtension.sheenRoughnessTexture !== undefined) {
                        const sheenRoughnessTextureOptions = sheenExtension.sheenRoughnessTexture.extensions &&
                            sheenExtension.sheenRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? sheenExtension.sheenRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (sheenExtension.sheenRoughnessTexture.texCoord !==
                            undefined)
                            sheenRoughnessTextureOptions.texCoord =
                                sheenExtension.sheenRoughnessTexture.texCoord;
                        standardMaterialDataProperties.sheenRoughnessMap =
                            this.loadMap(sheenExtension.sheenRoughnessTexture.index, sheenRoughnessTextureOptions);
                    }
                }
                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SPECULAR]) {
                    const specularExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SPECULAR];
                    if (specularExtension.specularFactor !== undefined) {
                        standardMaterialDataProperties.specularIntensity =
                            specularExtension.specularFactor;
                    }
                    if (specularExtension.specularColorFactor !== undefined) {
                        standardMaterialDataProperties.specularColor = [
                            specularExtension.specularColorFactor[0] * 255,
                            specularExtension.specularColorFactor[1] * 255,
                            specularExtension.specularColorFactor[2] * 255,
                        ];
                    }
                    if (specularExtension.specularColorTexture !== undefined) {
                        const specularColorTextureOptions = specularExtension.specularColorTexture.extensions &&
                            specularExtension.specularColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? specularExtension.specularColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (specularExtension.specularColorTexture.texCoord !==
                            undefined)
                            specularColorTextureOptions.texCoord =
                                specularExtension.specularColorTexture.texCoord;
                        standardMaterialDataProperties.specularColorMap =
                            this.loadMap(specularExtension.specularColorTexture.index, specularColorTextureOptions);
                    }
                    if (specularExtension.specularTexture !== undefined) {
                        const specularTextureOptions = specularExtension.specularTexture.extensions &&
                            specularExtension.specularTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            ? specularExtension.specularTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM]
                            : {};
                        if (specularExtension.specularTexture.texCoord !== undefined)
                            specularTextureOptions.texCoord =
                                specularExtension.specularTexture.texCoord;
                        standardMaterialDataProperties.specularIntensityMap =
                            this.loadMap(specularExtension.specularTexture.index, specularTextureOptions);
                    }
                }
                const materialData = new viewer_shared_types_1.MaterialStandardData(standardMaterialDataProperties);
                this._loaded[materialId] = materialData;
            }
            yield Promise.all(promises);
        });
    }
    // #endregion Public Methods (2)
    // #region Private Methods (1)
    loadMap(textureId, properties) {
        if (!this._content.textures)
            throw new Error("Textures not available.");
        const texture = this._content.textures[textureId];
        if (!this._content.images)
            throw new Error("Images not available.");
        const sampler = this._content.samplers &&
            texture.sampler &&
            this._content.samplers[texture.sampler]
            ? this._content.samplers[texture.sampler]
            : {};
        const loadedTexture = this._textureLoader.getTexture(textureId);
        if (!loadedTexture)
            return;
        return new viewer_shared_types_1.MapData(loadedTexture.image, {
            blob: loadedTexture.blob,
            wrapS: sampler.wrapS,
            wrapT: sampler.wrapT,
            minFilter: sampler.minFilter,
            magFilter: sampler.magFilter,
            offset: properties && properties.offset
                ? gl_matrix_1.vec2.fromValues(properties.offset[0], properties.offset[1])
                : gl_matrix_1.vec2.create(),
            repeat: properties && properties.scale
                ? gl_matrix_1.vec2.fromValues(properties.scale[0], properties.scale[1])
                : gl_matrix_1.vec2.fromValues(1, 1),
            rotation: properties && properties.rotation !== undefined
                ? properties.rotation
                : 0,
            texCoord: properties === null || properties === void 0 ? void 0 : properties.texCoord,
            flipY: false,
        });
    }
}
exports.MaterialLoader = MaterialLoader;
//# sourceMappingURL=MaterialLoader.js.map