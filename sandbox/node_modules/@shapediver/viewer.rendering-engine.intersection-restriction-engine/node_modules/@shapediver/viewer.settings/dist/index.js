"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.latestVersion = exports.evaluateSettingsVersion = exports.validate = exports.convert = exports.previousVersion = exports.DefaultsV5 = exports.DefaultsV4_1 = exports.DefaultsV4_0 = exports.DefaultsV3_4 = exports.DefaultsV3_3 = exports.DefaultsV3_2 = exports.DefaultsV3_1 = exports.DefaultsV3 = exports.DefaultsV2 = exports.DefaultsV1 = void 0;
const Defaults_1 = require("./versions/v1/Defaults");
Object.defineProperty(exports, "DefaultsV1", { enumerable: true, get: function () { return Defaults_1.Defaults; } });
const Validator_1 = require("./versions/v1/Validator");
const Defaults_2 = require("./versions/v2/Defaults");
Object.defineProperty(exports, "DefaultsV2", { enumerable: true, get: function () { return Defaults_2.Defaults; } });
const Validator_2 = require("./versions/v2/Validator");
const Converter_1 = require("./versions/v2/Converter");
const Defaults_3 = require("./versions/v3/Defaults");
Object.defineProperty(exports, "DefaultsV3", { enumerable: true, get: function () { return Defaults_3.Defaults; } });
const Validator_3 = require("./versions/v3/Validator");
const Converter_2 = require("./versions/v3/Converter");
const Defaults_4 = require("./versions/v3_1/Defaults");
Object.defineProperty(exports, "DefaultsV3_1", { enumerable: true, get: function () { return Defaults_4.Defaults; } });
const Validator_4 = require("./versions/v3_1/Validator");
const Converter_3 = require("./versions/v3_1/Converter");
const Defaults_5 = require("./versions/v3_2/Defaults");
Object.defineProperty(exports, "DefaultsV3_2", { enumerable: true, get: function () { return Defaults_5.Defaults; } });
const Validator_5 = require("./versions/v3_2/Validator");
const Converter_4 = require("./versions/v3_2/Converter");
const Defaults_6 = require("./versions/v3_3/Defaults");
Object.defineProperty(exports, "DefaultsV3_3", { enumerable: true, get: function () { return Defaults_6.Defaults; } });
const Validator_6 = require("./versions/v3_3/Validator");
const Converter_5 = require("./versions/v3_3/Converter");
const Defaults_7 = require("./versions/v3_4/Defaults");
Object.defineProperty(exports, "DefaultsV3_4", { enumerable: true, get: function () { return Defaults_7.Defaults; } });
const Validator_7 = require("./versions/v3_4/Validator");
const Converter_6 = require("./versions/v3_4/Converter");
const Defaults_8 = require("./versions/v4/Defaults");
Object.defineProperty(exports, "DefaultsV4_0", { enumerable: true, get: function () { return Defaults_8.Defaults; } });
const Validator_8 = require("./versions/v4/Validator");
const Converter_7 = require("./versions/v4/Converter");
const Defaults_9 = require("./versions/v4_1/Defaults");
Object.defineProperty(exports, "DefaultsV4_1", { enumerable: true, get: function () { return Defaults_9.Defaults; } });
const Validator_9 = require("./versions/v4_1/Validator");
const Converter_8 = require("./versions/v4_1/Converter");
const Defaults_10 = require("./versions/v5/Defaults");
Object.defineProperty(exports, "DefaultsV5", { enumerable: true, get: function () { return Defaults_10.Defaults; } });
const Validator_10 = require("./versions/v5/Validator");
const Converter_9 = require("./versions/v5/Converter");
const Validator_11 = require("./versions/v6/Validator");
const Converter_10 = require("./versions/v6/Converter");
const Validator_12 = require("./versions/v6_1/Validator");
const Converter_11 = require("./versions/v6_1/Converter");
exports.previousVersion = ['1.0', '2.0', '3.0', '3.1', '3.2', '3.3', '3.4', '4.0', '4.1', '5.0', '6.0'];
const settingsUtilities = [];
settingsUtilities.push({
    version: '1.0',
    defaults: Defaults_1.Defaults,
    convertToPrevious: s => s,
    convertFromPrevious: s => s,
    validate: Validator_1.validate
});
settingsUtilities.push({
    version: '2.0',
    defaults: Defaults_2.Defaults,
    convertToPrevious: Converter_1.convertToPrevious,
    convertFromPrevious: Converter_1.convertFromPrevious,
    validate: Validator_2.validate
});
settingsUtilities.push({
    version: '3.0',
    defaults: Defaults_3.Defaults,
    convertToPrevious: Converter_2.convertToPrevious,
    convertFromPrevious: Converter_2.convertFromPrevious,
    validate: Validator_3.validate
});
settingsUtilities.push({
    version: '3.1',
    defaults: Defaults_4.Defaults,
    convertToPrevious: Converter_3.convertToPrevious,
    convertFromPrevious: Converter_3.convertFromPrevious,
    validate: Validator_4.validate
});
settingsUtilities.push({
    version: '3.2',
    defaults: Defaults_5.Defaults,
    convertToPrevious: Converter_4.convertToPrevious,
    convertFromPrevious: Converter_4.convertFromPrevious,
    validate: Validator_5.validate
});
settingsUtilities.push({
    version: '3.3',
    defaults: Defaults_6.Defaults,
    convertToPrevious: Converter_5.convertToPrevious,
    convertFromPrevious: Converter_5.convertFromPrevious,
    validate: Validator_6.validate
});
settingsUtilities.push({
    version: '3.4',
    defaults: Defaults_7.Defaults,
    convertToPrevious: Converter_6.convertToPrevious,
    convertFromPrevious: Converter_6.convertFromPrevious,
    validate: Validator_7.validate
});
settingsUtilities.push({
    version: '4.0',
    defaults: Defaults_8.Defaults,
    convertToPrevious: Converter_7.convertToPrevious,
    convertFromPrevious: Converter_7.convertFromPrevious,
    validate: Validator_8.validate
});
settingsUtilities.push({
    version: '4.1',
    defaults: Defaults_9.Defaults,
    convertToPrevious: Converter_8.convertToPrevious,
    convertFromPrevious: Converter_8.convertFromPrevious,
    validate: Validator_9.validate
});
settingsUtilities.push({
    version: '5.0',
    defaults: Defaults_10.Defaults,
    convertToPrevious: Converter_9.convertToPrevious,
    convertFromPrevious: Converter_9.convertFromPrevious,
    validate: Validator_10.validate
});
settingsUtilities.push({
    version: '6.0',
    convertToPrevious: Converter_10.convertToPrevious,
    convertFromPrevious: Converter_10.convertFromPrevious,
    validate: Validator_11.validate
});
settingsUtilities.push({
    version: '6.1',
    convertToPrevious: Converter_11.convertToPrevious,
    convertFromPrevious: Converter_11.convertFromPrevious,
    validate: Validator_12.validate
});
/**
 * Convert the provided settings to the target version provided.
 * The settings object will be validate beforehand, an error will be thrown if the validation was not successful.
 *
 * @param settings
 * @param targetVersion
 * @returns
 */
const convert = (settings, targetVersion) => {
    const original_version = settings.settings_version || '1.0';
    if (original_version === targetVersion)
        return settings;
    const target = settingsUtilities.findIndex(util => { return util.version === targetVersion; });
    const current = settingsUtilities.findIndex(util => { return util.version === original_version; });
    if (target === -1)
        throw new Error('ViewerSettings.convert: Target version not available');
    if (current === -1)
        throw new Error('ViewerSettings.convert: Settings version not available');
    let tempSettings = settings;
    if (target < current) {
        for (let i = current; target < i; i--)
            tempSettings = settingsUtilities[i].convertToPrevious(tempSettings, original_version);
    }
    else {
        for (let i = current + 1; i <= target; i++)
            tempSettings = settingsUtilities[i].convertFromPrevious(tempSettings, original_version);
    }
    return tempSettings;
};
exports.convert = convert;
/**
 * Validate the provided settings. If not target version is specified, an extraction of the version from the settings object is attempted.
 * If the validation is not successful, an error is thrown with the necessary information on why the validation failed.
 *
 * @param settings
 * @param targetVersion
 */
const validate = (settings, targetVersion) => {
    const settings_version = settings.settings_version || '1.0';
    if (targetVersion !== undefined) {
        const index = settingsUtilities.findIndex(util => { return util.version === targetVersion; });
        if (index === -1)
            throw new Error('ViewerSettings.validate: Target version was not found.');
        if (settings_version !== undefined && settings_version !== targetVersion)
            throw new Error('ViewerSettings.validate: The settings do have a different version than the target version.');
        settingsUtilities[index].validate(settings);
    }
    else {
        if (!settings_version)
            throw new Error('ViewerSettings.validate: Settings do not have a version specified.');
        const index = settingsUtilities.findIndex(util => { return util.version === settings_version; });
        settingsUtilities[index].validate(settings);
    }
};
exports.validate = validate;
/**
 * Evaluate which settings version to use by using the viewer version.
 *
 * @param viewerVersion
 * @returns
 */
const evaluateSettingsVersion = (viewerVersion) => {
    // case 1: no version, return 1.0
    if (!viewerVersion || viewerVersion.startsWith('1'))
        return '1.0';
    // case 2: starts with 2, if higher or equal than 2.18.0, return 2.0
    if (viewerVersion.startsWith('2')) {
        const upgradeVersions = viewerVersion
            .split('.')
            .map(item => { var _a; return (_a = item.match(/^\d+/)) === null || _a === void 0 ? void 0 : _a[0]; })
            .filter(Boolean)
            .map(match => parseInt(match));
        if (upgradeVersions[1] >= 18) {
            return '2.0';
        }
        else {
            return '1.0';
        }
    }
    // case 3: starts with 3, return 3.0 or higher
    if (viewerVersion.startsWith('3')) {
        const upgradeVersions = viewerVersion
            .split('.')
            .map(item => { var _a; return (_a = item.match(/^\d+/)) === null || _a === void 0 ? void 0 : _a[0]; })
            .filter(Boolean)
            .map(match => parseInt(match));
        if (upgradeVersions[1] >= 3 && upgradeVersions[2] >= 8) { // starting from 3.3.8.0
            // version 6.0 was never really in use due to a bug in the versioning
            return '6.1';
        }
        else if (upgradeVersions[1] >= 3) { // starting from 3.3.0.0
            return '5.0';
        }
        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 11)) { // starting from 3.2.11.0
            return '4.1';
        }
        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 10)) { // starting from 3.2.10.0
            return '4.0';
        }
        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 9)) { // starting from 3.2.9.0
            return '3.4';
        }
        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 7)) { // starting from 3.2.7.0
            return '3.3';
        }
        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 6)) { // starting from 3.2.6.0
            return '3.2';
        }
        else if ((upgradeVersions[1] === 1 && upgradeVersions[2] >= 12) || upgradeVersions[1] > 1) { // starting from 3.1.12.0
            return '3.1';
        }
        else {
            return '3.0';
        }
    }
    // should not happen
    return '1.0';
};
exports.evaluateSettingsVersion = evaluateSettingsVersion;
exports.latestVersion = '6.1';
//# sourceMappingURL=index.js.map