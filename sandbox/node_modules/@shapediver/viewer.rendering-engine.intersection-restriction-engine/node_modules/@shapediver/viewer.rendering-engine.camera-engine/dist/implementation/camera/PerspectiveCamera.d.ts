import { IRenderingEngine } from "@shapediver/viewer.rendering-engine.rendering-engine";
import { Box, Sphere } from "@shapediver/viewer.shared.math";
import { SettingsEngine } from "@shapediver/viewer.shared.services";
import { mat4, vec2, vec3 } from "gl-matrix";
import { IPerspectiveCamera } from "../../interfaces/camera/IPerspectiveCamera";
import { ICameraControls } from "../../interfaces/controls/ICameraControls";
import { AbstractCamera } from "./AbstractCamera";
export declare class PerspectiveCamera extends AbstractCamera implements IPerspectiveCamera {
    #private;
    protected _controls: ICameraControls;
    constructor(id: string, version?: string, initialAspect?: number, isDefault?: boolean);
    get aspect(): number | undefined;
    set aspect(value: number | undefined);
    get controls(): ICameraControls;
    set controls(value: ICameraControls);
    get fov(): number;
    set fov(value: number);
    applySettings(settingsEngine: SettingsEngine): void;
    assignViewer(renderingEngine: IRenderingEngine): void;
    calculateZoomTo(zoomTarget?: Box, startingPosition?: vec3, startingTarget?: vec3): {
        position: vec3;
        target: vec3;
    };
    clone(): IPerspectiveCamera;
    project(pos: vec3, position?: vec3, target?: vec3): vec2;
    unproject(pos: vec3, position?: vec3, target?: vec3): vec3;
    protected getProjectionMatrix(sphere: Sphere): mat4 | undefined;
}
//# sourceMappingURL=PerspectiveCamera.d.ts.map