import { vec3 } from "gl-matrix";
import { IMapData } from "../../interfaces/data/material/IMapData";
import { IMaterialGemData, IMaterialGemDataProperties } from "../../interfaces/data/material/IMaterialGemDataProperties";
import { Color } from "../../types";
import { AbstractMaterialData } from "./AbstractMaterialData";
export declare class MaterialGemData extends AbstractMaterialData implements IMaterialGemData {
    #private;
    /**
     * Creates a material data object.
     *
     * @param _attributes the attributes of the material
     * @param id the id
     */
    constructor(properties?: IMaterialGemDataProperties, id?: string, version?: string);
    get refractionIndex(): number;
    set refractionIndex(value: number);
    get impurityMap(): IMapData | undefined;
    set impurityMap(value: IMapData | undefined);
    get impurityScale(): number;
    set impurityScale(value: number);
    get colorTransferBegin(): Color;
    set colorTransferBegin(value: Color);
    get colorTransferEnd(): Color;
    set colorTransferEnd(value: Color);
    get center(): vec3;
    set center(value: vec3);
    get tracingDepth(): number;
    set tracingDepth(value: number);
    get radius(): number;
    set radius(value: number);
    get sphericalNormalMap(): IMapData | undefined;
    set sphericalNormalMap(value: IMapData | undefined);
    get gamma(): number;
    set gamma(value: number);
    get contrast(): number;
    set contrast(value: number);
    get brightness(): number;
    set brightness(value: number);
    get dispersion(): number;
    set dispersion(value: number);
    get tracingOpacity(): number;
    set tracingOpacity(value: number);
    get envMap(): string | string[] | undefined;
    set envMap(value: string | string[] | undefined);
    clone(): IMaterialGemData;
    copy(source: MaterialGemData): void;
    reset(): void;
}
//# sourceMappingURL=MaterialGemData.d.ts.map