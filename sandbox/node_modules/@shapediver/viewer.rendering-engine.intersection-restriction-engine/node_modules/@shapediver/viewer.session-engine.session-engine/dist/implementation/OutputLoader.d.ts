import { ShapeDiverResponseOutput } from "@shapediver/sdk.geometry-api-sdk-v2";
import { TASK_TYPE } from "@shapediver/viewer.shared.types";
import { ISessionEngine } from "../interfaces/ISessionEngine";
import { SessionTreeNode } from "./SessionTreeNode";
export declare type OutputLoaderTaskEventInfo = {
    eventId: string;
    type: TASK_TYPE;
    progressRange: {
        min: number;
        max: number;
    };
    data: unknown;
};
export declare class OutputLoader {
    private readonly _sessionEngine;
    private readonly _eventEngine;
    private readonly _globalAccessObjects;
    private readonly _lastOutputNodes;
    private readonly _loadedOutputNodes;
    private readonly _performanceEvaluator;
    private _reloadSdtf;
    /**
     * The output loader takes care of loading the outputs of a session, storing them and returning stored or newly loaded nodes.
     *
     * @param _session the session for this output loader
     */
    constructor(_sessionEngine: ISessionEngine);
    set reloadSdtf(value: boolean);
    getCurrentOutputVersions(): {
        [key: string]: string;
    };
    /**
     * Load the outputs and return the scene graph node of the result.
     * In case the outputs have a delay property, it throws an OutputDelayException.
     *
     * @param outputs the outputs to load
     * @returns promise with a scene graph node
     */
    loadOutputs(nodeName: string, outputs: {
        [key: string]: ShapeDiverResponseOutput;
    }, outputsFreeze: {
        [key: string]: boolean;
    }, taskEventInfo: OutputLoaderTaskEventInfo, throwDelay?: boolean, cloneNodes?: boolean): Promise<SessionTreeNode>;
    private assignMaterials;
    private mergeContentNodes;
}
//# sourceMappingURL=OutputLoader.d.ts.map