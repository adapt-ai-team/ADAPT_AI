import { MapData } from './MapData';
import { AbstractMaterialData, AbstractMaterialDataProperties } from './AbstractMaterialData';
export interface MaterialStandardDataProperties extends AbstractMaterialDataProperties {
    attenuationColor?: string;
    attenuationDistance?: number;
    clearcoat?: number;
    clearcoatMap?: MapData;
    clearcoatNormalMap?: MapData;
    clearcoatRoughness?: number;
    clearcoatRoughnessMap?: MapData;
    displacementMap?: MapData;
    displacementScale?: number;
    displacementBias?: number;
    ior?: number;
    metalness?: number;
    metalnessMap?: MapData;
    metalnessRoughnessMap?: MapData;
    roughness?: number;
    roughnessMap?: MapData;
    sheen?: number;
    sheenColor?: string;
    sheenColorMap?: MapData;
    sheenRoughness?: number;
    sheenRoughnessMap?: MapData;
    specularColor?: string;
    specularColorMap?: MapData;
    specularIntensity?: number;
    specularIntensityMap?: MapData;
    thickness?: number;
    thicknessMap?: MapData;
    transmission?: number;
    transmissionMap?: MapData;
}
export declare class MaterialStandardData extends AbstractMaterialData {
    #private;
    /**
     * Creates a material data object.
     *
     * @param _attributes the attributes of the material
     * @param id the id
     */
    constructor(properties?: MaterialStandardDataProperties, id?: string);
    get attenuationColor(): string;
    set attenuationColor(value: string);
    get attenuationDistance(): number;
    set attenuationDistance(value: number);
    get clearcoat(): number;
    set clearcoat(value: number);
    get clearcoatMap(): MapData | undefined;
    set clearcoatMap(value: MapData | undefined);
    get clearcoatNormalMap(): MapData | undefined;
    set clearcoatNormalMap(value: MapData | undefined);
    get clearcoatRoughness(): number;
    set clearcoatRoughness(value: number);
    get clearcoatRoughnessMap(): MapData | undefined;
    set clearcoatRoughnessMap(value: MapData | undefined);
    get displacementMap(): MapData | undefined;
    set displacementMap(value: MapData | undefined);
    get displacementScale(): number;
    set displacementScale(value: number);
    get displacementBias(): number;
    set displacementBias(value: number);
    get ior(): number;
    set ior(value: number);
    get metalness(): number;
    set metalness(value: number);
    get metalnessMap(): MapData | undefined;
    set metalnessMap(value: MapData | undefined);
    get metalnessRoughnessMap(): MapData | undefined;
    set metalnessRoughnessMap(value: MapData | undefined);
    get roughness(): number;
    set roughness(value: number);
    get roughnessMap(): MapData | undefined;
    set roughnessMap(value: MapData | undefined);
    get sheen(): number;
    set sheen(value: number);
    get sheenColor(): string;
    set sheenColor(value: string);
    get sheenColorMap(): MapData | undefined;
    set sheenColorMap(value: MapData | undefined);
    get sheenRoughness(): number;
    set sheenRoughness(value: number);
    get sheenRoughnessMap(): MapData | undefined;
    set sheenRoughnessMap(value: MapData | undefined);
    get specularColor(): string;
    set specularColor(value: string);
    get specularColorMap(): MapData | undefined;
    set specularColorMap(value: MapData | undefined);
    get specularIntensity(): number;
    set specularIntensity(value: number);
    get specularIntensityMap(): MapData | undefined;
    set specularIntensityMap(value: MapData | undefined);
    get thickness(): number;
    set thickness(value: number);
    get thicknessMap(): MapData | undefined;
    set thicknessMap(value: MapData | undefined);
    get transmission(): number;
    set transmission(value: number);
    get transmissionMap(): MapData | undefined;
    set transmissionMap(value: MapData | undefined);
    reset(): void;
    clone(): MaterialStandardData;
    copy(source: MaterialStandardData): void;
}
//# sourceMappingURL=MaterialStandardData.d.ts.map