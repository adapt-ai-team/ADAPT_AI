import { AbstractTreeNodeData, ITreeNodeData } from '@shapediver/viewer.shared.node-tree';
import { MapData } from './MapData';
export declare enum MATERIAL_SIDE {
    DOUBLE = "double",
    FRONT = "front",
    BACK = "back"
}
export declare enum MATERIAL_ALPHA {
    OPAQUE = "opaque",
    MASK = "mask",
    BLEND = "blend"
}
export declare enum MATERIAL_SHADING {
    FLAT = "flat",
    SMOOTH = "smooth"
}
export interface AbstractMaterialDataProperties {
    alphaMap?: MapData;
    alphaCutoff?: number;
    alphaMode?: MATERIAL_ALPHA;
    aoMap?: MapData;
    aoMapIntensity?: number;
    bumpMap?: MapData;
    bumpScale?: number;
    color?: string;
    emissiveMap?: MapData;
    emissiveness?: string;
    shading?: MATERIAL_SHADING;
    map?: MapData;
    name?: string;
    normalMap?: MapData;
    normalScale?: number;
    opacity?: number;
    side?: MATERIAL_SIDE;
}
export declare abstract class AbstractMaterialData extends AbstractTreeNodeData {
    #private;
    /**
     * Creates a material data object.
     *
     * @param _attributes the attributes of the material
     * @param id the id
     */
    constructor(properties?: AbstractMaterialDataProperties, id?: string);
    get alphaCutoff(): number;
    set alphaCutoff(value: number);
    get alphaMap(): MapData | undefined;
    set alphaMap(value: MapData | undefined);
    get alphaMode(): MATERIAL_ALPHA;
    set alphaMode(value: MATERIAL_ALPHA);
    get aoMap(): MapData | undefined;
    set aoMap(value: MapData | undefined);
    get aoMapIntensity(): number;
    set aoMapIntensity(value: number);
    get bumpMap(): MapData | undefined;
    set bumpMap(value: MapData | undefined);
    get bumpScale(): number;
    set bumpScale(value: number);
    get color(): string;
    set color(value: string);
    get emissiveMap(): MapData | undefined;
    set emissiveMap(value: MapData | undefined);
    get emissiveness(): string | undefined;
    set emissiveness(value: string | undefined);
    get map(): MapData | undefined;
    set map(value: MapData | undefined);
    get materialOutput(): boolean;
    set materialOutput(value: boolean);
    get name(): string | undefined;
    set name(value: string | undefined);
    get normalMap(): MapData | undefined;
    set normalMap(value: MapData | undefined);
    get normalScale(): number;
    set normalScale(value: number);
    get opacity(): number;
    set opacity(value: number);
    get shading(): MATERIAL_SHADING;
    set shading(value: MATERIAL_SHADING);
    get side(): MATERIAL_SIDE;
    set side(value: MATERIAL_SIDE);
    /**
     * Reset the material data.
     */
    abstract reset(): void;
    /**
     * Clones the scene graph data.
     */
    abstract clone(): ITreeNodeData;
    /**
     * Copy all properties of another material data object.
     *
     * @param source
     */
    abstract copy(source: AbstractMaterialData): void;
}
//# sourceMappingURL=AbstractMaterialData.d.ts.map