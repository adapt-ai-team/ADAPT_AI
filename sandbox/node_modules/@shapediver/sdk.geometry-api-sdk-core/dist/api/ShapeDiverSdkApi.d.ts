import { SdkConfigInternal } from "../config/ShapeDiverSdkConfig";
export interface ShapeDiverSdkApiRequestOptions {
    contentDisposition?: string;
    contentType?: string;
    responseType: ShapeDiverSdkApiResponseType;
    disableAuthorization?: boolean;
    disableCustomHeaders?: boolean;
    accept?: string;
}
export declare enum ShapeDiverSdkApiResponseType {
    JSON = "json",
    DATA = "arraybuffer",
    TEXT = "text"
}
export declare class ShapeDiverSdkApi {
    private config;
    constructor(config: SdkConfigInternal);
    private buildRequestConfig;
    private buildUrl;
    private static processError;
    private static convertErrorResponseData;
    private static parseResponse;
    head(url: string, options?: Omit<ShapeDiverSdkApiRequestOptions, "responseType">): Promise<[Record<string, any>, number]>;
    get<T>(url: string, queries?: string[], options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    post<T>(url: string, queries?: string[], data?: any, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    put<T>(url: string, queries?: string[], data?: any, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    patch<T>(url: string, queries?: string[], data?: any, options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
    delete<T>(url: string, queries?: string[], options?: ShapeDiverSdkApiRequestOptions): Promise<[Record<string, any>, T]>;
}
//# sourceMappingURL=ShapeDiverSdkApi.d.ts.map