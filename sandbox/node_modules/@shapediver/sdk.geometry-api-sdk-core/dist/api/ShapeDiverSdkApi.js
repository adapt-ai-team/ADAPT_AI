"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeDiverSdkApi = exports.ShapeDiverSdkApiResponseType = void 0;
const axios_1 = __importDefault(require("axios"));
const ShapeDiverErrors_1 = require("../ShapeDiverErrors");
const utils_1 = require("../utils");
var Method;
(function (Method) {
    Method["DELETE"] = "DELETE";
    Method["GET"] = "GET";
    Method["HEAD"] = "HEAD";
    Method["PATCH"] = "PATCH";
    Method["POST"] = "POST";
    Method["PUT"] = "PUT";
})(Method || (Method = {}));
var ShapeDiverSdkApiResponseType;
(function (ShapeDiverSdkApiResponseType) {
    ShapeDiverSdkApiResponseType["JSON"] = "json";
    ShapeDiverSdkApiResponseType["DATA"] = "arraybuffer";
    ShapeDiverSdkApiResponseType["TEXT"] = "text";
})(ShapeDiverSdkApiResponseType || (exports.ShapeDiverSdkApiResponseType = ShapeDiverSdkApiResponseType = {}));
class ShapeDiverSdkApi {
    constructor(config) {
        this.config = config;
    }
    buildRequestConfig(method, options, data) {
        const request = {
            method: method,
            headers: {},
            responseType: options.responseType,
            data: undefined,
        };
        if (!options.disableCustomHeaders)
            request.headers = Object.assign({}, this.config.headers);
        if (options.disableAuthorization) {
            delete request.headers["Authorization"];
            delete request.headers["authorization"];
        }
        else if (this.config.jwt) {
            request.headers["Authorization"] = "Bearer " + this.config.jwt;
        }
        if (options.contentType) {
            request.headers["Content-Type"] = options.contentType;
            request.data = data;
        }
        if (options.accept) {
            request.headers["Accept"] = options.accept;
        }
        if (options.contentDisposition) {
            request.headers["Content-Disposition"] = options.contentDisposition;
        }
        return request;
    }
    buildUrl(uri, queries) {
        if (typeof uri !== "string") {
            throw new ShapeDiverErrors_1.ShapeDiverError("No URL or URI was specified");
        }
        let url = uri.startsWith("http")
            ? uri
            : `${this.config.baseUrl}/${uri.startsWith("/") ? uri.substring(1) : uri}`;
        if (queries.length) {
            url += `?${queries.join("&")}`;
        }
        return url;
    }
    static processError(error, responseType) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            if (error.response) {
                const resp = error.response;
                let data;
                if (responseType === ShapeDiverSdkApiResponseType.DATA) {
                    data = this.convertErrorResponseData(resp.data);
                }
                else {
                    data = resp.data;
                }
                throw new ShapeDiverErrors_1.ShapeDiverResponseError(data.message || data.desc || ((_a = data.error) !== null && _a !== void 0 ? _a : ""), resp.status, (_b = data.error) !== null && _b !== void 0 ? _b : "", (_c = data.desc) !== null && _c !== void 0 ? _c : "", resp.headers);
            }
            else if (error.request) {
                throw new ShapeDiverErrors_1.ShapeDiverRequestError("Could not send request.", "The request was made but no response was received");
            }
            else {
                throw new ShapeDiverErrors_1.ShapeDiverError(error.message);
            }
        });
    }
    static convertErrorResponseData(data) {
        let stringData;
        if (typeof window === "undefined") {
            stringData = Buffer.from(data).toString();
        }
        else if (window.TextDecoder) {
            stringData = new TextDecoder("utf-8").decode(new Uint8Array(data));
        }
        else {
            throw new ShapeDiverErrors_1.ShapeDiverError("Received an unknown error object");
        }
        try {
            return JSON.parse(stringData);
        }
        catch (_) {
            return { message: stringData };
        }
    }
    static parseResponse(data, requestedType) {
        switch (requestedType) {
            case ShapeDiverSdkApiResponseType.TEXT:
            case ShapeDiverSdkApiResponseType.JSON:
                return data;
            case ShapeDiverSdkApiResponseType.DATA:
                return data instanceof ArrayBuffer
                    ? data
                    : Uint8Array.from(data).buffer;
            default:
                (0, utils_1.sdAssertUnreachable)(requestedType);
        }
    }
    head(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, options = {}) {
            const fullOptions = Object.assign(Object.assign({}, options), { responseType: ShapeDiverSdkApiResponseType.JSON });
            const config = this.buildRequestConfig(Method.HEAD, fullOptions, undefined);
            try {
                const response = yield (0, axios_1.default)(this.buildUrl(url, []), config);
                return [response.headers, response.status];
            }
            catch (e) {
                return yield ShapeDiverSdkApi.processError(e, fullOptions.responseType);
            }
        });
    }
    get(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, queries = [], options = {
            contentType: "application/json",
            responseType: ShapeDiverSdkApiResponseType.JSON,
        }) {
            const config = this.buildRequestConfig(Method.GET, options, undefined);
            try {
                const response = yield (0, axios_1.default)(this.buildUrl(url, queries), config);
                return [
                    response.headers,
                    ShapeDiverSdkApi.parseResponse(response.data, options.responseType),
                ];
            }
            catch (e) {
                return yield ShapeDiverSdkApi.processError(e, options.responseType);
            }
        });
    }
    post(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, queries = [], data = {}, options = {
            contentType: "application/json",
            responseType: ShapeDiverSdkApiResponseType.JSON,
        }) {
            const config = this.buildRequestConfig(Method.POST, options, data);
            try {
                const response = yield (0, axios_1.default)(this.buildUrl(url, queries), config);
                return [
                    response.headers,
                    ShapeDiverSdkApi.parseResponse(response.data, options.responseType),
                ];
            }
            catch (e) {
                return yield ShapeDiverSdkApi.processError(e, options.responseType);
            }
        });
    }
    put(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, queries = [], data = {}, options = {
            contentType: "application/json",
            responseType: ShapeDiverSdkApiResponseType.JSON,
        }) {
            const config = this.buildRequestConfig(Method.PUT, options, data);
            try {
                const response = yield (0, axios_1.default)(this.buildUrl(url, queries), config);
                return [
                    response.headers,
                    ShapeDiverSdkApi.parseResponse(response.data, options.responseType),
                ];
            }
            catch (e) {
                return yield ShapeDiverSdkApi.processError(e, options.responseType);
            }
        });
    }
    patch(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, queries = [], data = {}, options = {
            contentType: "application/json",
            responseType: ShapeDiverSdkApiResponseType.JSON,
        }) {
            const config = this.buildRequestConfig(Method.PATCH, options, data);
            try {
                const response = yield (0, axios_1.default)(this.buildUrl(url, queries), config);
                return [
                    response.headers,
                    ShapeDiverSdkApi.parseResponse(response.data, options.responseType),
                ];
            }
            catch (e) {
                return yield ShapeDiverSdkApi.processError(e, options.responseType);
            }
        });
    }
    delete(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, queries = [], options = {
            contentType: "application/json",
            responseType: ShapeDiverSdkApiResponseType.JSON,
        }) {
            const config = this.buildRequestConfig(Method.DELETE, options, {});
            try {
                const response = yield (0, axios_1.default)(this.buildUrl(url, queries), config);
                return [
                    response.headers,
                    ShapeDiverSdkApi.parseResponse(response.data, options.responseType),
                ];
            }
            catch (e) {
                return yield ShapeDiverSdkApi.processError(e, options.responseType);
            }
        });
    }
}
exports.ShapeDiverSdkApi = ShapeDiverSdkApi;
//# sourceMappingURL=ShapeDiverSdkApi.js.map