"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PostProcessingApi_inputValidator, _PostProcessingApi_logger, _PostProcessingApi_renderingEngine, _PostProcessingApi_viewportApi;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostProcessingApi = void 0;
const viewer_rendering_engine_rendering_engine_threejs_1 = require("@shapediver/viewer.rendering-engine.rendering-engine-threejs");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
class PostProcessingApi {
    // #endregion Properties (4)
    // #region Constructors (1)
    constructor(viewportApi, renderingEngine) {
        // #region Properties (4)
        _PostProcessingApi_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);
        _PostProcessingApi_logger.set(this, viewer_shared_services_1.Logger.instance);
        _PostProcessingApi_renderingEngine.set(this, void 0);
        _PostProcessingApi_viewportApi.set(this, void 0);
        __classPrivateFieldSet(this, _PostProcessingApi_viewportApi, viewportApi, "f");
        __classPrivateFieldSet(this, _PostProcessingApi_renderingEngine, renderingEngine, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (14)
    get antiAliasingTechnique() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager
            .antiAliasingTechnique;
    }
    set antiAliasingTechnique(value) {
        const scope = "antiAliasingTechnique";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, value, "enum", true, Object.values(viewer_rendering_engine_rendering_engine_threejs_1.ANTI_ALIASING_TECHNIQUE));
        __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.antiAliasingTechnique =
            value;
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
    }
    get antiAliasingTechniqueMobile() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager
            .antiAliasingTechniqueMobile;
    }
    set antiAliasingTechniqueMobile(value) {
        const scope = "antiAliasingTechniqueMobile";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, value, "enum", true, Object.values(viewer_rendering_engine_rendering_engine_threejs_1.ANTI_ALIASING_TECHNIQUE));
        __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.antiAliasingTechniqueMobile =
            value;
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
    }
    get effectComposer() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.effectComposer;
    }
    get enablePostProcessingOnMobile() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager
            .enablePostProcessingOnMobile;
    }
    set enablePostProcessingOnMobile(value) {
        const scope = "enablePostProcessingOnMobile";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, value, "boolean");
        __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.enablePostProcessingOnMobile =
            value;
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
    }
    get godRaysEffects() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.godRaysManagers;
    }
    get manualPostProcessing() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.manualPostProcessing;
    }
    set manualPostProcessing(value) {
        const scope = "manualPostProcessing";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, value, "boolean");
        __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.manualPostProcessing =
            value;
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
    }
    get outlineEffects() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.outlineManagers;
    }
    get selectiveBloomEffects() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager
            .selectiveBloomManagers;
    }
    get ssaaSampleLevel() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.ssaaSampleLevel;
    }
    set ssaaSampleLevel(value) {
        const scope = "ssaaSampleLevel";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, value, "number");
        __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.ssaaSampleLevel = value;
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
    }
    // #endregion Public Getters And Setters (14)
    // #region Public Methods (7)
    addEffect(definition) {
        const scope = "addEffect";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, definition, "object", false);
        const res = __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.addEffect(definition);
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was called with definition ${definition}.`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
        return res;
    }
    getDefaultEffectProperties(type) {
        const scope = "getDefaultEffectProperties";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, type, "enum", true, Object.values(viewer_rendering_engine_rendering_engine_threejs_1.POST_PROCESSING_EFFECT_TYPE));
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was called with type ${type}.`);
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.getDefaultEffectProperties(type);
    }
    getEffect(token) {
        const scope = "getEffect";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, token, "string");
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was called with token ${token}.`);
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.getEffect(token);
    }
    getEffectTokens() {
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.getEffectTokens();
    }
    getPostProcessingEffectsArray() {
        const scope = "getPostProcessingEffectsArray";
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was called.`);
        return __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.getPostProcessingEffectsArray();
    }
    removeEffect(token) {
        const scope = "removeEffect";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, token, "string");
        const res = __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.removeEffect(token);
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was called with token ${token}.`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
        return res;
    }
    updateEffect(token, definition) {
        const scope = "updateEffect";
        __classPrivateFieldGet(this, _PostProcessingApi_inputValidator, "f").validateAndError(`PostProcessingApi.${scope}`, token, "string");
        __classPrivateFieldGet(this, _PostProcessingApi_renderingEngine, "f").postProcessingManager.updateEffect(token, definition);
        __classPrivateFieldGet(this, _PostProcessingApi_logger, "f").debug(`PostProcessingApi.${scope}: ${scope} was called with token ${token} and definition ${definition}.`);
        __classPrivateFieldGet(this, _PostProcessingApi_viewportApi, "f").update();
    }
}
exports.PostProcessingApi = PostProcessingApi;
_PostProcessingApi_inputValidator = new WeakMap(), _PostProcessingApi_logger = new WeakMap(), _PostProcessingApi_renderingEngine = new WeakMap(), _PostProcessingApi_viewportApi = new WeakMap();
//# sourceMappingURL=PostProcessingApi.js.map