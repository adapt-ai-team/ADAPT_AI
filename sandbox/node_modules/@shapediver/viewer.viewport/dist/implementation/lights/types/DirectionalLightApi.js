"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DirectionalLightApi_inputValidator, _DirectionalLightApi_light, _DirectionalLightApi_logger, _DirectionalLightApi_viewportApi;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectionalLightApi = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const AbstractLightApi_1 = require("../AbstractLightApi");
class DirectionalLightApi extends AbstractLightApi_1.AbstractLightApi {
    // #endregion Properties (4)
    // #region Constructors (1)
    constructor(viewportApi, light) {
        super(viewportApi, light);
        // #region Properties (4)
        _DirectionalLightApi_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);
        _DirectionalLightApi_light.set(this, void 0);
        _DirectionalLightApi_logger.set(this, viewer_shared_services_1.Logger.instance);
        _DirectionalLightApi_viewportApi.set(this, void 0);
        __classPrivateFieldSet(this, _DirectionalLightApi_viewportApi, viewportApi, "f");
        __classPrivateFieldSet(this, _DirectionalLightApi_light, light, "f");
        this.scope = "DirectionalLightApi";
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (8)
    get castShadow() {
        return __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").castShadow;
    }
    set castShadow(value) {
        const scope = "castShadow";
        __classPrivateFieldGet(this, _DirectionalLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "boolean");
        __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").castShadow = value;
        __classPrivateFieldGet(this, _DirectionalLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _DirectionalLightApi_viewportApi, "f").update();
    }
    get direction() {
        return __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").direction;
    }
    set direction(value) {
        const scope = "direction";
        __classPrivateFieldGet(this, _DirectionalLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "vec3");
        __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").direction = value;
        __classPrivateFieldGet(this, _DirectionalLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _DirectionalLightApi_viewportApi, "f").update();
    }
    get shadowMapBias() {
        return __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").shadowMapBias;
    }
    set shadowMapBias(value) {
        const scope = "shadowMapBias";
        __classPrivateFieldGet(this, _DirectionalLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "number");
        __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").shadowMapBias = value;
        __classPrivateFieldGet(this, _DirectionalLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _DirectionalLightApi_viewportApi, "f").update();
    }
    get shadowMapResolution() {
        return __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").shadowMapResolution;
    }
    set shadowMapResolution(value) {
        const scope = "shadowMapResolution";
        __classPrivateFieldGet(this, _DirectionalLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "number");
        __classPrivateFieldGet(this, _DirectionalLightApi_light, "f").shadowMapResolution = value;
        __classPrivateFieldGet(this, _DirectionalLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _DirectionalLightApi_viewportApi, "f").update();
    }
}
exports.DirectionalLightApi = DirectionalLightApi;
_DirectionalLightApi_inputValidator = new WeakMap(), _DirectionalLightApi_light = new WeakMap(), _DirectionalLightApi_logger = new WeakMap(), _DirectionalLightApi_viewportApi = new WeakMap();
//# sourceMappingURL=DirectionalLightApi.js.map