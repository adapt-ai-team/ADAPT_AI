"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpotLightApi_inputValidator, _SpotLightApi_light, _SpotLightApi_logger, _SpotLightApi_viewportApi;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotLightApi = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const AbstractLightApi_1 = require("../AbstractLightApi");
class SpotLightApi extends AbstractLightApi_1.AbstractLightApi {
    // #endregion Properties (4)
    // #region Constructors (1)
    constructor(viewportApi, light) {
        super(viewportApi, light);
        // #region Properties (4)
        _SpotLightApi_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);
        _SpotLightApi_light.set(this, void 0);
        _SpotLightApi_logger.set(this, viewer_shared_services_1.Logger.instance);
        _SpotLightApi_viewportApi.set(this, void 0);
        __classPrivateFieldSet(this, _SpotLightApi_viewportApi, viewportApi, "f");
        __classPrivateFieldSet(this, _SpotLightApi_light, light, "f");
        this.scope = "SpotLightApi";
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (12)
    get angle() {
        return __classPrivateFieldGet(this, _SpotLightApi_light, "f").angle;
    }
    set angle(value) {
        const scope = "angle";
        __classPrivateFieldGet(this, _SpotLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "number");
        __classPrivateFieldGet(this, _SpotLightApi_light, "f").angle = value;
        __classPrivateFieldGet(this, _SpotLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _SpotLightApi_viewportApi, "f").update();
    }
    get decay() {
        return __classPrivateFieldGet(this, _SpotLightApi_light, "f").decay;
    }
    set decay(value) {
        const scope = "decay";
        __classPrivateFieldGet(this, _SpotLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "number");
        __classPrivateFieldGet(this, _SpotLightApi_light, "f").decay = value;
        __classPrivateFieldGet(this, _SpotLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _SpotLightApi_viewportApi, "f").update();
    }
    get distance() {
        return __classPrivateFieldGet(this, _SpotLightApi_light, "f").distance;
    }
    set distance(value) {
        const scope = "distance";
        __classPrivateFieldGet(this, _SpotLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "number");
        __classPrivateFieldGet(this, _SpotLightApi_light, "f").distance = value;
        __classPrivateFieldGet(this, _SpotLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _SpotLightApi_viewportApi, "f").update();
    }
    get penumbra() {
        return __classPrivateFieldGet(this, _SpotLightApi_light, "f").penumbra;
    }
    set penumbra(value) {
        const scope = "penumbra";
        __classPrivateFieldGet(this, _SpotLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "number");
        __classPrivateFieldGet(this, _SpotLightApi_light, "f").penumbra = value;
        __classPrivateFieldGet(this, _SpotLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _SpotLightApi_viewportApi, "f").update();
    }
    get position() {
        return __classPrivateFieldGet(this, _SpotLightApi_light, "f").position;
    }
    set position(value) {
        const scope = "position";
        __classPrivateFieldGet(this, _SpotLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "vec3");
        __classPrivateFieldGet(this, _SpotLightApi_light, "f").position = value;
        __classPrivateFieldGet(this, _SpotLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _SpotLightApi_viewportApi, "f").update();
    }
    get target() {
        return __classPrivateFieldGet(this, _SpotLightApi_light, "f").target;
    }
    set target(value) {
        const scope = "target";
        __classPrivateFieldGet(this, _SpotLightApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "vec3");
        __classPrivateFieldGet(this, _SpotLightApi_light, "f").target = value;
        __classPrivateFieldGet(this, _SpotLightApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _SpotLightApi_viewportApi, "f").update();
    }
}
exports.SpotLightApi = SpotLightApi;
_SpotLightApi_inputValidator = new WeakMap(), _SpotLightApi_light = new WeakMap(), _SpotLightApi_logger = new WeakMap(), _SpotLightApi_viewportApi = new WeakMap();
//# sourceMappingURL=SpotLightApi.js.map