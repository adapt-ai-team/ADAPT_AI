"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PerspectiveCameraApi_camera, _PerspectiveCameraApi_inputValidator, _PerspectiveCameraApi_logger, _PerspectiveCameraApi_viewportApi;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerspectiveCameraApi = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const AbstractCameraApi_1 = require("./AbstractCameraApi");
class PerspectiveCameraApi extends AbstractCameraApi_1.AbstractCameraApi {
    // #endregion Properties (4)
    // #region Constructors (1)
    constructor(viewportApi, camera) {
        super(viewportApi, camera);
        // #region Properties (4)
        _PerspectiveCameraApi_camera.set(this, void 0);
        _PerspectiveCameraApi_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);
        _PerspectiveCameraApi_logger.set(this, viewer_shared_services_1.Logger.instance);
        _PerspectiveCameraApi_viewportApi.set(this, void 0);
        __classPrivateFieldSet(this, _PerspectiveCameraApi_viewportApi, viewportApi, "f");
        __classPrivateFieldSet(this, _PerspectiveCameraApi_camera, camera, "f");
        this.scope = "PerspectiveCameraApi";
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (2)
    get fov() {
        return __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").fov;
    }
    set fov(value) {
        const scope = "fov";
        __classPrivateFieldGet(this, _PerspectiveCameraApi_inputValidator, "f").validateAndError(`${this.scope}.${scope}`, value, "number");
        __classPrivateFieldGet(this, _PerspectiveCameraApi_camera, "f").fov = value;
        __classPrivateFieldGet(this, _PerspectiveCameraApi_logger, "f").debug(`${this.scope}.${scope}: ${scope} was set to: ${value}`);
        __classPrivateFieldGet(this, _PerspectiveCameraApi_viewportApi, "f").update();
    }
}
exports.PerspectiveCameraApi = PerspectiveCameraApi;
_PerspectiveCameraApi_camera = new WeakMap(), _PerspectiveCameraApi_inputValidator = new WeakMap(), _PerspectiveCameraApi_logger = new WeakMap(), _PerspectiveCameraApi_viewportApi = new WeakMap();
//# sourceMappingURL=PerspectiveCameraApi.js.map