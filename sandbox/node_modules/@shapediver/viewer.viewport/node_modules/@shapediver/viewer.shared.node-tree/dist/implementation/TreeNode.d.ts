import { IBox } from "@shapediver/viewer.shared.math";
import { mat4 } from "gl-matrix";
import { ITransformation, ITreeNode } from "../interfaces/ITreeNode";
import { ITreeNodeData } from "../interfaces/ITreeNodeData";
export declare class TreeNode implements ITreeNode {
    #private;
    /**
     * Creation of a node that can be used in the node tree.
     *
     * @param name the name of the node
     * @param parent the parent of this node
     * @param data the array of data
     * @param transformations the array of transformations
     */
    constructor(name?: string, parent?: ITreeNode, data?: ITreeNodeData[], transformations?: ITransformation[]);
    get boneInverses(): mat4[];
    set boneInverses(value: mat4[]);
    get bones(): ITreeNode[];
    set bones(value: ITreeNode[]);
    get boundingBox(): IBox;
    get boundingBoxViewport(): {
        [key: string]: IBox;
    };
    get children(): ITreeNode[];
    get convertedObject(): {
        [key: string]: unknown;
    };
    set convertedObject(value: {
        [key: string]: unknown;
    });
    get data(): ITreeNodeData[];
    get displayName(): string | undefined;
    set displayName(value: string | undefined);
    get excludeViewports(): string[];
    set excludeViewports(value: string[]);
    get intersectionTest(): boolean;
    set intersectionTest(value: boolean);
    get id(): string;
    get name(): string;
    set name(value: string);
    get nodeMatrix(): mat4;
    get originalId(): string;
    set originalId(value: string);
    get originalName(): string | undefined;
    set originalName(value: string | undefined);
    get parent(): ITreeNode | undefined;
    set parent(value: ITreeNode | undefined);
    get restrictViewports(): string[];
    set restrictViewports(value: string[]);
    get skinNode(): boolean;
    set skinNode(value: boolean);
    get transformations(): ITransformation[];
    set transformations(value: ITransformation[]);
    get updateCallbackConvertedObject(): ((newObj: unknown, oldObj: unknown, viewport: string) => void) | null;
    set updateCallbackConvertedObject(value: ((newObj: unknown, oldObj: unknown, viewport: string) => void) | null);
    get version(): string;
    set version(value: string);
    get visible(): boolean;
    set visible(value: boolean);
    get worldMatrix(): mat4;
    addChild(child: ITreeNode): boolean;
    addData(data: ITreeNodeData): boolean;
    addTransformation(transformation: ITransformation): boolean;
    clone(): ITreeNode;
    cloneInstance(): ITreeNode;
    getChild(id: string): ITreeNode | undefined;
    getData(id: string): ITreeNodeData | undefined;
    getNodesByName(name: string): ITreeNode[];
    getNodesByNameWithRegex(regex: RegExp): ITreeNode[];
    getPath(): string;
    getOriginalNamePath(): string;
    getTransformation(id: string): ITransformation | undefined;
    hasChild(child: ITreeNode): boolean;
    hasData(data: ITreeNodeData): boolean;
    hasTransformation(transformation: ITransformation): boolean;
    removeChild(child: ITreeNode): boolean;
    removeData(data: ITreeNodeData): boolean;
    removeTransformation(transformation: ITransformation): boolean;
    traverse(callback: (node: ITreeNode) => void): void;
    traverseData(callback: (node: ITreeNodeData) => void): void;
    updateVersion(parents?: boolean, children?: boolean): void;
}
//# sourceMappingURL=TreeNode.d.ts.map