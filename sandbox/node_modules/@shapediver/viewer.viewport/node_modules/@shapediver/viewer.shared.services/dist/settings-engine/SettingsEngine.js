"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultSettings = exports.SESSION_SETTINGS_MODE = exports.SettingsEngine = void 0;
const viewer_settings_1 = require("@shapediver/viewer.settings");
const ShapeDiverViewerErrors_1 = require("../logger/ShapeDiverViewerErrors");
const Defaults_1 = require("./defaults/Defaults");
const FurnitureDefaults_1 = require("./defaults/FurnitureDefaults");
const HighPerformanceDefaults_1 = require("./defaults/HighPerformanceDefaults");
const JewelryDefaults_1 = require("./defaults/JewelryDefaults");
const MedicalDefaults_1 = require("./defaults/MedicalDefaults");
const TwoDimensionalDefaults_1 = require("./defaults/TwoDimensionalDefaults");
// #endregion Type aliases (8)
// #region Classes (1)
class SettingsEngine {
    constructor() {
        // #region Properties (4)
        this._hasStoredSettings = false;
        this._settings = (0, Defaults_1.Defaults)();
        // #endregion Private Methods (1)
    }
    // #endregion Properties (4)
    // #region Public Getters And Setters (11)
    get ar() {
        return this._settings.ar;
    }
    get camera() {
        return this._settings.camera;
    }
    get environment() {
        return this._settings.environment;
    }
    get environmentGeometry() {
        return this._settings.environmentGeometry;
    }
    get general() {
        return this._settings.general;
    }
    get hasStoredSettings() {
        return this._hasStoredSettings;
    }
    get light() {
        return this._settings.light;
    }
    get material() {
        return this._settings.material;
    }
    get rendering() {
        return this._settings.rendering;
    }
    get session() {
        return this._settings.session;
    }
    set session(value) {
        this._settings.session = value;
    }
    get settings() {
        return this._settings;
    }
    get settingsJson() {
        return this._settingsJson;
    }
    // #endregion Public Getters And Setters (11)
    // #region Public Methods (2)
    loadSettings(json) {
        this._settingsJson = json;
        if (JSON.stringify(json) !== JSON.stringify({})) {
            this._hasStoredSettings = true;
            for (let i = 0; i < viewer_settings_1.previousVersion.length; i++) {
                const v = viewer_settings_1.previousVersion[i];
                try {
                    (0, viewer_settings_1.validate)(json, v);
                    this._settings = (0, viewer_settings_1.convert)(json, viewer_settings_1.latestVersion);
                    this.cleanSettings(this._settings);
                    return;
                }
                catch (e) {
                    // it's ok, we just try the next version
                    // only the latest version is expected to be valid
                }
            }
            try {
                (0, viewer_settings_1.validate)(json, viewer_settings_1.latestVersion);
                this._settings = (0, viewer_settings_1.convert)(json, viewer_settings_1.latestVersion);
                this.cleanSettings(this._settings);
                return;
            }
            catch (e) {
                throw new ShapeDiverViewerErrors_1.ShapeDiverViewerSettingsError("SettingsEngine.loadSettings: Settings could not be validated. " +
                    e.message, e);
            }
        }
        else {
            this._settings = (0, Defaults_1.Defaults)();
            return;
        }
    }
    reset() {
        this._settings = (0, Defaults_1.Defaults)();
    }
    // #endregion Public Methods (2)
    // #region Private Methods (1)
    cleanSettings(json) {
        for (const c in json.camera.cameras) {
            const camera = json.camera.cameras[c];
            if (camera.type === "perspective") {
                const restrictions = camera.controls.restrictions;
                if (restrictions.position.cube.min.x === null)
                    restrictions.position.cube.min.x = -Infinity;
                if (restrictions.position.cube.min.y === null)
                    restrictions.position.cube.min.y = -Infinity;
                if (restrictions.position.cube.min.z === null)
                    restrictions.position.cube.min.z = -Infinity;
                if (restrictions.position.cube.max.x === null)
                    restrictions.position.cube.max.x = Infinity;
                if (restrictions.position.cube.max.y === null)
                    restrictions.position.cube.max.y = Infinity;
                if (restrictions.position.cube.max.z === null)
                    restrictions.position.cube.max.z = Infinity;
                if (restrictions.position.sphere.radius === null)
                    restrictions.position.sphere.radius = Infinity;
                if (restrictions.target.cube.min.x === null)
                    restrictions.target.cube.min.x = -Infinity;
                if (restrictions.target.cube.min.y === null)
                    restrictions.target.cube.min.y = -Infinity;
                if (restrictions.target.cube.min.z === null)
                    restrictions.target.cube.min.z = -Infinity;
                if (restrictions.target.cube.max.x === null)
                    restrictions.target.cube.max.x = Infinity;
                if (restrictions.target.cube.max.y === null)
                    restrictions.target.cube.max.y = Infinity;
                if (restrictions.target.cube.max.z === null)
                    restrictions.target.cube.max.z = Infinity;
                if (restrictions.target.sphere.radius === null)
                    restrictions.target.sphere.radius = Infinity;
                if (restrictions.rotation.minAzimuthAngle === null)
                    restrictions.rotation.minAzimuthAngle = -Infinity;
                if (restrictions.rotation.maxAzimuthAngle === null)
                    restrictions.rotation.maxAzimuthAngle = Infinity;
                if (restrictions.zoom.maxDistance === null)
                    restrictions.zoom.maxDistance = Infinity;
            }
        }
    }
}
exports.SettingsEngine = SettingsEngine;
// #endregion Classes (1)
// #region Enums (1)
/**
 * Session settings to be used by a viewport.
 *
 * The {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend}
 * allows to persist settings of the viewer, individually for each model that it hosts. Persisting the settings
 * of the viewer requires permissions which are typically only granted to the owner of the model. Editing
 * of the settings typically happens on the model edit page of the ShapeDiver Platform.
 *
 * Whenever an instance of the viewer creates a session with a model, the settings are made available to the viewer.
 * It is possible to use multiple sessions with different models from a single instance of the viewer.
 * Therefore the viewer offers a choice on which settings to use.
 */
var SESSION_SETTINGS_MODE;
(function (SESSION_SETTINGS_MODE) {
    /** No settings of a session will be used for the viewport. */
    SESSION_SETTINGS_MODE["NONE"] = "none";
    /**
     * The settings of the very first session created will be used for the viewport.
     */
    SESSION_SETTINGS_MODE["FIRST"] = "first";
    /**
     * Use this mode in case you want to assign a specific session identifier
     * to the viewport, whose settings will be used.
     */
    SESSION_SETTINGS_MODE["MANUAL"] = "manual";
})(SESSION_SETTINGS_MODE = exports.SESSION_SETTINGS_MODE || (exports.SESSION_SETTINGS_MODE = {}));
exports.defaultSettings = {
    default: Defaults_1.Defaults,
    furniture: FurnitureDefaults_1.FurnitureDefaults,
    highPerformance: HighPerformanceDefaults_1.HighPerformanceDefaults,
    jewelry: JewelryDefaults_1.JewelryDefaults,
    medical: MedicalDefaults_1.MedicalDefaults,
    twoDimensional: TwoDimensionalDefaults_1.TwoDimensionalDefaults,
};
// #endregion Enums (1)
//# sourceMappingURL=SettingsEngine.js.map