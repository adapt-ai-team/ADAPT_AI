"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceEvaluator = void 0;
class PerformanceEvaluator {
    // #endregion Properties (2)
    // #region Public Static Accessors (1)
    static get instance() {
        return this._instance || (this._instance = new this());
    }
    // #endregion Public Static Accessors (1)
    // #region Public Methods (8)
    /**
     * Continue the performance evaluation.
     *
     * @param id
     */
    continueSection(sectionId) {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        if (!this._eval.section[sectionId])
            return;
        if (this._eval.section[sectionId].end)
            return;
        this._eval.section[sectionId].continued = performance.now();
    }
    /**
     * End the performance evaluation and calculate the duration.
     *
     * @param id
     */
    end() {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        this._eval.end = performance.now();
        this._eval.duration = this._eval.end - this._eval.start;
    }
    /**
     * End the performance evaluation of a section and calculate the duration.
     *
     * @param id
     */
    endSection(sectionId) {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        if (!this._eval.section[sectionId])
            return;
        if (this._eval.section[sectionId].end)
            return;
        this._eval.section[sectionId].end = performance.now();
        this._eval.section[sectionId].duration =
            (this._eval.section[sectionId].duration || 0) +
                (this._eval.section[sectionId].end -
                    (this._eval.section[sectionId].continued ||
                        this._eval.section[sectionId].start));
    }
    /**
     * Get the evaluation data for a specific id.
     *
     * @param id
     */
    getEvaluation() {
        return this._eval;
    }
    /**
     * Get the evaluation data for a specific id.
     *
     * @param id
     */
    getEvaluationToString() {
        const e = this._eval;
        return `Performance Evaluation: ${e.duration}ms\n`;
    }
    /**
     * Pause the performance evaluation.
     *
     * @param id
     */
    pauseSection(sectionId) {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        if (!this._eval.section[sectionId])
            return;
        if (this._eval.section[sectionId].end)
            return;
        this._eval.section[sectionId].duration =
            (this._eval.section[sectionId].duration || 0) +
                performance.now() -
                (this._eval.section[sectionId].continued ||
                    this._eval.section[sectionId].start);
    }
    /**
     * Start the evaluation with a specific id.
     *
     * @param id
     */
    start(time) {
        this._eval = {
            start: time || performance.now(),
            section: {},
        };
    }
    /**
     * Start the evaluation of a section with a specific id.
     *
     * @param id
     */
    startSection(sectionId, time) {
        if (!this._eval)
            return;
        if (this._eval.end)
            return;
        this._eval.section[sectionId] = {
            start: time || performance.now(),
        };
    }
}
exports.PerformanceEvaluator = PerformanceEvaluator;
//# sourceMappingURL=PerformanceEvaluator.js.map