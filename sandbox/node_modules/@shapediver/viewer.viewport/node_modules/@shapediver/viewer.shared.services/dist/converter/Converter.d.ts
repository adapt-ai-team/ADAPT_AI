import { vec3 } from "gl-matrix";
import { HttpResponse } from "../http-client/HttpResponse";
export declare class Converter {
    private readonly _httpClient;
    private static _instance;
    static get instance(): Converter;
    /**
     * Converts a data URL to a Blob object.
     *
     * @param dataURL
     * @returns
     */
    dataURLtoBlob(dataURL: string): {
        blob: Blob;
        arrayBuffer: ArrayBufferLike;
    };
    /**
     * Convert the given image to an ArrayBuffer and return the image data.
     *
     * @param image The image to convert.
     * @param arrayBuffer Optional: The ArrayBuffer of the image, if it was already converted.
     * @returns
     */
    constructImageData(image: Blob | File, arrayBuffer?: ArrayBuffer): Promise<{
        imageData: {
            filename?: string;
            format: string;
            size: number;
        };
        arrayBuffer: ArrayBuffer;
    }>;
    /**
     * Convert the given input to an ArrayBuffer.
     *
     * @param input
     * @returns
     */
    convertToArrayBuffer(input: (() => Promise<ArrayBuffer>) | ArrayBuffer | (() => Promise<Blob>) | Blob | File): Promise<ArrayBuffer>;
    processSVG(blob: Blob): Promise<HTMLImageElement>;
    responseToImage(response: HttpResponse<{
        buffer: ArrayBuffer;
        blob: Blob;
    }>): Promise<HTMLImageElement>;
    toAlpha(color: unknown): number;
    toColorArray(color: unknown): number[];
    /**
     * @param color
     * @param defColor
     */
    toHex8Color(color: unknown, defColorString?: string): string;
    /**
     * This color converter is mostly left 'as-is' from viewer v2.
     * I didn't want to break something that works.
     *
     * @param color
     * @param defColor
     */
    toHexColor(color: unknown, defColorString?: string): string;
    toThreeJsColorInput(color: unknown): string;
    toVec3(point: vec3 | {
        x: number;
        y: number;
        z: number;
    } | {
        X: number;
        Y: number;
        Z: number;
    }): vec3;
    private tinyColorToString;
}
//# sourceMappingURL=Converter.d.ts.map