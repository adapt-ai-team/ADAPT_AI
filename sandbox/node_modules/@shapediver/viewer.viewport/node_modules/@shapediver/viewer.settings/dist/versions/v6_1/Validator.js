"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.environmentGeometrySettingsSchema = exports.materialSettingsSchema = exports.generalSettingsSchema = void 0;
const zod_1 = require("zod");
const Validator_1 = require("../v5/Validator");
exports.generalSettingsSchema = zod_1.z.object({
    transformation: zod_1.z.object({
        scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
        translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
        rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),
    }),
    blurWhenBusy: zod_1.z.boolean(),
    commitSettings: zod_1.z.boolean(),
    commitParameters: zod_1.z.boolean(),
    pointSize: zod_1.z.number(),
    showMessages: zod_1.z.boolean()
});
exports.materialSettingsSchema = zod_1.z.object({
    defaultMaterialColor: zod_1.z.string(),
    materialOverrideType: zod_1.z.string().optional(),
});
exports.environmentGeometrySettingsSchema = zod_1.z.object({
    gridColor: zod_1.z.string(),
    gridVisibility: zod_1.z.boolean(),
    groundPlaneColor: zod_1.z.string(),
    groundPlaneVisibility: zod_1.z.boolean(),
    groundPlaneShadowColor: zod_1.z.string(),
    groundPlaneShadowVisibility: zod_1.z.boolean(),
    contactShadowVisibility: zod_1.z.boolean(),
    contactShadowOpacity: zod_1.z.number(),
    contactShadowBlur: zod_1.z.number(),
    contactShadowHeight: zod_1.z.number(),
    contactShadowDarkness: zod_1.z.number()
});
const schema = zod_1.z.object({
    build_date: zod_1.z.string().optional(),
    build_version: zod_1.z.string().optional(),
    settings_version: zod_1.z.string(),
    ar: Validator_1.arSettingsSchema,
    camera: Validator_1.cameraSettingsSchema,
    environment: Validator_1.environmentSettingsSchema,
    environmentGeometry: exports.environmentGeometrySettingsSchema,
    general: exports.generalSettingsSchema,
    light: Validator_1.lightSettingsSchema,
    postprocessing: Validator_1.postProcessingSettingsSchema,
    rendering: Validator_1.renderingSettingsSchema,
    session: Validator_1.sessionSettingsSchema,
    material: exports.materialSettingsSchema
}).strict();
const validate = (s) => {
    const result = schema.parse(s);
    s = result;
};
exports.validate = validate;
//# sourceMappingURL=Validator.js.map