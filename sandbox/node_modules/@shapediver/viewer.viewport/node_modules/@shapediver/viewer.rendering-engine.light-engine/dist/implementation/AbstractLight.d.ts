import { AbstractTreeNodeData, ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { UuidGenerator } from "@shapediver/viewer.shared.services";
import { Color } from "@shapediver/viewer.shared.types";
import { ILight, LIGHT_TYPE } from "../interface/ILight";
export declare abstract class AbstractLight extends AbstractTreeNodeData implements ILight {
    #private;
    protected readonly _uuidGenerator: UuidGenerator;
    constructor(properties: {
        color: Color;
        intensity: number;
        type: LIGHT_TYPE;
        name?: string;
        order?: number;
        id?: string;
        version?: string;
    });
    get color(): Color;
    set color(value: Color);
    get intensity(): number;
    set intensity(value: number);
    get name(): string | undefined;
    set name(value: string | undefined);
    get order(): number | undefined;
    set order(value: number | undefined);
    get parentNode(): ITreeNode | undefined;
    set parentNode(value: ITreeNode | undefined);
    get type(): LIGHT_TYPE;
    get useNodeData(): boolean;
    set useNodeData(value: boolean);
}
//# sourceMappingURL=AbstractLight.d.ts.map