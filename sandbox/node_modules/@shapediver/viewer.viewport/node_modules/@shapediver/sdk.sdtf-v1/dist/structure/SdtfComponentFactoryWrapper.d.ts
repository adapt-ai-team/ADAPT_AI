import { ISdtfReadableComponentList } from '../reader/ISdtfReadableComponentList';
import { ISdtfWriteableComponentList } from '../writer/ISdtfWriteableComponentList';
import { ISdtfComponentList, ISdtfPartialComponentList } from './ISdtfComponentList';
export declare class SdtfComponentFactoryWrapper implements SdtfComponentFactoryWrapper {
    private readonly factory;
    constructor();
    createFromJson(json: Record<string, unknown>): ISdtfComponentList;
    createFromReadable(readableComponents: ISdtfReadableComponentList): ISdtfComponentList;
    createFromWriteable(writeableComponents: ISdtfWriteableComponentList): ISdtfComponentList;
    createComponentList(partialComponents: ISdtfPartialComponentList): ISdtfComponentList;
    buildFromObject<T>(jsonObject: Record<string, unknown>, propertyName: string, createFn: (data: Record<string, unknown>) => T): T;
    buildFromArray<T>(jsonArray: Record<string, unknown>, propertyName: string, createFn: (data: Record<string, unknown>) => T): T[];
    mapHierarchyRepresentation(target: ISdtfPartialComponentList, src: ISdtfWriteableComponentList | ISdtfReadableComponentList): void;
}
//# sourceMappingURL=SdtfComponentFactoryWrapper.d.ts.map