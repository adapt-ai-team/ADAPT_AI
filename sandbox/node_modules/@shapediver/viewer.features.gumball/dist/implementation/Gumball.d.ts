import { ITreeNode, IViewportApi } from '@shapediver/viewer';
import { IGumball, SettingsOptional } from '../interfaces/IGumball';
import { mat4 } from 'gl-matrix';
export declare class Gumball implements IGumball {
    #private;
    constructor(viewport: IViewportApi, nodes: ITreeNode[], settings?: SettingsOptional);
    get closed(): boolean;
    get enableRotation(): boolean;
    set enableRotation(value: boolean);
    get enableRotationX(): boolean;
    set enableRotationX(value: boolean);
    get enableRotationY(): boolean;
    set enableRotationY(value: boolean);
    get enableRotationZ(): boolean;
    set enableRotationZ(value: boolean);
    get enableScaling(): boolean;
    set enableScaling(value: boolean);
    get enableScalingX(): boolean;
    set enableScalingX(value: boolean);
    get enableScalingY(): boolean;
    set enableScalingY(value: boolean);
    get enableScalingZ(): boolean;
    set enableScalingZ(value: boolean);
    get enableTranslation(): boolean;
    set enableTranslation(value: boolean);
    get enableTranslationX(): boolean;
    set enableTranslationX(value: boolean);
    get enableTranslationY(): boolean;
    set enableTranslationY(value: boolean);
    get enableTranslationZ(): boolean;
    set enableTranslationZ(value: boolean);
    get matrix(): mat4;
    get reuseTransformation(): boolean;
    get scale(): number;
    set scale(value: number);
    get show(): boolean;
    set show(value: boolean);
    get space(): 'local' | 'world';
    close(): void;
    keyPressed(key: string | string[]): boolean;
    onKeyDown(event: KeyboardEvent): void;
    onKeyUp(event: KeyboardEvent): void;
    onMouseWheel(event: WheelEvent): void;
    onPointerDown(event: PointerEvent): void;
    onPointerEnd(event: PointerEvent): void;
    onPointerMove(event: PointerEvent): void;
    onPointerOut(event: PointerEvent): void;
    onPointerUp(event: PointerEvent): void;
    private activatePivotDragging;
    private deactivatePivotDragging;
    private getMatrix;
    private keyPressCheck;
    private setup;
    private updateObjectMatrices;
    private updateObjects;
}
//# sourceMappingURL=Gumball.d.ts.map