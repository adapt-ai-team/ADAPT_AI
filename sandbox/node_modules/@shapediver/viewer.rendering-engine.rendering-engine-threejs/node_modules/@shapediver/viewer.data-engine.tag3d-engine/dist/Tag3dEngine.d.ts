import { ShapeDiverResponseOutputContent } from "@shapediver/sdk.geometry-api-sdk-v2";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
/**
 * The font info object contains the glb file path and the dimensions of the font.
 *
 * There can either be a single glb file for both ascii and non-ascii characters or separate glb files for each.
 * The advantage of having separate glb files is that the ascii glb can be loaded once and the non-ascii glb can be loaded only when needed.
 */
export declare type FontInfo = string | {
    ascii: string;
    other: string;
};
export declare class Tag3dEngine {
    private readonly _logger;
    private static _asciiGlb;
    private static _fontInfo;
    private static _instance;
    private static _mainGlb;
    private static _nonAsciiGlb;
    static get instance(): Tag3dEngine;
    static setFontInfo(fontInfo: FontInfo): void;
    /**
     * Load the tag3d content into a scene graph node.
     *
     * @param content the tag3d content
     * @returns the scene graph node
     */
    loadContent(content: ShapeDiverResponseOutputContent): Promise<ITreeNode>;
    /**
     * Load the tag 3d content into separate characters.
     * For each character, a node is created and the character is added as a geometry data object.
     * The nodes are then added to a dictionary with the character as the key.
     *
     * Instance matrices are provided depending on the number of instances of the character.
     *
     * @param tag3dInfo
     * @returns
     */
    private loadTag;
}
//# sourceMappingURL=Tag3dEngine.d.ts.map