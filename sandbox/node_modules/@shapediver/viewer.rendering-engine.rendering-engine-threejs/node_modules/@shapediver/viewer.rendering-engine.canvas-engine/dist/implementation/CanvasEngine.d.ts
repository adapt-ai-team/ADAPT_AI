import { UuidGenerator } from "@shapediver/viewer.shared.services";
import { ICanvas } from "../interfaces/ICanvas";
import { ICanvasEngine } from "../interfaces/ICanvasEngine";
export declare class CanvasEngine implements ICanvasEngine {
    private readonly _canvasDictionary;
    private static _instance;
    protected readonly _uuidGenerator: UuidGenerator;
    static get instance(): CanvasEngine;
    /**
     * Creates a canvas object that could in the future be expanded to hold more information
     * The definition of the canvas can be:
     * - empty: A canvas is created with an unique ID.
     * - string:
     *      - If a canvas with this ID was created, this canvas is returned.
     *      - If there is an HTMLCanvasElement in the document with this ID, this is used.
     *      - If there is no HTMLElement found in the document with this ID, a canvas with ID will be created.
     * - HTMLCanvasElement: A Canvas Object will be created with this element. If there is no ID, one will be generated.
     *
     * @param canvasDefinition the definition of this canvas
     */
    createCanvasObject(canvasDefinition?: string | HTMLCanvasElement, storageId?: string): string;
    getCanvas(storageId: string): ICanvas;
}
//# sourceMappingURL=CanvasEngine.d.ts.map