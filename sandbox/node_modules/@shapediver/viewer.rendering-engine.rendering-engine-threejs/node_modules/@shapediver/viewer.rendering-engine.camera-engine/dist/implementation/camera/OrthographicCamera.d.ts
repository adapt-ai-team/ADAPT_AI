import { IRenderingEngine } from "@shapediver/viewer.rendering-engine.rendering-engine";
import { Box } from "@shapediver/viewer.shared.math";
import { SettingsEngine } from "@shapediver/viewer.shared.services";
import { mat4, vec2, vec3 } from "gl-matrix";
import { IOrthographicCamera, ORTHOGRAPHIC_CAMERA_DIRECTION } from "../../interfaces/camera/IOrthographicCamera";
import { ICameraControls } from "../../interfaces/controls/ICameraControls";
import { AbstractCamera } from "./AbstractCamera";
export declare class OrthographicCamera extends AbstractCamera implements IOrthographicCamera {
    #private;
    protected _controls: ICameraControls;
    constructor(id: string, version?: string, isDefault?: boolean);
    get bottom(): number;
    set bottom(value: number);
    get controls(): ICameraControls;
    set controls(value: ICameraControls);
    get direction(): ORTHOGRAPHIC_CAMERA_DIRECTION;
    set direction(value: ORTHOGRAPHIC_CAMERA_DIRECTION);
    get left(): number;
    set left(value: number);
    get right(): number;
    set right(value: number);
    get top(): number;
    set top(value: number);
    get up(): vec3;
    set up(value: vec3);
    applySettings(settingsEngine: SettingsEngine): void;
    assignViewer(renderingEngine: IRenderingEngine): void;
    calculateZoomTo(zoomTarget?: Box, startingPosition?: vec3, startingTarget?: vec3): {
        position: vec3;
        target: vec3;
    };
    clone(): IOrthographicCamera;
    project(pos: vec3): vec2;
    unproject(pos: vec3): vec3;
    protected getProjectionMatrix(): mat4 | undefined;
}
//# sourceMappingURL=OrthographicCamera.d.ts.map