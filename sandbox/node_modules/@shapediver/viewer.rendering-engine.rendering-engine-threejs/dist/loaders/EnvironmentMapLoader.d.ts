import * as THREE from "three";
import { RenderingEngine } from "..";
import { ILoader } from "../interfaces/ILoader";
export declare enum ENVIRONMENT_MAP_CUBE {
    DEFAULT = "default",
    DEFAULT_BW = "default_bw",
    BLURRED_LIGHTS = "blurred_lights",
    GEORGENTOR = "georgentor",
    GEORGENTOR_BLUR = "georgentor_blur",
    GEORGENTOR_BLUE_BLUR = "georgentor_blue_blur",
    GEORGENTOR_BW_BLUR = "georgentor_bw_blur",
    LEVELSETS = "levelsets",
    LYTHWOOD_FIELD = "lythwood_field",
    MOUNTAINS = "mountains",
    OCEAN = "ocean",
    PIAZZA_SAN_MARCO = "piazza_san_marco",
    RESIDENTIAL_GARDEN = "residential_garden",
    ROOM_ABSTRACT_1 = "room_abstract_1",
    SKY = "sky",
    STORAGE_ROOM = "storage_room",
    STORM = "storm",
    SUBWAY_ENTRANCE = "subway_entrance",
    SUBWAY_ENTRANCE_BW_BLUR = "subway_entrance_bw_blur",
    WHITE = "white",
    YOKOHAMA = "yokohama"
}
export declare enum ENVIRONMENT_MAP {
    DEFAULT_STUDIO = "default_studio",
    FURNITURE_STUDIO = "furniture_studio",
    GEM_STUDIO = "gem_studio",
    HOSPITAL = "hospital",
    JEWELRY_STUDIO = "jewelry_studio",
    ANNIVERSARY_LOUNGE = "anniversary_lounge",
    BALLROOM = "ballroom",
    CANNON_EXTERIOR = "cannon_exterior",
    CAPE_HILL = "cape_hill",
    CHRISTMAS_PHOTO_STUDIO = "christmas_photo_studio",
    CIRCUS_MAXIMUS = "circus_maximus",
    COLORFUL_STUDIO = "colorful_studio",
    COMBINATION_ROOM = "combination_room",
    GREEN_POINT_PARK = "green_point_park",
    HILLTOP_CONSTRUCTION = "hilltop_construction",
    LARGE_CORRIDOR = "large_corridor",
    LYTHWOOD_LOUNGE = "lythwood_lounge",
    NEUTRAL = "neutral",
    OBERER_KUHBERG = "oberer_kuhberg",
    OLD_HALL = "old_hall",
    PAUL_LOBE_HAUS = "paul_lobe_haus",
    PHOTO_STUDIO = "photo_studio",
    PHOTO_STUDIO_BROADWAY_HALL = "photo_studio_broadway_hall",
    SNOWY_FIELD = "snowy_field",
    STUDIO_SMALL = "studio_small",
    SUNFLOWERS = "sunflowers",
    TABLE_MOUNTAIN = "table_mountain",
    VENICE_SUNSET = "venice_sunset",
    WIDE_STREET = "wide_street"
}
export declare enum ENVIRONMENT_MAP_EMPTY {
    NONE = "none",
    NULL = "null"
}
export declare enum ENVIRONMENT_MAP_TYPE {
    LDR = "ldr",
    HDR = "hdr",
    NONE = "none",
    NULL = "null"
}
export declare class EnvironmentMapLoader implements ILoader {
    private readonly _renderingEngine;
    private readonly _environmentMapFilenames;
    private readonly _environmentMapHDR;
    private readonly _environmentMapNamesHDR;
    private readonly _environmentMapNamesHDRCustom;
    private readonly _environmentMapNamesHDRKhronos;
    private readonly _environmentMapNamesJPG;
    private readonly _environmentMaps;
    private readonly _eventEngine;
    private readonly _httpClient;
    private readonly _stateEngine;
    private readonly _uuidGenerator;
    private _envMap;
    private _isHDRMap;
    private _pmremGenerator;
    private _textureEncoding;
    private _type;
    constructor(_renderingEngine: RenderingEngine);
    get environmentMap(): THREE.CubeTexture | THREE.Texture | null;
    get isHDRMap(): boolean;
    get textureEncoding(): THREE.ColorSpace;
    set textureEncoding(value: THREE.ColorSpace);
    /**
     * Create a JSON.stringified version of an array of urls or a single url to be saved in the environment map content.
     *
     * @param input
     * @returns
     */
    createSaveableEnvironmentMapContent(input: string | string[]): string;
    getEnvironmentMapImageUrl(name: string | string[]): string;
    init(): void;
    load(name: string | string[]): Promise<boolean>;
    loadEnvMap(name: string | string[], eId?: string): {
        name: string;
        map: Promise<THREE.CubeTexture | THREE.Texture | null>;
        type: ENVIRONMENT_MAP_TYPE;
    };
    /**
     * In case one of our new custom HDR environment maps is loaded, the content is an url to the HDR file.
     * We extract the name of the environment map from the url and return it.
     *
     * @param input
     * @returns
     */
    reconstructSavedEnvironmentMapContent(input: string | string[]): string | string[];
    private assignEnvironmentMap;
    private assignTextureEncoding;
    private loadEnvironmentMap;
    private notify;
}
//# sourceMappingURL=EnvironmentMapLoader.d.ts.map