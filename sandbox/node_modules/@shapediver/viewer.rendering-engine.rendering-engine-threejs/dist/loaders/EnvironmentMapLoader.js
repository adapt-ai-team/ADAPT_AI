"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentMapLoader = exports.ENVIRONMENT_MAP_TYPE = exports.ENVIRONMENT_MAP_EMPTY = exports.ENVIRONMENT_MAP = exports.ENVIRONMENT_MAP_CUBE = void 0;
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable no-async-promise-executor */
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const THREE = __importStar(require("three"));
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const RGBELoader_1 = require("../three/loaders/RGBELoader");
var ENVIRONMENT_MAP_CUBE;
(function (ENVIRONMENT_MAP_CUBE) {
    ENVIRONMENT_MAP_CUBE["DEFAULT"] = "default";
    ENVIRONMENT_MAP_CUBE["DEFAULT_BW"] = "default_bw";
    ENVIRONMENT_MAP_CUBE["BLURRED_LIGHTS"] = "blurred_lights";
    ENVIRONMENT_MAP_CUBE["GEORGENTOR"] = "georgentor";
    ENVIRONMENT_MAP_CUBE["GEORGENTOR_BLUR"] = "georgentor_blur";
    ENVIRONMENT_MAP_CUBE["GEORGENTOR_BLUE_BLUR"] = "georgentor_blue_blur";
    ENVIRONMENT_MAP_CUBE["GEORGENTOR_BW_BLUR"] = "georgentor_bw_blur";
    ENVIRONMENT_MAP_CUBE["LEVELSETS"] = "levelsets";
    ENVIRONMENT_MAP_CUBE["LYTHWOOD_FIELD"] = "lythwood_field";
    ENVIRONMENT_MAP_CUBE["MOUNTAINS"] = "mountains";
    ENVIRONMENT_MAP_CUBE["OCEAN"] = "ocean";
    ENVIRONMENT_MAP_CUBE["PIAZZA_SAN_MARCO"] = "piazza_san_marco";
    ENVIRONMENT_MAP_CUBE["RESIDENTIAL_GARDEN"] = "residential_garden";
    ENVIRONMENT_MAP_CUBE["ROOM_ABSTRACT_1"] = "room_abstract_1";
    ENVIRONMENT_MAP_CUBE["SKY"] = "sky";
    ENVIRONMENT_MAP_CUBE["STORAGE_ROOM"] = "storage_room";
    ENVIRONMENT_MAP_CUBE["STORM"] = "storm";
    ENVIRONMENT_MAP_CUBE["SUBWAY_ENTRANCE"] = "subway_entrance";
    ENVIRONMENT_MAP_CUBE["SUBWAY_ENTRANCE_BW_BLUR"] = "subway_entrance_bw_blur";
    ENVIRONMENT_MAP_CUBE["WHITE"] = "white";
    ENVIRONMENT_MAP_CUBE["YOKOHAMA"] = "yokohama";
})(ENVIRONMENT_MAP_CUBE = exports.ENVIRONMENT_MAP_CUBE || (exports.ENVIRONMENT_MAP_CUBE = {}));
var ENVIRONMENT_MAP;
(function (ENVIRONMENT_MAP) {
    ENVIRONMENT_MAP["DEFAULT_STUDIO"] = "default_studio";
    ENVIRONMENT_MAP["FURNITURE_STUDIO"] = "furniture_studio";
    ENVIRONMENT_MAP["GEM_STUDIO"] = "gem_studio";
    ENVIRONMENT_MAP["HOSPITAL"] = "hospital";
    ENVIRONMENT_MAP["JEWELRY_STUDIO"] = "jewelry_studio";
    ENVIRONMENT_MAP["ANNIVERSARY_LOUNGE"] = "anniversary_lounge";
    ENVIRONMENT_MAP["BALLROOM"] = "ballroom";
    ENVIRONMENT_MAP["CANNON_EXTERIOR"] = "cannon_exterior";
    ENVIRONMENT_MAP["CAPE_HILL"] = "cape_hill";
    ENVIRONMENT_MAP["CHRISTMAS_PHOTO_STUDIO"] = "christmas_photo_studio";
    ENVIRONMENT_MAP["CIRCUS_MAXIMUS"] = "circus_maximus";
    ENVIRONMENT_MAP["COLORFUL_STUDIO"] = "colorful_studio";
    ENVIRONMENT_MAP["COMBINATION_ROOM"] = "combination_room";
    ENVIRONMENT_MAP["GREEN_POINT_PARK"] = "green_point_park";
    ENVIRONMENT_MAP["HILLTOP_CONSTRUCTION"] = "hilltop_construction";
    ENVIRONMENT_MAP["LARGE_CORRIDOR"] = "large_corridor";
    ENVIRONMENT_MAP["LYTHWOOD_LOUNGE"] = "lythwood_lounge";
    ENVIRONMENT_MAP["NEUTRAL"] = "neutral";
    ENVIRONMENT_MAP["OBERER_KUHBERG"] = "oberer_kuhberg";
    ENVIRONMENT_MAP["OLD_HALL"] = "old_hall";
    ENVIRONMENT_MAP["PAUL_LOBE_HAUS"] = "paul_lobe_haus";
    ENVIRONMENT_MAP["PHOTO_STUDIO"] = "photo_studio";
    ENVIRONMENT_MAP["PHOTO_STUDIO_BROADWAY_HALL"] = "photo_studio_broadway_hall";
    ENVIRONMENT_MAP["SNOWY_FIELD"] = "snowy_field";
    ENVIRONMENT_MAP["STUDIO_SMALL"] = "studio_small";
    ENVIRONMENT_MAP["SUNFLOWERS"] = "sunflowers";
    ENVIRONMENT_MAP["TABLE_MOUNTAIN"] = "table_mountain";
    ENVIRONMENT_MAP["VENICE_SUNSET"] = "venice_sunset";
    ENVIRONMENT_MAP["WIDE_STREET"] = "wide_street";
})(ENVIRONMENT_MAP = exports.ENVIRONMENT_MAP || (exports.ENVIRONMENT_MAP = {}));
var ENVIRONMENT_MAP_EMPTY;
(function (ENVIRONMENT_MAP_EMPTY) {
    ENVIRONMENT_MAP_EMPTY["NONE"] = "none";
    ENVIRONMENT_MAP_EMPTY["NULL"] = "null";
})(ENVIRONMENT_MAP_EMPTY = exports.ENVIRONMENT_MAP_EMPTY || (exports.ENVIRONMENT_MAP_EMPTY = {}));
var ENVIRONMENT_MAP_TYPE;
(function (ENVIRONMENT_MAP_TYPE) {
    ENVIRONMENT_MAP_TYPE["LDR"] = "ldr";
    ENVIRONMENT_MAP_TYPE["HDR"] = "hdr";
    ENVIRONMENT_MAP_TYPE["NONE"] = "none";
    ENVIRONMENT_MAP_TYPE["NULL"] = "null";
})(ENVIRONMENT_MAP_TYPE = exports.ENVIRONMENT_MAP_TYPE || (exports.ENVIRONMENT_MAP_TYPE = {}));
class EnvironmentMapLoader {
    // #endregion Properties (15)
    // #region Constructors (1)
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        // #region Properties (15)
        this._environmentMapFilenames = [
            "px",
            "nx",
            "pz",
            "nz",
            "py",
            "ny",
        ];
        this._environmentMapHDR = [];
        this._environmentMapNamesHDR = Object.values(ENVIRONMENT_MAP).filter((value) => typeof value === "string");
        this._environmentMapNamesHDRCustom = [
            "default_studio",
            "furniture_studio",
            "gem_studio",
            "hospital",
            "jewelry_studio",
        ];
        this._environmentMapNamesHDRKhronos = [
            "cannon_exterior",
            "colorful_studio",
            "neutral",
            "wide_street",
        ];
        this._environmentMapNamesJPG = [
            "default",
            "default_bw",
            "blurred_lights",
            "georgentor",
            "georgentor_blur",
            "georgentor_blue_blur",
            "georgentor_bw_blur",
            "levelsets",
            "lythwood_field",
            "mountains",
            "ocean",
            "piazza_san_marco",
            "residential_garden",
            "room_abstract_1",
            "sky",
            "storage_room",
            "storm",
            "subway_entrance",
            "subway_entrance_bw_blur",
            "white",
            "yokohama",
        ];
        this._environmentMaps = {};
        this._eventEngine = viewer_shared_services_1.EventEngine.instance;
        this._httpClient = viewer_shared_services_1.HttpClient.instance;
        this._stateEngine = viewer_shared_services_1.StateEngine.instance;
        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;
        this._envMap = null;
        this._isHDRMap = false;
        this._textureEncoding = THREE.SRGBColorSpace;
        this._type = ENVIRONMENT_MAP_TYPE.NULL;
    }
    // #endregion Constructors (1)
    // #region Public Accessors (4)
    get environmentMap() {
        return this._envMap;
    }
    get isHDRMap() {
        return this._isHDRMap;
    }
    get textureEncoding() {
        return this._textureEncoding;
    }
    set textureEncoding(value) {
        this._textureEncoding = value;
        this.assignTextureEncoding();
    }
    // #endregion Public Accessors (4)
    // #region Public Methods (4)
    /**
     * Create a JSON.stringified version of an array of urls or a single url to be saved in the environment map content.
     *
     * @param input
     * @returns
     */
    createSaveableEnvironmentMapContent(input) {
        if (Array.isArray(input))
            return JSON.stringify(input);
        if (this._environmentMapNamesHDRCustom.indexOf(input) >= 0)
            return ("https://viewer.shapediver.com/v3/envmaps/custom/" +
                input +
                ".hdr");
        return input;
    }
    getEnvironmentMapImageUrl(name) {
        if (Array.isArray(name))
            return "";
        if (this._environmentMapNamesHDR.indexOf(name) >= 0) {
            let url_hdr = "https://viewer.shapediver.com/v3/envmaps/1k/" +
                name +
                "_1k.hdr";
            if (this._environmentMapNamesHDRCustom.indexOf(name) >= 0)
                url_hdr =
                    "https://viewer.shapediver.com/v3/envmaps/custom/" +
                        name +
                        ".hdr";
            else if (this._environmentMapNamesHDRKhronos.indexOf(name) >= 0)
                url_hdr =
                    "https://viewer.shapediver.com/v3/envmaps/khronos/" +
                        name +
                        ".hdr";
            return url_hdr;
        }
        else if (name.startsWith("https://") || name.startsWith("http://")) {
            if (name.endsWith(".hdr") ||
                name.endsWith(".jpg") ||
                name.endsWith(".png")) {
                return name;
            }
        }
        return "";
    }
    init() {
        this._environmentMaps["null"] = {
            name: "null",
            map: Promise.resolve(null),
            type: ENVIRONMENT_MAP_TYPE.NULL,
        };
        this._environmentMaps["none"] = {
            name: "none",
            map: Promise.resolve(null),
            type: ENVIRONMENT_MAP_TYPE.NONE,
        };
        this._pmremGenerator = new THREE.PMREMGenerator(this._renderingEngine.renderer);
        this._pmremGenerator.compileEquirectangularShader();
    }
    load(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const eventId = this._uuidGenerator.create();
            const res = this.loadEnvMap(name, eventId);
            yield this.assignEnvironmentMap(res.name, res.type, eventId);
            return Promise.resolve(true);
        });
    }
    loadEnvMap(name, eId) {
        const eventId = eId || this._uuidGenerator.create();
        const event = {
            type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING,
            id: eventId,
            data: { input: name },
            progress: 0,
            status: "Loading EnvironmentMap",
        };
        this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);
        if (name === "none" || name === "null")
            return this._environmentMaps[name];
        let name_internal, name_caching, url;
        // check if name is a JSON.stringified version of an array of urls
        if (!Array.isArray(name) &&
            name.startsWith('["https') &&
            name.endsWith('"]'))
            try {
                name = JSON.parse(name);
            }
            catch (e) {
                this.notify(eventId, true);
                throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError("EnvironmentMapLoader.load: Was not able to load environment map.", name);
            }
        // deal with string or array, define names for loading and caching
        if (!Array.isArray(name)) {
            name_internal = name.toLowerCase().replace(/ /g, "_");
            name_caching =
                name_internal + this._renderingEngine.environmentMapResolution;
        }
        else {
            if (name.length !== 6) {
                this.notify(eventId, true);
                throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError("EnvironmentMapLoader.load: Was not able to load environment map, exactly 6 files are needed in the array.", name);
            }
            name_internal = JSON.stringify(name, null, 0);
            name_caching = name_internal;
        }
        // check if environment map is already cached
        for (const environmentMap in this._environmentMaps)
            if (environmentMap === name_caching)
                return this._environmentMaps[environmentMap];
        try {
            // define urls for 6 cube images ourselves
            if (!Array.isArray(name)) {
                url = [];
                let i;
                if (this._environmentMapNamesHDR.indexOf(name_internal) >= 0) {
                    let url_hdr = "https://viewer.shapediver.com/v3/envmaps/1k/" +
                        name_internal +
                        "_1k.hdr";
                    if (this._environmentMapNamesHDRCustom.indexOf(name) >= 0)
                        url_hdr =
                            "https://viewer.shapediver.com/v3/envmaps/custom/" +
                                name +
                                ".hdr";
                    else if (this._environmentMapNamesHDRKhronos.indexOf(name_internal) >= 0)
                        url_hdr =
                            "https://viewer.shapediver.com/v3/envmaps/khronos/" +
                                name_internal +
                                ".hdr";
                    this._environmentMapHDR.push(url_hdr);
                    return this.loadEnvironmentMap(name_caching, url_hdr, eventId);
                }
                else if (this._environmentMapNamesJPG.indexOf(name_internal) >= 0) {
                    // found in list of available environment maps with file type jpg
                    for (i = 0; i < this._environmentMapFilenames.length; i++)
                        url.push("https://viewer.shapediver.com/v2/envmaps/" +
                            this._renderingEngine.environmentMapResolution +
                            "/" +
                            name_internal +
                            "/" +
                            this._environmentMapFilenames[i] +
                            ".jpg");
                }
                else if (name.startsWith("https://") ||
                    name.startsWith("http://")) {
                    if (name.endsWith(".hdr")) {
                        this._environmentMapHDR.push(name);
                        return this.loadEnvironmentMap(name_caching, name, eventId);
                    }
                    else {
                        if (!name.endsWith("/"))
                            name += "/";
                        for (i = 0; i < this._environmentMapFilenames.length; i++)
                            url.push(name +
                                this._environmentMapFilenames[i] +
                                ".jpg");
                    }
                }
                else {
                    this.notify(eventId, true);
                    throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError("EnvironmentMapLoader.load: Was not able to load environment map, format not supported.", name);
                }
            }
            else {
                url = name;
            }
            return this.loadEnvironmentMap(name_caching, url, eventId);
        }
        catch (e) {
            this.notify(eventId, true);
            throw e;
        }
    }
    /**
     * In case one of our new custom HDR environment maps is loaded, the content is an url to the HDR file.
     * We extract the name of the environment map from the url and return it.
     *
     * @param input
     * @returns
     */
    reconstructSavedEnvironmentMapContent(input) {
        if (!Array.isArray(input) &&
            input.startsWith("https://viewer.shapediver.com/v3/envmaps/custom/") &&
            input.endsWith(".hdr")) {
            const parts = input.split("/");
            const name = parts[parts.length - 1].split(".")[0];
            if (this._environmentMapNamesHDRCustom.indexOf(name) >= 0)
                return name;
        }
        return input;
    }
    // #endregion Public Methods (4)
    // #region Private Methods (4)
    assignEnvironmentMap(name, type, eventId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (name in this._environmentMaps === false)
                return;
            this._type = type;
            const map = yield this._environmentMaps[name].map;
            this._renderingEngine.materialLoader.assignEnvironmentMap(map, type);
            this._envMap = map;
            this.notify(eventId);
        });
    }
    assignTextureEncoding() {
        for (const e in this._environmentMaps) {
            if (this._environmentMaps[e]) {
                if (this._environmentMaps[e].resolved === true) {
                    this._environmentMaps[e].map.then((m) => {
                        if (m instanceof THREE.Texture) {
                            m.dispose();
                            m.colorSpace = this._textureEncoding;
                            m.needsUpdate = true;
                        }
                    });
                }
            }
        }
    }
    loadEnvironmentMap(name, url, eventId) {
        this._environmentMaps[name] = {
            name,
            type: !Array.isArray(url)
                ? ENVIRONMENT_MAP_TYPE.HDR
                : ENVIRONMENT_MAP_TYPE.LDR,
            map: new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!Array.isArray(url)) {
                        const response = (yield this._httpClient
                            .get(url, undefined, true)
                            .catch(reject));
                        const arrayBufferView = new Uint8Array(response.data);
                        const blob = new Blob([arrayBufferView], {
                            type: response.headers["content-type"],
                        });
                        const blobUrl = URL.createObjectURL(blob);
                        new RGBELoader_1.RGBELoader().load(blobUrl, (texture) => {
                            const map = this._pmremGenerator.fromEquirectangular(texture).texture;
                            this._pmremGenerator.dispose();
                            URL.revokeObjectURL(blobUrl);
                            this._environmentMaps[name].resolved = true;
                            resolve(map);
                        }, () => { }, (error) => reject(error));
                    }
                    else {
                        const promises = [];
                        url.forEach((u) => promises.push(this._httpClient.get(u, undefined, true)));
                        const responses = yield Promise.all(promises);
                        const urls = responses.map((response) => {
                            const arrayBufferView = new Uint8Array(response.data);
                            const blob = new Blob([arrayBufferView], {
                                type: response.headers["content-type"],
                            });
                            return URL.createObjectURL(blob);
                        });
                        new THREE.CubeTextureLoader().load(urls, (map) => {
                            map.colorSpace = THREE.SRGBColorSpace;
                            map.format = THREE.RGBAFormat;
                            map.mapping = THREE.CubeReflectionMapping;
                            urls.forEach((u) => URL.revokeObjectURL(u));
                            this._environmentMaps[name].resolved = true;
                            resolve(map);
                        }, () => { }, (error) => reject(error));
                    }
                }
                catch (e) {
                    this.notify(eventId, true);
                    throw e;
                }
            })),
        };
        return this._environmentMaps[name];
    }
    notify(eventId, failed = false) {
        let event;
        if (failed) {
            event = {
                type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING,
                id: eventId,
                progress: 1,
                status: "Loading of EnvironmentMap failed",
            };
            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);
        }
        else {
            event = {
                type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING,
                id: eventId,
                progress: 1,
                status: "Loaded EnvironmentMap",
            };
            if (this._stateEngine.viewportEngines[this._renderingEngine.id]) {
                this._stateEngine.viewportEngines[this._renderingEngine.id].environmentMapLoaded.resolve(true);
                this._stateEngine.viewportEngines[this._renderingEngine.id].environmentMapLoaded = new viewer_shared_services_1.StatePromise();
            }
            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, event);
        }
    }
}
exports.EnvironmentMapLoader = EnvironmentMapLoader;
//# sourceMappingURL=EnvironmentMapLoader.js.map