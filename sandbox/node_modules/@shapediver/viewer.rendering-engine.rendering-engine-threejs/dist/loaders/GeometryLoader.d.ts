import { IBox } from "@shapediver/viewer.shared.math";
import { GeometryData, InstanceData, IPrimitiveData } from "@shapediver/viewer.shared.types";
import * as THREE from "three";
import { ILoader } from "../interfaces/ILoader";
import { SDData } from "../objects/SDData";
import { RenderingEngine } from "../RenderingEngine";
export declare class GeometryLoader implements ILoader {
    private readonly _renderingEngine;
    private _gemCubeCamera?;
    private _gemCubeCameraRenderTarget?;
    private _gemNormalMaterial?;
    private _gemScene?;
    private _gemSphericalMapsCache;
    private _geometryCache;
    private _logger;
    private _primitiveCache;
    constructor(_renderingEngine: RenderingEngine);
    emptyGeometryCache(): void;
    init(): void;
    /**
     * Create a geometry object with the provided geometry data.
     *
     * @param geometry the geometry data
     * @returns the geometry object
     */
    load(geometry: GeometryData, parent: SDData, newChild: boolean, skeleton?: THREE.Skeleton, instanceData?: InstanceData): IBox;
    loadPrimitive(primitive: IPrimitiveData): THREE.BufferGeometry;
    removeFromGemSphericalMapsCache(id: string): void;
    removeFromGeometryCache(id: string): void;
    private checkNormals;
    private convertToTriangleMode;
    private createCubeNormalMap;
    private createMesh;
    private getAttributeName;
    private loadAttribute;
    private removeFromPrimitiveCache;
}
//# sourceMappingURL=GeometryLoader.d.ts.map