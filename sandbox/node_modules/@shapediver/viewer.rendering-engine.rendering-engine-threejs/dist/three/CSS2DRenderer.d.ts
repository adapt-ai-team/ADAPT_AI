import { Camera, Object3D, Scene, Vector2 } from "three";
declare class CSS2DObject extends Object3D {
    center: Vector2;
    element: HTMLElement;
    isCSS2DObject: boolean;
    constructor(element?: HTMLDivElement);
    copy(source: this, recursive?: boolean): this;
}
declare type CSS2DParameters = {
    element?: HTMLElement;
};
declare class CSS2DRenderer {
    private readonly _cache;
    private _height;
    private _heightHalf;
    private _width;
    private _widthHalf;
    domElement: HTMLElement;
    constructor(parameters?: CSS2DParameters);
    filterAndFlatten(scene: Scene): CSS2DObject[];
    getDistanceToSquared(object1: Object3D, object2: Object3D): number;
    getSize(): {
        width: number;
        height: number;
    };
    render(scene: Scene, camera: Camera): void;
    renderObject(o: Object3D, scene: Scene, camera: Camera): void;
    setSize(width: number, height: number): void;
    zOrder(scene: Scene): void;
}
export { CSS2DObject, CSS2DRenderer };
//# sourceMappingURL=CSS2DRenderer.d.ts.map