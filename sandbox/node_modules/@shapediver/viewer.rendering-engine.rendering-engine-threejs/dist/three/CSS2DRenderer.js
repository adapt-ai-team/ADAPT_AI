"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSS2DRenderer = exports.CSS2DObject = void 0;
const three_1 = require("three");
class CSS2DObject extends three_1.Object3D {
    // #endregion Properties (3)
    // #region Constructors (1)
    constructor(element = document.createElement("div")) {
        super();
        this.isCSS2DObject = true;
        this.element = element;
        this.element.style.position = "absolute";
        this.element.style.userSelect = "none";
        this.element.setAttribute("draggable", "false");
        this.center = new three_1.Vector2(0.5, 0.5); // ( 0, 0 ) is the lower left; ( 1, 1 ) is the top right
        this.addEventListener("removed", () => {
            this.traverse((o) => {
                const object = o;
                if (object.element instanceof Element &&
                    object.element.parentNode !== null) {
                    object.element.parentNode.removeChild(object.element);
                }
            });
        });
    }
    // #endregion Constructors (1)
    // #region Public Methods (1)
    copy(source, recursive) {
        super.copy(source, recursive);
        this.element = source.element.cloneNode(true);
        this.center = source.center;
        return this;
    }
}
exports.CSS2DObject = CSS2DObject;
//
const _vector = new three_1.Vector3();
const _viewMatrix = new three_1.Matrix4();
const _viewProjectionMatrix = new three_1.Matrix4();
const _a = new three_1.Vector3();
const _b = new three_1.Vector3();
class CSS2DRenderer {
    // #endregion Properties (6)
    // #region Constructors (1)
    constructor(parameters) {
        // #region Properties (6)
        this._cache = {
            objects: new WeakMap(),
        };
        this._height = 0;
        this._heightHalf = 0;
        this._width = 0;
        this._widthHalf = 0;
        const domElement = (parameters === null || parameters === void 0 ? void 0 : parameters.element) !== undefined
            ? parameters.element
            : document.createElement("div");
        domElement.style.overflow = "hidden";
        this.domElement = domElement;
    }
    // #endregion Constructors (1)
    // #region Public Methods (7)
    filterAndFlatten(scene) {
        const result = [];
        scene.traverse((object) => {
            if (object.isCSS2DObject)
                result.push(object);
        });
        return result;
    }
    getDistanceToSquared(object1, object2) {
        _a.setFromMatrixPosition(object1.matrixWorld);
        _b.setFromMatrixPosition(object2.matrixWorld);
        return _a.distanceToSquared(_b);
    }
    getSize() {
        return {
            width: this._width,
            height: this._height,
        };
    }
    render(scene, camera) {
        if (scene.matrixWorldAutoUpdate === true)
            scene.updateMatrixWorld();
        if (camera.parent === null && camera.matrixWorldAutoUpdate === true)
            camera.updateMatrixWorld();
        _viewMatrix.copy(camera.matrixWorldInverse);
        _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);
        this.renderObject(scene, scene, camera);
        this.zOrder(scene);
    }
    renderObject(o, scene, camera) {
        if (o.isCSS2DObject) {
            const object = o;
            _vector.setFromMatrixPosition(object.matrixWorld);
            _vector.applyMatrix4(_viewProjectionMatrix);
            const visible = object.visible === true &&
                _vector.z >= -1 &&
                _vector.z <= 1 &&
                object.layers.test(camera.layers) === true;
            object.element.style.display = visible === true ? "" : "none";
            if (visible === true) {
                object.onBeforeRender(this, scene, camera);
                const element = object.element;
                element.style.transform =
                    "translate(" +
                        -100 * object.center.x +
                        "%," +
                        -100 * object.center.y +
                        "%)" +
                        "translate(" +
                        (_vector.x * this._widthHalf + this._widthHalf) +
                        "px," +
                        (-_vector.y * this._heightHalf + this._heightHalf) +
                        "px)";
                if (element.parentNode !== this.domElement) {
                    this.domElement.appendChild(element);
                }
                object.onAfterRender(this, scene, camera);
            }
            const objectData = {
                distanceToCameraSquared: this.getDistanceToSquared(camera, object),
            };
            this._cache.objects.set(object, objectData);
        }
        for (let i = 0, l = o.children.length; i < l; i++) {
            this.renderObject(o.children[i], scene, camera);
        }
    }
    setSize(width, height) {
        this._width = width;
        this._height = height;
        this._widthHalf = this._width / 2;
        this._heightHalf = this._height / 2;
        this.domElement.style.width = width + "px";
        this.domElement.style.height = height + "px";
    }
    zOrder(scene) {
        const sorted = this.filterAndFlatten(scene).sort((a, b) => {
            if (a.renderOrder !== b.renderOrder) {
                return b.renderOrder - a.renderOrder;
            }
            const distanceA = this._cache.objects.get(a).distanceToCameraSquared;
            const distanceB = this._cache.objects.get(b).distanceToCameraSquared;
            return distanceA - distanceB;
        });
        const zMax = sorted.length;
        for (let i = 0, l = sorted.length; i < l; i++) {
            sorted[i].element.style.zIndex = zMax - i + "";
        }
    }
}
exports.CSS2DRenderer = CSS2DRenderer;
//# sourceMappingURL=CSS2DRenderer.js.map