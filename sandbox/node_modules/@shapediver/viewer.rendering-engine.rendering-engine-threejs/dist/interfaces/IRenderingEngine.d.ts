import { IRenderingEngine } from "@shapediver/viewer.rendering-engine.rendering-engine";
import { Color, ISDTFAttributeVisualizationData, ISDTFOverview, MATERIAL_TYPE, SDTFItemData, TEXTURE_ENCODING, TONE_MAPPING } from "@shapediver/viewer.shared.types";
import { quat } from "gl-matrix";
import * as THREE from "three";
export interface IRenderingEngineThreeJS extends IRenderingEngine {
    automaticColorAdjustment: boolean;
    beautyRenderBlendingDuration: number;
    beautyRenderDelay: number;
    clearAlpha: number;
    clearColor: Color;
    defaultMaterialColor: Color;
    environmentMap: string | string[];
    environmentMapAsBackground: boolean;
    environmentMapBlurriness: number;
    environmentMapForUnlitMaterials: boolean;
    environmentMapIntensity: number;
    environmentMapResolution: string;
    environmentMapRotation: quat;
    gridColor: Color;
    gridVisibility: boolean;
    groundPlaneColor: Color;
    groundPlaneShadowColor: Color;
    groundPlaneShadowVisibility: boolean;
    groundPlaneVisibility: boolean;
    lightSceneId: string;
    lights: boolean;
    materialOverrideType: MATERIAL_TYPE | undefined;
    maximumRenderingSize: {
        width: number;
        height: number;
    };
    outputEncoding: TEXTURE_ENCODING;
    physicallyCorrectLights: boolean;
    postRenderCallback?: (renderer: THREE.WebGLRenderer, scene: THREE.Scene, camera: THREE.Camera) => void;
    preRenderCallback?: (renderer: THREE.WebGLRenderer) => void;
    shadows: boolean;
    softShadows: boolean;
    textureEncoding: TEXTURE_ENCODING;
    toneMapping: TONE_MAPPING;
    toneMappingExposure: number;
    visualizeAttributes: ((overview: ISDTFOverview, itemData?: SDTFItemData) => ISDTFAttributeVisualizationData) | undefined;
    updateEnvironmentGeometry(): void;
}
//# sourceMappingURL=IRenderingEngine.d.ts.map