"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiPointsMaterial = void 0;
const THREE = __importStar(require("three"));
const multi_points_1 = require("../shaders/multi_points");
// #endregion Interfaces (1)
// #region Classes (1)
class MultiPointsMaterial extends THREE.PointsMaterial {
    // #endregion Properties (22)
    // #region Constructors (1)
    constructor(params) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;
        super();
        // #region Properties (22)
        this.alphaMap_0 = null;
        this.alphaMap_1 = null;
        this.alphaMap_2 = null;
        this.alphaMap_3 = null;
        this.alphaMap_4 = null;
        this.alphaMap_5 = null;
        this.alphaMap_6 = null;
        this.alphaMap_7 = null;
        this.color_0 = new THREE.Color(0xffffff);
        this.color_1 = new THREE.Color(0xffffff);
        this.color_2 = new THREE.Color(0xffffff);
        this.color_3 = new THREE.Color(0xffffff);
        this.color_4 = new THREE.Color(0xffffff);
        this.color_5 = new THREE.Color(0xffffff);
        this.color_6 = new THREE.Color(0xffffff);
        this.color_7 = new THREE.Color(0xffffff);
        this.map_0 = null;
        this.map_1 = null;
        this.map_2 = null;
        this.map_3 = null;
        this.map_4 = null;
        this.map_5 = null;
        this.map_6 = null;
        this.map_7 = null;
        this.materialIndexDataTexture = null;
        this.materialIndexDataTextureSize = 1024;
        this.sizeAttenuation_0 = false;
        this.sizeAttenuation_1 = false;
        this.sizeAttenuation_2 = false;
        this.sizeAttenuation_3 = false;
        this.sizeAttenuation_4 = false;
        this.sizeAttenuation_5 = false;
        this.sizeAttenuation_6 = false;
        this.sizeAttenuation_7 = false;
        this.size_0 = 1.0;
        this.size_1 = 1.0;
        this.size_2 = 1.0;
        this.size_3 = 1.0;
        this.size_4 = 1.0;
        this.size_5 = 1.0;
        this.size_6 = 1.0;
        this.size_7 = 1.0;
        this.isMultiPointsMaterial = true;
        const uniforms = {
            materialIndexDataTexture: { value: null },
            materialIndexDataTextureSize: { value: 1024 },
            map_0: { value: null },
            color_0: { value: new THREE.Color(0xff0000) },
            alphaMap_0: { value: null },
            size_0: { value: 1.0 },
            sizeAttenuation_0: { value: false },
            map_1: { value: null },
            color_1: { value: new THREE.Color(0x00ff00) },
            alphaMap_1: { value: null },
            size_1: { value: 1.0 },
            sizeAttenuation_1: { value: false },
            map_2: { value: null },
            color_2: { value: new THREE.Color(0x0000ff) },
            alphaMap_2: { value: null },
            size_2: { value: 1.0 },
            sizeAttenuation_2: { value: false },
            map_3: { value: null },
            color_3: { value: new THREE.Color(0x0000ff) },
            alphaMap_3: { value: null },
            size_3: { value: 1.0 },
            sizeAttenuation_3: { value: false },
            map_4: { value: null },
            color_4: { value: new THREE.Color(0x0000ff) },
            alphaMap_4: { value: null },
            size_4: { value: 1.0 },
            sizeAttenuation_4: { value: false },
            map_5: { value: null },
            color_5: { value: new THREE.Color(0x0000ff) },
            alphaMap_5: { value: null },
            size_5: { value: 1.0 },
            sizeAttenuation_5: { value: false },
            map_6: { value: null },
            color_6: { value: new THREE.Color(0x0000ff) },
            alphaMap_6: { value: null },
            size_6: { value: 1.0 },
            sizeAttenuation_6: { value: false },
            map_7: { value: null },
            color_7: { value: new THREE.Color(0x0000ff) },
            alphaMap_7: { value: null },
            size_7: { value: 1.0 },
            sizeAttenuation_7: { value: false },
        };
        this._extraUniforms = uniforms;
        this.onBeforeCompile = function (shader) {
            for (const uniformName in uniforms) {
                shader.uniforms[uniformName] = uniforms[uniformName];
            }
            shader.vertexShader = multi_points_1.vert;
            shader.fragmentShader = multi_points_1.frag;
        };
        Object.defineProperties(this, {
            materialIndexDataTexture: {
                get: function () {
                    return uniforms.materialIndexDataTexture.value;
                },
                set: function (v) {
                    uniforms.materialIndexDataTexture.value = v;
                },
            },
            materialIndexDataTextureSize: {
                get: function () {
                    return uniforms.materialIndexDataTextureSize.value;
                },
                set: function (v) {
                    uniforms.materialIndexDataTextureSize.value = v;
                },
            },
            map_0: {
                get: function () {
                    return uniforms.map_0.value;
                },
                set: function (v) {
                    uniforms.map_0.value = v;
                },
            },
            color_0: {
                get: function () {
                    return uniforms.color_0.value;
                },
                set: function (v) {
                    uniforms.color_0.value = v;
                },
            },
            alphaMap_0: {
                get: function () {
                    return uniforms.alphaMap_0.value;
                },
                set: function (v) {
                    uniforms.alphaMap_0.value = v;
                },
            },
            size_0: {
                get: function () {
                    return uniforms.size_0.value;
                },
                set: function (v) {
                    uniforms.size_0.value = v;
                },
            },
            sizeAttenuation_0: {
                get: function () {
                    return uniforms.sizeAttenuation_0.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_0.value = v;
                },
            },
            map_1: {
                get: function () {
                    return uniforms.map_1.value;
                },
                set: function (v) {
                    uniforms.map_1.value = v;
                },
            },
            color_1: {
                get: function () {
                    return uniforms.color_1.value;
                },
                set: function (v) {
                    uniforms.color_1.value = v;
                },
            },
            alphaMap_1: {
                get: function () {
                    return uniforms.alphaMap_1.value;
                },
                set: function (v) {
                    uniforms.alphaMap_1.value = v;
                },
            },
            size_1: {
                get: function () {
                    return uniforms.size_1.value;
                },
                set: function (v) {
                    uniforms.size_1.value = v;
                },
            },
            sizeAttenuation_1: {
                get: function () {
                    return uniforms.sizeAttenuation_1.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_1.value = v;
                },
            },
            map_2: {
                get: function () {
                    return uniforms.map_2.value;
                },
                set: function (v) {
                    uniforms.map_2.value = v;
                },
            },
            color_2: {
                get: function () {
                    return uniforms.color_2.value;
                },
                set: function (v) {
                    uniforms.color_2.value = v;
                },
            },
            alphaMap_2: {
                get: function () {
                    return uniforms.alphaMap_2.value;
                },
                set: function (v) {
                    uniforms.alphaMap_2.value = v;
                },
            },
            size_2: {
                get: function () {
                    return uniforms.size_2.value;
                },
                set: function (v) {
                    uniforms.size_2.value = v;
                },
            },
            sizeAttenuation_2: {
                get: function () {
                    return uniforms.sizeAttenuation_2.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_2.value = v;
                },
            },
            map_3: {
                get: function () {
                    return uniforms.map_3.value;
                },
                set: function (v) {
                    uniforms.map_3.value = v;
                },
            },
            color_3: {
                get: function () {
                    return uniforms.color_3.value;
                },
                set: function (v) {
                    uniforms.color_3.value = v;
                },
            },
            alphaMap_3: {
                get: function () {
                    return uniforms.alphaMap_3.value;
                },
                set: function (v) {
                    uniforms.alphaMap_3.value = v;
                },
            },
            size_3: {
                get: function () {
                    return uniforms.size_3.value;
                },
                set: function (v) {
                    uniforms.size_3.value = v;
                },
            },
            sizeAttenuation_3: {
                get: function () {
                    return uniforms.sizeAttenuation_3.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_3.value = v;
                },
            },
            map_4: {
                get: function () {
                    return uniforms.map_4.value;
                },
                set: function (v) {
                    uniforms.map_4.value = v;
                },
            },
            color_4: {
                get: function () {
                    return uniforms.color_4.value;
                },
                set: function (v) {
                    uniforms.color_4.value = v;
                },
            },
            alphaMap_4: {
                get: function () {
                    return uniforms.alphaMap_4.value;
                },
                set: function (v) {
                    uniforms.alphaMap_4.value = v;
                },
            },
            size_4: {
                get: function () {
                    return uniforms.size_4.value;
                },
                set: function (v) {
                    uniforms.size_4.value = v;
                },
            },
            sizeAttenuation_4: {
                get: function () {
                    return uniforms.sizeAttenuation_4.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_4.value = v;
                },
            },
            map_5: {
                get: function () {
                    return uniforms.map_5.value;
                },
                set: function (v) {
                    uniforms.map_5.value = v;
                },
            },
            color_5: {
                get: function () {
                    return uniforms.color_5.value;
                },
                set: function (v) {
                    uniforms.color_5.value = v;
                },
            },
            alphaMap_5: {
                get: function () {
                    return uniforms.alphaMap_5.value;
                },
                set: function (v) {
                    uniforms.alphaMap_5.value = v;
                },
            },
            size_5: {
                get: function () {
                    return uniforms.size_5.value;
                },
                set: function (v) {
                    uniforms.size_5.value = v;
                },
            },
            sizeAttenuation_5: {
                get: function () {
                    return uniforms.sizeAttenuation_5.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_5.value = v;
                },
            },
            map_6: {
                get: function () {
                    return uniforms.map_6.value;
                },
                set: function (v) {
                    uniforms.map_6.value = v;
                },
            },
            color_6: {
                get: function () {
                    return uniforms.color_6.value;
                },
                set: function (v) {
                    uniforms.color_6.value = v;
                },
            },
            alphaMap_6: {
                get: function () {
                    return uniforms.alphaMap_6.value;
                },
                set: function (v) {
                    uniforms.alphaMap_6.value = v;
                },
            },
            size_6: {
                get: function () {
                    return uniforms.size_6.value;
                },
                set: function (v) {
                    uniforms.size_6.value = v;
                },
            },
            sizeAttenuation_6: {
                get: function () {
                    return uniforms.sizeAttenuation_6.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_6.value = v;
                },
            },
            map_7: {
                get: function () {
                    return uniforms.map_7.value;
                },
                set: function (v) {
                    uniforms.map_7.value = v;
                },
            },
            color_7: {
                get: function () {
                    return uniforms.color_7.value;
                },
                set: function (v) {
                    uniforms.color_7.value = v;
                },
            },
            alphaMap_7: {
                get: function () {
                    return uniforms.alphaMap_7.value;
                },
                set: function (v) {
                    uniforms.alphaMap_7.value = v;
                },
            },
            size_7: {
                get: function () {
                    return uniforms.size_7.value;
                },
                set: function (v) {
                    uniforms.size_7.value = v;
                },
            },
            sizeAttenuation_7: {
                get: function () {
                    return uniforms.sizeAttenuation_7.value;
                },
                set: function (v) {
                    uniforms.sizeAttenuation_7.value = v;
                },
            },
        });
        this.materialIndexDataTexture = (_a = params.materialIndexDataTexture) !== null && _a !== void 0 ? _a : null;
        this.materialIndexDataTextureSize =
            (_b = params.materialIndexDataTextureSize) !== null && _b !== void 0 ? _b : 1024;
        this.map_0 = (_c = params.map_0) !== null && _c !== void 0 ? _c : null;
        this.color_0 = new THREE.Color((_d = params.color_0) !== null && _d !== void 0 ? _d : 0xffffff);
        this.alphaMap_0 = (_e = params.alphaMap_0) !== null && _e !== void 0 ? _e : null;
        this.size_0 = (_f = params.size_0) !== null && _f !== void 0 ? _f : 1.0;
        this.sizeAttenuation_0 = (_g = params.sizeAttenuation_0) !== null && _g !== void 0 ? _g : false;
        this.map_1 = (_h = params.map_1) !== null && _h !== void 0 ? _h : null;
        this.color_1 = new THREE.Color((_j = params.color_1) !== null && _j !== void 0 ? _j : 0xffffff);
        this.alphaMap_1 = (_k = params.alphaMap_1) !== null && _k !== void 0 ? _k : null;
        this.size_1 = (_l = params.size_1) !== null && _l !== void 0 ? _l : 1.0;
        this.sizeAttenuation_1 = (_m = params.sizeAttenuation_1) !== null && _m !== void 0 ? _m : false;
        this.map_2 = (_o = params.map_2) !== null && _o !== void 0 ? _o : null;
        this.color_2 = new THREE.Color((_p = params.color_2) !== null && _p !== void 0 ? _p : 0xffffff);
        this.alphaMap_2 = (_q = params.alphaMap_2) !== null && _q !== void 0 ? _q : null;
        this.size_2 = (_r = params.size_2) !== null && _r !== void 0 ? _r : 1.0;
        this.sizeAttenuation_2 = (_s = params.sizeAttenuation_2) !== null && _s !== void 0 ? _s : false;
        this.map_3 = (_t = params.map_3) !== null && _t !== void 0 ? _t : null;
        this.color_3 = new THREE.Color((_u = params.color_3) !== null && _u !== void 0 ? _u : 0xffffff);
        this.alphaMap_3 = (_v = params.alphaMap_3) !== null && _v !== void 0 ? _v : null;
        this.size_3 = (_w = params.size_3) !== null && _w !== void 0 ? _w : 1.0;
        this.sizeAttenuation_3 = (_x = params.sizeAttenuation_3) !== null && _x !== void 0 ? _x : false;
        this.map_4 = (_y = params.map_4) !== null && _y !== void 0 ? _y : null;
        this.color_4 = new THREE.Color((_z = params.color_4) !== null && _z !== void 0 ? _z : 0xffffff);
        this.alphaMap_4 = (_0 = params.alphaMap_4) !== null && _0 !== void 0 ? _0 : null;
        this.size_4 = (_1 = params.size_4) !== null && _1 !== void 0 ? _1 : 1.0;
        this.sizeAttenuation_4 = (_2 = params.sizeAttenuation_4) !== null && _2 !== void 0 ? _2 : false;
        this.map_5 = (_3 = params.map_5) !== null && _3 !== void 0 ? _3 : null;
        this.color_5 = new THREE.Color((_4 = params.color_5) !== null && _4 !== void 0 ? _4 : 0xffffff);
        this.alphaMap_5 = (_5 = params.alphaMap_5) !== null && _5 !== void 0 ? _5 : null;
        this.size_5 = (_6 = params.size_5) !== null && _6 !== void 0 ? _6 : 1.0;
        this.sizeAttenuation_5 = (_7 = params.sizeAttenuation_5) !== null && _7 !== void 0 ? _7 : false;
        this.map_6 = (_8 = params.map_6) !== null && _8 !== void 0 ? _8 : null;
        this.color_6 = new THREE.Color((_9 = params.color_6) !== null && _9 !== void 0 ? _9 : 0xffffff);
        this.alphaMap_6 = (_10 = params.alphaMap_6) !== null && _10 !== void 0 ? _10 : null;
        this.size_6 = (_11 = params.size_6) !== null && _11 !== void 0 ? _11 : 1.0;
        this.sizeAttenuation_6 = (_12 = params.sizeAttenuation_6) !== null && _12 !== void 0 ? _12 : false;
        this.map_7 = (_13 = params.map_7) !== null && _13 !== void 0 ? _13 : null;
        this.color_7 = new THREE.Color((_14 = params.color_7) !== null && _14 !== void 0 ? _14 : 0xffffff);
        this.alphaMap_7 = (_15 = params.alphaMap_7) !== null && _15 !== void 0 ? _15 : null;
        this.size_7 = (_16 = params.size_7) !== null && _16 !== void 0 ? _16 : 1.0;
        this.sizeAttenuation_7 = (_17 = params.sizeAttenuation_7) !== null && _17 !== void 0 ? _17 : false;
        this.setValues(params);
    }
    // #endregion Constructors (1)
    // #region Public Methods (1)
    copy(s) {
        super.copy(s);
        const source = s;
        this.materialIndexDataTexture = source.materialIndexDataTexture;
        this.materialIndexDataTextureSize = source.materialIndexDataTextureSize;
        this.map_0 = source.map_0;
        this.color_0.copy(source.color_0);
        this.alphaMap_0 = source.alphaMap_0;
        this.size_0 = source.size_0;
        this.sizeAttenuation_0 = source.sizeAttenuation_0;
        this.map_1 = source.map_1;
        this.color_1.copy(source.color_1);
        this.alphaMap_1 = source.alphaMap_1;
        this.size_1 = source.size_1;
        this.sizeAttenuation_1 = source.sizeAttenuation_1;
        this.map_2 = source.map_2;
        this.color_2.copy(source.color_2);
        this.alphaMap_2 = source.alphaMap_2;
        this.size_2 = source.size_2;
        this.sizeAttenuation_2 = source.sizeAttenuation_2;
        this.map_3 = source.map_3;
        this.color_3.copy(source.color_3);
        this.alphaMap_3 = source.alphaMap_3;
        this.size_3 = source.size_3;
        this.sizeAttenuation_3 = source.sizeAttenuation_3;
        this.map_4 = source.map_4;
        this.color_4.copy(source.color_4);
        this.alphaMap_4 = source.alphaMap_4;
        this.size_4 = source.size_4;
        this.sizeAttenuation_4 = source.sizeAttenuation_4;
        this.map_5 = source.map_5;
        this.color_5.copy(source.color_5);
        this.alphaMap_5 = source.alphaMap_5;
        this.size_5 = source.size_5;
        this.sizeAttenuation_5 = source.sizeAttenuation_5;
        this.map_6 = source.map_6;
        this.color_6.copy(source.color_6);
        this.alphaMap_6 = source.alphaMap_6;
        this.size_6 = source.size_6;
        this.sizeAttenuation_6 = source.sizeAttenuation_6;
        this.map_7 = source.map_7;
        this.color_7.copy(source.color_7);
        this.alphaMap_7 = source.alphaMap_7;
        this.size_7 = source.size_7;
        this.sizeAttenuation_7 = source.sizeAttenuation_7;
        return this;
    }
}
exports.MultiPointsMaterial = MultiPointsMaterial;
// #endregion Classes (1)
//# sourceMappingURL=MultiPointsMaterial.js.map