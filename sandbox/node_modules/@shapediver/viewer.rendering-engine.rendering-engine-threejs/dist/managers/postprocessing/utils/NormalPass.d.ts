import { Pass, Resolution } from "postprocessing";
import { Camera, DepthTexture, Scene, Texture, WebGLRenderer, WebGLRenderTarget } from "three";
import { RenderPass } from "./RenderPass";
/**
 * A pass that renders the normals of a given scene.
 */
export declare class NormalPass extends Pass {
    renderPass: RenderPass;
    renderTarget: WebGLRenderTarget | undefined;
    resolution: Resolution;
    dTexture: any;
    /**
     * Constructs a new normal pass.
     *
     * @param {Scene} scene - The scene to render.
     * @param {Camera} camera - The camera to use to render the scene.
     * @param {Object} [options] - The options.
     * @param {WebGLRenderTarget} [options.renderTarget] - A custom render target.
     * @param {Number} [options.resolutionScale=1.0] - The resolution scale.
     * @param {Number} [options.resolutionX=Resolution.AUTO_SIZE] - The horizontal resolution.
     * @param {Number} [options.resolutionY=Resolution.AUTO_SIZE] - The vertical resolution.
     * @param {Number} [options.width=Resolution.AUTO_SIZE] - Deprecated. Use resolutionX instead.
     * @param {Number} [options.height=Resolution.AUTO_SIZE] - Deprecated. Use resolutionY instead.
     */
    constructor(scene: Scene, camera: Camera, { renderTarget, resolutionScale, width, height, resolutionX, resolutionY, }?: {
        renderTarget?: WebGLRenderTarget;
        resolutionScale?: number;
        resolutionX?: number;
        resolutionY?: number;
        width?: number;
        height?: number;
    });
    set mainScene(value: Scene);
    set mainCamera(value: Camera);
    /**
     * The normal texture.
     *
     * @type {Texture}
     */
    get texture(): Texture | undefined;
    get depthTexture(): DepthTexture | undefined;
    /**
     * The normal texture.
     *
     * @deprecated Use texture instead.
     * @return {Texture} The texture.
     */
    getTexture(): Texture | undefined;
    /**
     * Returns the resolution settings.
     *
     * @deprecated Use resolution instead.
     * @return {Resolution} The resolution.
     */
    getResolution(): Resolution;
    /**
     * Returns the current resolution scale.
     *
     * @return {Number} The resolution scale.
     * @deprecated Use resolution.preferredWidth or resolution.preferredHeight instead.
     */
    getResolutionScale(): number;
    /**
     * Sets the resolution scale.
     *
     * @param {Number} scale - The new resolution scale.
     * @deprecated Use resolution.preferredWidth or resolution.preferredHeight instead.
     */
    setResolutionScale(scale: number): void;
    /**
     * Renders the scene normals.
     *
     * @param {WebGLRenderer} renderer - The renderer.
     * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
     * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
     * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
     * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
     */
    render(renderer: WebGLRenderer): void;
    /**
     * Updates the size of this pass.
     *
     * @param {Number} width - The width.
     * @param {Number} height - The height.
     */
    setSize(width: number, height: number): void;
}
//# sourceMappingURL=NormalPass.d.ts.map