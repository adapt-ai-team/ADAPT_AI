/**
 * A pass that renders a given scene into the input buffer or to screen.
 *
 * This pass uses a {@link ClearPass} to clear the target buffer.
 */
import { ClearPass, OverrideMaterialManager, Pass } from "postprocessing";
import { Camera, Material, Scene, WebGLRenderer, WebGLRenderTarget } from "three";
export declare class RenderPass extends Pass {
    clearPass: ClearPass;
    overrideMaterialManager: OverrideMaterialManager | null;
    ignoreBackground: boolean;
    skipShadowMapUpdate: boolean;
    selection: any;
    /**
     * Constructs a new render pass.
     *
     * @param {Scene} scene - The scene to render.
     * @param {Camera} camera - The camera to use to render the scene.
     * @param {Material} [overrideMaterial=null] - An override material.
     */
    constructor(scene: Scene, camera: Camera, overrideMaterial?: Material | null);
    set mainScene(value: Scene);
    set mainCamera(value: Camera);
    get renderToScreen(): boolean;
    set renderToScreen(value: boolean);
    /**
     * The current override material.
     *
     * @type {Material}
     */
    get overrideMaterial(): any;
    set overrideMaterial(value: any);
    /**
     * Returns the current override material.
     *
     * @deprecated Use overrideMaterial instead.
     * @return {Material} The material.
     */
    getOverrideMaterial(): Material;
    /**
     * Sets the override material.
     *
     * @deprecated Use overrideMaterial instead.
     * @return {Material} value - The material.
     */
    setOverrideMaterial(value: any): void;
    /**
     * Indicates whether the target buffer should be cleared before rendering.
     *
     * @type {Boolean}
     * @deprecated Use clearPass.enabled instead.
     */
    get clear(): boolean;
    set clear(value: boolean);
    /**
     * Returns the selection. Default is `null` (no restriction).
     *
     * @deprecated Use selection instead.
     * @return {Selection} The selection.
     */
    getSelection(): Selection;
    /**
     * Sets the selection. Set to `null` to disable.
     *
     * @deprecated Use selection instead.
     * @param {Selection} value - The selection.
     */
    setSelection(value: Selection): void;
    /**
     * Indicates whether the scene background is disabled.
     *
     * @deprecated Use ignoreBackground instead.
     * @return {Boolean} Whether the scene background is disabled.
     */
    isBackgroundDisabled(): boolean;
    /**
     * Enables or disables the scene background.
     *
     * @deprecated Use ignoreBackground instead.
     * @param {Boolean} value - Whether the scene background should be disabled.
     */
    setBackgroundDisabled(value: boolean): void;
    /**
     * Indicates whether the shadow map auto update is disabled.
     *
     * @deprecated Use skipShadowMapUpdate instead.
     * @return {Boolean} Whether the shadow map update is disabled.
     */
    isShadowMapDisabled(): boolean;
    /**
     * Enables or disables the shadow map auto update.
     *
     * @deprecated Use skipShadowMapUpdate instead.
     * @param {Boolean} value - Whether the shadow map auto update should be disabled.
     */
    setShadowMapDisabled(value: boolean): void;
    /**
     * Returns the clear pass.
     *
     * @deprecated Use clearPass.enabled instead.
     * @return {ClearPass} The clear pass.
     */
    getClearPass(): ClearPass;
    /**
     * Renders the scene.
     *
     * @param {WebGLRenderer} renderer - The renderer.
     * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
     * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
     * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
     * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
     */
    render(renderer: WebGLRenderer, inputBuffer: WebGLRenderTarget, outputBuffer: WebGLRenderTarget, deltaTime: number, stencilTest: boolean): void;
}
//# sourceMappingURL=RenderPass.d.ts.map