import { Pass } from "postprocessing";
import { Camera, Texture, Vector2, WebGLRenderer, WebGLRenderTarget } from "three";
export declare class PoissionDenoisePass extends Pass {
    static DefaultOptions: {
        iterations: number;
        radius: number;
        rings: number;
        lumaPhi: number;
        depthPhi: number;
        normalPhi: number;
        samples: number;
        distance: number;
        normalTexture: null;
    };
    static blueNoiseTexture?: Texture;
    index: number;
    inputTexture: Texture;
    iterations: number;
    radius: number;
    renderTargetA: WebGLRenderTarget;
    renderTargetB: WebGLRenderTarget;
    rings: number;
    samples: number;
    constructor(camera: Camera, inputTexture: Texture, depthTexture: Texture, options?: {
        [key: string]: unknown;
    });
    static loadBlueNoiseTexture(): Promise<void>;
    get texture(): Texture;
    generateDenoiseSamples(numSamples: number, numRings: number, r: number, texelSize: Vector2): Vector2[];
    generatePoissonDiskConstant(poissonDisk: Vector2[]): string;
    render(renderer: WebGLRenderer): void;
    setSize(width: number, height: number): void;
}
//# sourceMappingURL=PoissionDenoisePass.d.ts.map