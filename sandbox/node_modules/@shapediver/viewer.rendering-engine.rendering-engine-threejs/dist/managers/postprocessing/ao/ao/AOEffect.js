"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AOEffect = void 0;
const postprocessing_1 = require("postprocessing");
const three_1 = require("three");
const NormalPass_1 = require("../../utils/NormalPass");
const PoissionDenoisePass_1 = require("../poissionDenoise/PoissionDenoisePass");
const ao_compose_1 = require("./shader/ao_compose");
const defaultAOOptions = Object.assign({ resolutionScale: 1, spp: 8, distancePower: 1, power: 2, bias: 40, thickness: 0.075, color: new three_1.Color("black"), useNormalPass: false, velocityDepthNormalPass: null }, PoissionDenoisePass_1.PoissionDenoisePass.DefaultOptions);
class AOEffect extends postprocessing_1.Effect {
    // #endregion Properties (7)
    // #region Constructors (1)
    constructor(composer, camera, scene, aoPass, options = defaultAOOptions) {
        var _a, _b;
        super("AOEffect", ao_compose_1.ao_compose, {
            uniforms: new Map([
                ["inputTexture", new three_1.Uniform(null)],
                ["depthTexture", new three_1.Uniform(null)],
                ["power", new three_1.Uniform(0)],
                ["color", new three_1.Uniform(new three_1.Color("black"))],
            ]),
        });
        this.lastSize = { width: 0, height: 0, resolutionScale: 0 };
        this.resolutionScale = 1;
        this.composer = composer;
        this.aoPass = aoPass;
        options = Object.assign(Object.assign({}, defaultAOOptions), options);
        this.normalPass = new NormalPass_1.NormalPass(scene, camera);
        const normalTexture = (_a = options.normalTexture) !== null && _a !== void 0 ? _a : (_b = this.normalPass) === null || _b === void 0 ? void 0 : _b.texture;
        this.aoPass.fullscreenMaterial.uniforms.normalTexture.value = normalTexture;
        this.aoPass.fullscreenMaterial.defines.useNormalTexture = "";
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.aoPass.fullscreenMaterial.uniforms.depthTexture.value = this.normalPass.depthTexture;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.uniforms.get("depthTexture").value = this.normalPass.depthTexture;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.poissionDenoisePass = new PoissionDenoisePass_1.PoissionDenoisePass(camera, this.aoPass.texture, this.normalPass.depthTexture);
        this.makeOptionsReactive(options);
    }
    // #endregion Constructors (1)
    // #region Public Methods (3)
    makeOptionsReactive(options) {
        for (const key of Object.keys(options)) {
            Object.defineProperty(this, key, {
                get() {
                    return options[key];
                },
                set(value) {
                    if (value === null || value === undefined)
                        return;
                    options[key] = value;
                    switch (key) {
                        case "spp":
                            this.aoPass.fullscreenMaterial.defines.spp = value.toFixed(0);
                            this.aoPass.fullscreenMaterial.needsUpdate = true;
                            break;
                        case "distance":
                            this.aoPass.fullscreenMaterial.uniforms.aoDistance.value = value;
                            this.poissionDenoisePass.fullscreenMaterial.uniforms["distance"].value = Math.max(value, 0.0001);
                            break;
                        case "resolutionScale":
                            this.setSize(this.lastSize.width, this.lastSize.height);
                            break;
                        case "power":
                            this.uniforms.get("power").value = value;
                            break;
                        case "color":
                            this.uniforms
                                .get("color")
                                .value.copy(new three_1.Color(value));
                            break;
                        // denoiser
                        case "iterations":
                        case "radius":
                        case "rings":
                        case "samples":
                            this.poissionDenoisePass[key] = value;
                            break;
                        case "lumaPhi":
                        case "depthPhi":
                        case "normalPhi":
                            this.poissionDenoisePass.fullscreenMaterial.uniforms[key].value = Math.max(value, 0.0001);
                            break;
                        default:
                            if (key in
                                this.aoPass
                                    .fullscreenMaterial.uniforms) {
                                this.aoPass
                                    .fullscreenMaterial.uniforms[key].value = value;
                            }
                    }
                },
                configurable: true,
            });
            // apply all uniforms and defines
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this[key] = options[key];
        }
    }
    setSize(width, height) {
        var _a;
        if (width === undefined || height === undefined)
            return;
        if (width === this.lastSize.width &&
            height === this.lastSize.height &&
            this.resolutionScale === this.lastSize.resolutionScale) {
            return;
        }
        (_a = this.normalPass) === null || _a === void 0 ? void 0 : _a.setSize(width, height);
        this.aoPass.setSize(width * this.resolutionScale, height * this.resolutionScale);
        this.poissionDenoisePass.setSize(width, height);
        this.lastSize = {
            width,
            height,
            resolutionScale: this.resolutionScale,
        };
    }
    update(renderer) {
        var _a;
        if ("animatedNoise" in
            this.aoPass.fullscreenMaterial.defines) {
            delete this.aoPass.fullscreenMaterial.defines
                .animatedNoise;
            this.aoPass.fullscreenMaterial.needsUpdate =
                true;
        }
        // set input texture
        if (this.poissionDenoisePass.iterations > 0) {
            this.uniforms.get("inputTexture").value =
                this.poissionDenoisePass.texture;
        }
        else {
            this.uniforms.get("inputTexture").value = this.aoPass.texture;
        }
        (_a = this.normalPass) === null || _a === void 0 ? void 0 : _a.render(renderer);
        this.aoPass.render(renderer);
        this.poissionDenoisePass.render(renderer);
    }
}
exports.AOEffect = AOEffect;
// #region Properties (7)
AOEffect.DefaultOptions = defaultAOOptions;
//# sourceMappingURL=AOEffect.js.map