"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSAOEffect = void 0;
const three_1 = require("three");
const AOEffect_1 = require("../ao/AOEffect");
const AOPass_1 = require("../ao/AOPass");
const ao_utils_1 = require("../ao/shader/ao_utils");
const ssao_1 = require("./shader/ssao");
const finalFragmentShader = ssao_1.ssao.replace("#include <ao_utils>", ao_utils_1.ao_utils);
class SSAOPass extends AOPass_1.AOPass {
    // #region Constructors (1)
    constructor(camera, scene) {
        super(camera, scene, finalFragmentShader);
    }
}
class SSAOEffect extends AOEffect_1.AOEffect {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(composer, camera, scene, options) {
        super(composer, camera, scene, new SSAOPass(camera, scene), options);
        // #region Properties (1)
        this.spp = 16;
        SSAOEffect.DefaultOptions = Object.assign(Object.assign({}, AOEffect_1.AOEffect.DefaultOptions), {
            spp: 16,
            distance: 1,
            distancePower: 0.25,
            power: 2,
        });
        options = Object.assign(Object.assign({}, SSAOEffect.DefaultOptions), options);
    }
    // #endregion Constructors (1)
    // #region Public Methods (2)
    getPointsOnSphere(n) {
        const points = [];
        const inc = Math.PI * (3 - Math.sqrt(5));
        const off = 2 / n;
        for (let k = 0; k < n; k++) {
            const y = k * off - 1 + off / 2;
            const r = Math.sqrt(1 - y * y);
            const phi = k * inc;
            points.push(new three_1.Vector3(Math.cos(phi) * r, y, Math.sin(phi) * r));
        }
        return points;
    }
    makeOptionsReactive(options) {
        super.makeOptionsReactive(options);
        for (const key of ["spp"]) {
            Object.defineProperty(this, key, {
                get() {
                    return options[key];
                },
                set(value) {
                    if (value === null || value === undefined)
                        return;
                    options[key] = value;
                    switch (key) {
                        case "spp": {
                            this.aoPass.fullscreenMaterial.defines.spp =
                                value.toFixed(0);
                            const samples = this.getPointsOnSphere(value);
                            const samplesR = [];
                            for (let i = 0; i < value; i++) {
                                samplesR.push((i + 1) / value);
                            }
                            this.aoPass.fullscreenMaterial.uniforms.samples = {
                                value: samples,
                            };
                            this.aoPass.fullscreenMaterial.uniforms.samplesR = {
                                value: samplesR,
                            };
                            this.aoPass.fullscreenMaterial.needsUpdate = true;
                            break;
                        }
                    }
                },
                configurable: true,
            });
        }
        this.spp = options["spp"];
    }
}
exports.SSAOEffect = SSAOEffect;
//# sourceMappingURL=SSAOEffect.js.map