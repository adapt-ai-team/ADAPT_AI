"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectiveBloomManager = void 0;
const THREE = __importStar(require("three"));
class SelectiveBloomManager {
    // #endregion Properties (2)
    // #region Constructors (1)
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        this._selectiveBloomNodes = [];
    }
    // #endregion Constructors (1)
    // #region Public Methods (5)
    addSelection(node) {
        this._selectiveBloomNodes.push(node);
        this.updateSelectiveBloomEffectObjects();
    }
    clearSelection() {
        this._selectiveBloomNodes = [];
        this.updateSelectiveBloomEffectObjects();
    }
    removeSelection(node) {
        const index = this._selectiveBloomNodes.indexOf(node);
        if (index !== -1)
            this._selectiveBloomNodes.splice(index, 1);
        this.updateSelectiveBloomEffectObjects();
        return index !== -1;
    }
    setEffect(selectiveBloomEffect) {
        this._selectiveBloomEffect = selectiveBloomEffect;
        this.updateSelectiveBloomEffectObjects();
    }
    updateSelectiveBloomEffectObjects() {
        this._selectiveBloomEffect.selection.clear();
        for (let i = 0; i < this._selectiveBloomNodes.length; i++) {
            this._selectiveBloomNodes[i].convertedObject[this._renderingEngine.id].traverse((o) => {
                if (o instanceof THREE.Mesh)
                    this._selectiveBloomEffect.selection.add(o);
            });
        }
    }
}
exports.SelectiveBloomManager = SelectiveBloomManager;
//# sourceMappingURL=SelectiveBloomManager.js.map