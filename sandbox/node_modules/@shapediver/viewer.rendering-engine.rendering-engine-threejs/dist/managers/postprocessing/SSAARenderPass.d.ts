import { Pass } from "postprocessing";
import { Camera, Scene, WebGLRenderer, WebGLRenderTarget } from "three";
/**
 *
 * Supersample Anti-Aliasing Render Pass
 *
 * This manual approach to SSAA re-renders the scene once for each sample with camera jitter and accumulates the results.
 *
 * References: https://en.wikipedia.org/wiki/Supersampling
 *
 * original implementation from three.js@0.152.2 was modified to work with the postprocessing library
 *
 */
export declare class SSAARenderPass extends Pass {
    private readonly _clearPass;
    private readonly _copyUniforms;
    private readonly _fsQuad;
    private readonly _fullScreen;
    private readonly _sampleRenderTarget;
    private readonly _ssaaCopyMaterial;
    private _clearAlpha;
    private _clearColor;
    private _oldClearColor;
    private _sampleLevel;
    private _unbiased;
    private _copyMaterial;
    constructor(scene: Scene, camera: Camera);
    set mainCamera(value: Camera);
    set mainScene(value: Scene);
    get renderToScreen(): boolean;
    set renderToScreen(value: boolean);
    get sampleLevel(): number;
    /**
     * specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.
     */
    set sampleLevel(value: number);
    /**
     * to cancel out rounding errors
     */
    set unbiased(value: boolean);
    dispose(): void;
    /**
     * Renders the scene.
     *
     * @param {WebGLRenderer} renderer - The renderer.
     * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
     * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
     * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
     * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
     */
    render(renderer: WebGLRenderer, inputBuffer: WebGLRenderTarget, outputBuffer: WebGLRenderTarget, deltaTime: undefined, stencilTest: undefined): void;
    setSize(width: number, height: number): void;
}
//# sourceMappingURL=SSAARenderPass.d.ts.map