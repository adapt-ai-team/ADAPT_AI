"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grid = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const THREE = __importStar(require("three"));
const SDData_1 = require("../../objects/SDData");
class Grid {
    // #endregion Properties (5)
    // #region Constructors (1)
    constructor(_renderingEngine, _parent) {
        this._renderingEngine = _renderingEngine;
        this._parent = _parent;
        // #region Properties (5)
        this._converter = viewer_shared_services_1.Converter.instance;
        this._color = "#44444426";
        this._gridObject = new SDData_1.SDData("grid", "");
        this._grid = new THREE.GridHelper();
        this._grid.material.opacity =
            typeof this._color == "string" && this._color.length <= 8
                ? 0.15
                : this._converter.toAlpha(this._color);
        this._grid.material.transparent =
            this._grid.material.opacity !== 1;
        this._grid.material.color =
            this._renderingEngine.createThreeJsColor(this._color);
        this._grid.rotateX(Math.PI / 2);
        this._grid.visible = false;
        this._gridObject.add(this._grid);
        this._parent.add(this._gridObject);
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (3)
    get color() {
        return this._color;
    }
    set color(value) {
        this._color = value;
        this._grid.material.opacity =
            typeof this._color == "string" && this._color.length <= 8
                ? 0.15
                : this._converter.toAlpha(this._color);
        this._grid.material.transparent =
            this._grid.material.opacity !== 1;
        this._grid.material.color =
            this._renderingEngine.createThreeJsColor(this._color);
        this._grid.material.needsUpdate = true;
    }
    get visible() {
        return this._grid.visible;
    }
    set visible(value) {
        this._grid.visible = value;
    }
    // #endregion Public Getters And Setters (3)
    // #region Public Methods (3)
    changeSceneExtents(position, divisions, gridExtents) {
        this._gridObject.remove(this._grid);
        this._grid = new THREE.GridHelper(2 * gridExtents, divisions);
        this._grid.material.opacity =
            typeof this._color == "string" && this._color.length <= 8
                ? 0.15
                : this._converter.toAlpha(this._color);
        this._grid.material.transparent =
            this._grid.material.opacity !== 1;
        this._grid.material.color =
            this._renderingEngine.createThreeJsColor(this._color);
        this._grid.rotateX(Math.PI / 2);
        this._grid.visible = this._renderingEngine.gridVisibility;
        this._gridObject.add(this._grid);
        this._grid.position.set(position[0], position[1], position[2]);
    }
    updatePosition(position) {
        if (this._grid)
            this._grid.position.set(position[0], position[1], position[2]);
    }
}
exports.Grid = Grid;
//# sourceMappingURL=Grid.js.map