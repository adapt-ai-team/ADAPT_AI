"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroundProjection = void 0;
const SDData_1 = require("../../objects/SDData");
const GroundedSkyBox_1 = require("three/examples/jsm/objects/GroundedSkyBox");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
class GroundProjection {
    // #endregion Properties (2)
    // #region Constructors (1)
    constructor(_renderingEngine, _parent) {
        this._renderingEngine = _renderingEngine;
        this._parent = _parent;
        // #region Properties (2)
        this._eventEngine = viewer_shared_services_1.EventEngine.instance;
        this._visible = false;
        this._groundProjectionObject = new SDData_1.SDData('grid', '');
        this.createGroundProjection(this._renderingEngine.environmentMapLoader.environmentMap);
        this._parent.add(this._groundProjectionObject);
        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, (e) => {
            const taskEvent = e;
            if (taskEvent.type === viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING) {
                this.createGroundProjection(this._renderingEngine.environmentMapLoader.environmentMap);
            }
        });
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (2)
    get visible() {
        return this._visible;
    }
    set visible(value) {
        this._visible = value;
        this._groundProjectionObject.visible = value;
    }
    // #endregion Public Getters And Setters (2)
    // #region Public Methods (2)
    changeSceneExtents(position, divisions, gridExtents) {
        this.createGroundProjection(this._renderingEngine.environmentMapLoader.environmentMap);
        if (this._groundedSkyBox)
            this._groundedSkyBox.position.set(position[0], position[1], position[2]);
    }
    updatePosition(position) {
        if (this._groundedSkyBox)
            this._groundedSkyBox.position.set(position[0], position[1], position[2]);
    }
    // #endregion Public Methods (2)
    createGroundProjection(map) {
        if (this._groundedSkyBox) {
            this._groundedSkyBox.geometry.dispose();
            this._groundedSkyBox.material.dispose();
        }
        if (!map) {
            if (this._groundedSkyBox)
                this._groundProjectionObject.remove(this._groundedSkyBox);
        }
        else {
            this._groundedSkyBox = new GroundedSkyBox_1.GroundedSkybox(map, 0.1, 100);
            this._groundedSkyBox.rotateX(Math.PI / 2);
            this._groundProjectionObject.add(this._groundedSkyBox);
        }
        this._groundProjectionObject.visible = this._visible;
    }
}
exports.GroundProjection = GroundProjection;
//# sourceMappingURL=GroundProjection.js.map