import { IManager } from "@shapediver/viewer.rendering-engine.rendering-engine";
import { BUSY_MODE_DISPLAY, SPINNER_POSITIONING } from "@shapediver/viewer.shared.types";
import * as THREE from "three";
import { RenderingEngine } from "../RenderingEngine";
export declare class RenderingManager implements IManager {
    private readonly _renderingEngine;
    private readonly _animationEngine;
    private readonly _animationFrameEngine;
    private readonly _converter;
    private readonly _eventEngine;
    private readonly _logger;
    private readonly _systemInfo;
    private readonly _tree;
    private _activeRendering;
    private _cameraChanged;
    private _continuousRendering;
    private _continuousShadowMapUpdate;
    private _height;
    private _hidden;
    private _hiddenCamera;
    private _hiddenRenderTarget;
    private _hideLogo;
    private _lastSize;
    private _lightSizeUVEnd;
    private _lightSizeUVStart;
    private _maxTextureUnits;
    private _minimalRendering;
    private _noWebGL;
    private _runningAnimation;
    private _sizeChanged;
    private _softShadowRenderingActive;
    private _softShadowRenderingDurationActive;
    private _softShadowRenderingTimeout;
    private _stats;
    private _usingSwiftShader;
    private _width;
    private _updateShadowMapInNextRender;
    constructor(_renderingEngine: RenderingEngine);
    get continuousRendering(): boolean;
    set continuousRendering(value: boolean);
    get continuousShadowMapUpdate(): boolean;
    set continuousShadowMapUpdate(value: boolean);
    get minimalRendering(): boolean;
    get usingSwiftShader(): boolean;
    addLogo(canvas: HTMLCanvasElement, branding: {
        logo: string | null;
        backgroundColor: string;
        busyModeSpinner: string;
        busyModeDisplay: BUSY_MODE_DISPLAY;
        spinnerPositioning: SPINNER_POSITIONING;
    }): HTMLDivElement;
    addSpinner(canvas: HTMLCanvasElement, branding: {
        logo: string | null;
        backgroundColor: string;
        busyModeSpinner: string;
        busyModeDisplay: BUSY_MODE_DISPLAY;
        spinnerPositioning: SPINNER_POSITIONING;
    }): HTMLDivElement;
    createRenderer(canvas: HTMLCanvasElement): THREE.WebGLRenderer;
    evaluateTextureUnitCount(value: number): void;
    getScreenshot(type?: string, encoderOptions?: number): string;
    init(): void;
    render(): void;
    resize(width: number, height: number): void;
    /**
     * Must only be called once by the RenderingEngine!
     */
    start(): void;
    updateShadowMap(): void;
    private activateBeautyRenderShaders;
    private animate;
    private calculateSize;
    private deactivateBeautyRenderShaders;
    private evaluateRenderingState;
    private setShaderProperties;
    private showStatistics;
    private startAndStopRendering;
    private startBeautyRenderCountdown;
    private startRendering;
    private stopBeautyRenderCountdown;
    private stopRendering;
    private toggleBusyMode;
    private toggleLogo;
}
//# sourceMappingURL=RenderingManager.d.ts.map