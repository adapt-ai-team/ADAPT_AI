import { SdtfTypeHintName } from '../structure/SdtfShapeDiverTypeHints';
import { ISdtfWriteableAccessor } from './components/ISdtfWriteableAccessor';
import { ISdtfWriteableAsset } from './components/ISdtfWriteableAsset';
import { ISdtfWriteableAttribute, ISdtfWriteableAttributes } from './components/ISdtfWriteableAttributes';
import { ISdtfWriteableBuffer } from './components/ISdtfWriteableBuffer';
import { ISdtfWriteableBufferView } from './components/ISdtfWriteableBufferView';
import { ISdtfWriteableChunk } from './components/ISdtfWriteableChunk';
import { ISdtfWriteableDataItem } from './components/ISdtfWriteableDataItem';
import { ISdtfWriteableNode } from './components/ISdtfWriteableNode';
import { ISdtfWriteableTypeHint } from './components/ISdtfWriteableTypeHint';
export interface ISdtfWriteableComponentFactory {
    createAccessor(content?: {
        data: ArrayBuffer;
        contentType: string;
    }): ISdtfWriteableAccessor;
    createAsset(): ISdtfWriteableAsset;
    createAttribute<T>(content?: Exclude<T, ArrayBuffer> | {
        data: ArrayBuffer;
        contentType: string;
    }, typeHint?: string): ISdtfWriteableAttribute;
    createAttributes<T>(content?: Record<string, [
        value: Exclude<T, ArrayBuffer> | {
            data: ArrayBuffer;
            contentType: string;
        },
        typeHint?: string
    ]>): ISdtfWriteableAttributes;
    createBuffer(data?: ArrayBuffer): ISdtfWriteableBuffer;
    createBufferView(content?: {
        data: ArrayBuffer;
        contentType: string;
    }): ISdtfWriteableBufferView;
    createChunk(name?: string): ISdtfWriteableChunk;
    createDataItem<T>(content?: Exclude<T, ArrayBuffer> | {
        data: ArrayBuffer;
        contentType: string;
    }, typeHint?: string): ISdtfWriteableDataItem;
    createNode(): ISdtfWriteableNode;
    createTypeHint(name?: SdtfTypeHintName | string): ISdtfWriteableTypeHint;
}
//# sourceMappingURL=ISdtfWriteableComponentFactory.d.ts.map