"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNumeric = isNumeric;
exports.isNumber = isNumber;
exports.isInt = isInt;
exports.isUint = isUint;
exports.isNonEmptyString = isNonEmptyString;
exports.isNumberArray = isNumberArray;
exports.isIntArray = isIntArray;
exports.isUintArray = isUintArray;
exports.isDataObject = isDataObject;
exports.isBinaryData = isBinaryData;
exports.isNil = isNil;
function isNumeric(arg) {
    if (typeof arg === 'number') {
        return arg - arg === 0;
    }
    if (typeof arg === 'string' && arg.trim() !== '') {
        return Number.isFinite ? Number.isFinite(+arg) : isFinite(+arg);
    }
    return false;
}
function isNumber(arg) {
    return isNumeric(arg) && typeof arg === 'number';
}
function isInt(arg) {
    return isNumber(arg) && Number.isInteger(Number(arg));
}
function isUint(arg) {
    return isInt(arg) && Number(arg) >= 0;
}
function isNonEmptyString(arg) {
    return typeof arg === 'string' && arg !== '';
}
function isNumberArray(arg) {
    return Array.isArray(arg) && arg.every((a) => isNumber(a));
}
function isIntArray(arg) {
    return Array.isArray(arg) && arg.every((a) => isInt(a));
}
function isUintArray(arg) {
    return Array.isArray(arg) && arg.every((a) => isUint(a));
}
function isDataObject(arg) {
    return typeof arg === 'object' && !Array.isArray(arg) && arg !== null && !isBinaryData(arg);
}
function isBinaryData(arg) {
    return (arg instanceof ArrayBuffer ||
        ArrayBuffer.isView(arg));
}
function isNil(arg) {
    return arg === undefined || arg === null;
}
//# sourceMappingURL=SdtfTypeGuards.js.map