import { DomEventEngine } from '@shapediver/viewer.shared.services';
export declare enum RENDERERTYPE {
    /** The standard rendering engine */
    STANDARD = "standard",
    /** A basic version of the rendering engine */
    ATTRIBUTES = "attributes"
}
export declare enum VISIBILITYMODE {
    /** The viewer shows the scene instantly */
    INSTANT = "instant",
    /** The viewer shows the scene after the first session loading */
    SESSION = "session",
    /** The viewer is shown once the 'show' property is set to true */
    MANUAL = "manual"
}
export declare enum TEXTURE_ENCODING {
    LINEAR = "linear",
    SRGB = "srgb",
    RGBE = "rgbe",
    RGBM7 = "rgbm7",
    RGBM16 = "rgbm16",
    RGBD = "rgbd",
    GAMMA = "gamma"
}
export declare enum TONE_MAPPING {
    NONE = "none",
    LINEAR = "linear",
    REINHARD = "reinhard",
    CINEON = "cineon",
    ACES_FILMIC = "aces_filmic"
}
export declare enum BUSY_MODE_DISPLAY {
    NONE = "none",
    BLUR = "blur",
    SPINNER = "spinner"
}
export declare enum SPINNER_POSITIONING {
    CENTER = "center",
    TOP_LEFT = "top_left",
    TOP_RIGHT = "top_right",
    BOTTOM_LEFT = "bottom_left",
    BOTTOM_RIGHT = "bottom_right"
}
export interface IRenderingEngine {
    automaticResizing: boolean;
    busy: boolean;
    canvas: HTMLCanvasElement;
    closed: boolean;
    domEventEngine: DomEventEngine;
    id: string;
    pointSize: number;
    type: RENDERERTYPE;
    show: boolean;
    showStatistics: boolean;
    /**
     * Update the current tree with the provided node.
     *
     * @param root the root node
     */
    update(): void;
    reset(): void;
    resize(width: number, height: number): void;
    getScreenshot(type?: string, encoderOptions?: number): string;
}
//# sourceMappingURL=IRenderingEngine.d.ts.map