"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdtfGeometryTypeValidator = void 0;
const sdk_sdtf_core_1 = require("@shapediver/sdk.sdtf-core");
const SdtfGeometryTypeGuard_1 = require("./SdtfGeometryTypeGuard");
class SdtfGeometryTypeValidator {
    validateComponent(typeHint, value, accessor) {
        switch (typeHint) {
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_ARC:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isArc(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isBoundingBox(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_BOX:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isBox(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CIRCLE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isCircle(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_COMPLEX:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isComplex(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CONE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isCone(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CYLINDER:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isCylinder(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isEllipse(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_INTERVAL:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isInterval(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isInterval2(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_LINE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isLine(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_MATRIX:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isMatrix(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_PLANE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPlane(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT2D:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint2d(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT3D:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint3d(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT4D:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint4d(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POLYLINE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPolyline(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_RAY:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isRay(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isRectangle(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_SPHERE:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isSphere(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TORUS:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isTorus(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isTransform(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM_LIST:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isTransformList(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR2D:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector2d(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR3D:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector3d(value);
            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR4D:
                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector4d(value);
            default:
                (0, sdk_sdtf_core_1.sdAssertUnreachable)(typeHint);
        }
    }
}
exports.SdtfGeometryTypeValidator = SdtfGeometryTypeValidator;
//# sourceMappingURL=SdtfGeometryTypeValidator.js.map