import { ShapeDiverCommonsModelStatus } from '../commons/SdCommonModel';
import { ShapeDiverCommonsModelComputationStatus } from '../commons/SdCommonModelComputation';
import { ShapeDiverCommonsTicket, ShapeDiverCommonsTicketType } from '../commons/SdCommonsTicket';
import { ShapeDiverRequestCustomization } from './SdRequestDtoExportOutput';
import { ShapeDiverRequestFileUploadPart } from './SdRequestDtoUpload';

/**
 * @swagger {components.schemas} RequestTicketType {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsTicketType" }
     ]
   }
 */
/** */
export const ShapeDiverRequestTicketType = {
    ...ShapeDiverCommonsTicketType,
};
export type ShapeDiverRequestTicketType =
    (typeof ShapeDiverRequestTicketType)[keyof typeof ShapeDiverRequestTicketType];

/**
 * @swagger {components.schemas} RequestTicket {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsTicket" },
       {
         "description": "Body of a ticket request.",
         "type": "object"
       }
     ]
   }
 */
/** Body of a ticket request. */
export interface ShapeDiverRequestTicket extends ShapeDiverCommonsTicket {
    /**
     * @swagger {components.schemas.RequestTicket.properties} type {
         "description": "The type of the ticket.",
         "$ref": "#/components/schemas/RequestTicketType"
       }
     * @swagger {components.schemas.RequestTicket} required [ "type" ]
     */
    /** The type of the ticket. */
    type: ShapeDiverRequestTicketType;
}

/**
 * @swagger {components.schemas} RequestConfigure {
     "description": "Body of a configure request."
   }
 */
/** Body of a configure request. */
export type ShapeDiverRequestConfigure = { [key: string]: any };

/**
 * @swagger {components.schemas} RequestLogMessageLevel {
     "description": "Log message level for log requests.",
     "type": "string",
     "enum": [ 0, 1, 2 ]
   }
 */
/** Log message level for log requests. */
export enum ShapeDiverRequestLogMessageLevel {
    INFO = 0,
    WARNING = 1,
    ERROR = 2,
}

/**
 * @swagger {components.schemas} RequestLogMessage {
     "description": "Body of a log message request.",
     "type": "object"
   }
 */
/** Body of a log message request. */
export interface ShapeDiverRequestLogMessage {
    /**
     * @swagger {components.schemas.RequestLogMessage.properties} level {
         "$ref": "#/components/schemas/RequestLogMessageLevel"
       }
     * @swagger {components.schemas.RequestLogMessage} required [ "level" ]
     */
    /** */
    level: ShapeDiverRequestLogMessageLevel;

    /**
     * @swagger {components.schemas.RequestLogMessage.properties} message {
         "description": "The message that should be logged.",
         "type": "string"
       }
     * @swagger {components.schemas.RequestLogMessage} required [ "message" ]
     */
    /** The message that should be logged. */
    message: string;
}

/**
 * @swagger {components.schemas} RequestAuthorizationGroup {
     "description": "Body of an authorization group request.",
     "type": "object"
   }
 */
/** Body of an authorization group request. */
export interface ShapeDiverRequestAuthorizationGroup {
    /**
     * @swagger {components.schemas.RequestAuthorizationGroup.properties} models {
         "description": "The model IDs that should form the new authorization group.",
         "type": "array",
         "items": { "type": "string", "format": "uuid" }
       }
     */
    /** The model IDs that should form the new authorization group. */
    models?: string[];

    /**
     * @swagger {components.schemas.RequestAuthorizationGroup.properties} users {
         "description": "The user IDs that should form the new authorization group.",
         "type": "array",
         "items": { "type": "string", "format": "uuid" }
       }
     */
    /** The user IDs that should form the new authorization group. */
    users?: string[];

    /**
     * @swagger {components.schemas.RequestAuthorizationGroup.properties} organizations {
         "description": "The organization IDs that should form the new authorization group.",
         "type": "array",
         "items": { "type": "string", "format": "uuid" }
       }
     */
    /** The organization IDs that should form the new authorization group. */
    organizations?: string[];
}

/**
 * @swagger {components.schemas} RequestModelState {
     "description": "Description of a Model-State.",
     "type": "object"
   }
 */
/** Description of a Model-State. */
export interface ShapeDiverRequestModelState {
    /**
     * @swagger {components.schemas.RequestModelState.properties} parameters {
         "$ref": "#/components/schemas/RequestCustomization"
       }
     * @swagger {components.schemas.RequestModelState} required [ "parameters" ]
     */
    /** A directory of parameter keys and basic/s-type values. */
    parameters: ShapeDiverRequestCustomization;

    /**
     * @swagger {components.schemas.RequestModelState.properties} data {
         "description": "Optional untyped data that can be used to store additional information.",
         "type": "object",
         "additionalProperties": true
       }
     */
    /** Optional untyped data that can be used to store additional information. */
    data?: Record<string, any>;

    /**
     * @swagger {components.schemas.RequestModelState.properties} image {
         "allOf": [
           { "$ref": "#/components/schemas/RequestFileUploadPart" },
           {
             "description": "Details of the Model-State image file. If provided, the response will include a URL for uploading the file.",
             "type": "object"
           }
         ]
       }
     */
    /**
     * Details of the Model-State image file. If provided, the response will include a URL for
     * uploading the file.
     */
    image?: ShapeDiverRequestFileUploadPart;

    /**
     * @swagger {components.schemas.RequestModelState.properties} arSceneId {
         "description": "The ID of an existing AR scene associated with this model. If provided, the scene's glTF and USDZ data will be duplicated into the newly created Model-State.",
         "type": "string"
       }
     */
    /**
     * The ID of an existing AR scene associated with this model. If provided, the scene's glTF
     * and USDZ data will be duplicated into the newly created Model-State.
     */
    arSceneId?: string;
}

/**
 * @swagger {components.schemas} RequestGltfUploadQueryConversion {
     "description": "Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>.",
     "type": "string",
     "enum": [ "none", "scene", "usdz" ]
   }
 */
/** Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>. */
export enum ShapeDiverRequestGltfUploadQueryConversion {
    NONE = 'none',
    SCENE = 'scene',
    USDZ = 'usdz',
}

/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryOrder {
     "description": "Query values of a model computation statistics request.<br/>Specifies the order of the results.",
     "type": "string",
     "enum": [ "asc", "desc" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Specifies the order of the results. */
export enum ShapeDiverRequestModelComputationQueryOrder {
    ASC = 'asc',
    DESC = 'desc',
}

/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryStatus {
     "description": "Query values of a model computation statistics request.<br/>Filter by status.",
     "type": "string",
     "enum": [ "success", "timeout", "other", "*" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Filter by status. */
export enum ShapeDiverRequestModelComputationQueryStatus {
    SUCCESS = 'success',
    TIMEOUT = 'timeout',
    OTHER = 'other',
    ALL = '*',
}

/**
 * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryType {
     "description": "Query values of a model computation statistics request.<br/>Filter by computation or export request.",
     "type": "string",
     "enum": [ "computation", "export", "load", "*" ]
   }
 */
/** Query values of a model computation statistics request.<br/>Filter by computation or export request. */
export enum ShapeDiverRequestModelComputationQueryType {
    COMPUTATION = 'computation',
    EXPORT = 'export',
    LOAD = 'load',
    ALL = '*',
}

/**
 * @swagger {components.schemas} RequestQueryModelStatus {
    "allOf": [
       { "$ref": "#/components/schemas/CommonsModelStatus" }
     ]
}
 */
/** Result of a computation request.*/
export const ShapeDiverRequestQueryModelStatus = {
    ...ShapeDiverCommonsModelStatus,
};
export type ShapeDiverRequestQueryModelStatus =
    (typeof ShapeDiverRequestQueryModelStatus)[keyof typeof ShapeDiverRequestQueryModelStatus];

/**
 * @swagger {components.schemas} RequestQueryModelComputationStatus {
    "allOf": [
       { "$ref": "#/components/schemas/CommonsModelComputationStatus" }
     ]
}
 */
/** Result of a computation request.*/
export const ShapeDiverRequestQueryModelComputationStatus = {
    ...ShapeDiverCommonsModelComputationStatus,
};
export type ShapeDiverRequestQueryModelComputationStatus =
    (typeof ShapeDiverRequestQueryModelComputationStatus)[keyof typeof ShapeDiverRequestQueryModelComputationStatus];
