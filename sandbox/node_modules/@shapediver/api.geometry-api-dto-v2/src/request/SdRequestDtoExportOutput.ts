import { ShapeDiverNullObject } from '../SdNullObject';
import { ShapeDiverCommonsGroup } from '../commons/SdCommonsGroup';
import {
    ShapeDiverCommonsParameterBasic,
    ShapeDiverCommonsParameterSType,
} from '../commons/SdCommonsParameter';

/**
 * @swagger {components.schemas} RequestCustomization {
     "description": "Body of a customization request, a directory of parameter key and values.<br/><br/>Supported parameter keys are as follows, whereby the parameter resolution is done in the same order as the keys are listed:<ul><li><code>id</code></li><li><code>name</code></li><li><code>displayname</code></li></ul>Supported parameter values are:<ul><li>Basic parameter (<code>RequestParameterBasic</code>)</li><li>S-type parameter (<code>RequestParameterSType</code>)</li></ul>",
     "type": "object",
     "additionalProperties": {
       "oneOf": [
         { "$ref": "#/components/schemas/RequestParameterBasic" },
         { "$ref": "#/components/schemas/RequestParameterSType" }
       ]
     }
   }
 * @example
 * {
 *   <parameter id> : <basic parameter>,
 *   <parameter name> : <s-type parameter>
 *   <parameter displayname> : <basic parameter>,
 * }
 */
/**
 * Body of a customization request.
 * A directory of parameter keys and basic/s-type values.
 *
 * Supported parameter keys are as follows, whereby the parameter resolution is done in the same
 * order as the keys are listed:
 *  * `id`
 *  * `name`
 *  * `displayname`
 *
 * Supported parameter values are:
 *  * Basic parameter ({@link ShapeDiverRequestParameterBasic})
 *  * S-type parameter ({@link ShapeDiverRequestParameterSType})
 */
export type ShapeDiverRequestCustomization = {
    [key: string]: ShapeDiverRequestParameterBasic | ShapeDiverRequestParameterSType;
};

/**
 * @swagger {components.schemas} RequestParameterBasic {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsParameterBasic" },
       {
         "description": "Definition of a basic ShapeDiver parameter.",
         "type": "object"
       }
     ]
   }
 */
/** Definition of a basic ShapeDiver parameter. */
export type ShapeDiverRequestParameterBasic = ShapeDiverCommonsParameterBasic;

/**
 * @swagger {components.schemas} RequestParameterSType {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsParameterSType" },
       {
         "description": "Definition of the value to use for s-type parameters.",
         "type": "object"
       }
     ]
   }
 */
/** Definition of the value to use for s-type parameters. */
export type ShapeDiverRequestParameterSType = ShapeDiverCommonsParameterSType;

/**
 * @swagger {components.schemas} RequestExport {
     "description": "Body of an export request.",
     "type": "object"
   }
 */
/** Body of an export request. */
export interface ShapeDiverRequestExport {
    /**
     * @swagger {components.schemas.RequestExport.properties} parameters {
         "$ref": "#/components/schemas/RequestCustomization"
       }
     * @swagger {components.schemas.RequestExport} required [ "parameters" ]
     */
    /** */
    parameters: ShapeDiverRequestCustomization;

    /**
     * @swagger {components.schemas.RequestExport.properties} exports {
         "oneOf": [
           {
             "type": "object",
             "properties": {
               "id": { "type": "string" }
             }
           },
           {
             "type": "array",
             "items": { "type": "string" }
           }
         ]
       }
     * @swagger {components.schemas.RequestExport} required [ "exports" ]
     */
    /** */
    exports: { id: string } | string[];

    /**
     * @swagger {components.schemas.RequestExport.properties} outputs {
         "type": "array",
         "items": { "type": "string" }
       }
     */
    /** */
    outputs?: string[];

    /**
     * @swagger {components.schemas.RequestExport.properties} max_wait_time {
         "description": "Maximum amount of milliseconds to wait for completion of export request before responding.",
         "type": "number"
       }
     */
    /** Maximum amount of milliseconds to wait for completion of export request before responding. */
    max_wait_time?: number;
}

/**
 * @swagger {components.schemas} RequestCache {
     "description": "Body of an export or output cache request.<br/>A directory of export-/output-IDs and version-IDs.",
     "type": "object",
     "additionalProperties": {
       "type": "string"
     },
     "example": {
       "96ce38f8-e197-416a-b78b-18d8376f5903": "62b3e13f-7b78-4a59-86f9-4a51f83feb21"
     }
   }
 */
/** Body of an export or output cache request.<br/>A directory of export-/output-IDs and version-IDs. */
export type ShapeDiverRequestCache = { [key: string]: string };

/**
 * @swagger {components.schemas} RequestExportDefinition {
     "description": "Definition of a exports.<br/>A directory of export-IDs and export-definitions.",
     "type": "object",
     "additionalProperties": {
        "$ref": "#/components/schemas/RequestExportDefinitionPart"
     }
   }
 */
/** Definition of a exports.<br/>A directory of export-IDs and export-definitions. */
export type ShapeDiverRequestExportDefinition = {
    [exportId: string]: ShapeDiverRequestExportDefinitionPart;
};

/**
 * @swagger {components.schemas} RequestExportDefinitionPart {
     "description": "Data for a single export definition.",
     "type": "object"
   }
 */
/** Data for a single export definition. */
export type ShapeDiverRequestExportDefinitionPart = {
    /**
     * @swagger {components.schemas.RequestExportDefinitionPart.properties} displayname {
         "description": "Parameter name to display instead of <i>name</i>.",
         "type": "string"
       }
     */
    /** Parameter name to display instead of <i>name</i>. */
    displayname?: string;

    /**
     * @swagger {components.schemas.RequestExportDefinitionPart.properties} group {
         "anyOf": [
           { "$ref": "#/components/schemas/RequestExportDefinitionGroup" },
           { "$ref": "#/components/schemas/NullObject" },
           {
             "description": "Set to <code>null</code> to remove the export from the currently assigned group.",
             "type": "null"
           }
         ]
       }
     */
    /**
     * Group of an export.
     * Set to `null` to remove the export from the currently assigned group.
     */
    group?: ShapeDiverRequestExportDefinitionGroup | ShapeDiverNullObject | null;

    /**
     * @swagger {components.schemas.RequestExportDefinitionPart.properties} hidden {
         "description": "Controls whether the export should be hidden in the UI.",
         "type": "boolean"
       }
     */
    /** Controls whether the export should be hidden in the UI. */
    hidden?: boolean;

    /**
     * @swagger {components.schemas.RequestExportDefinitionPart.properties} order {
         "description": "Ordering of the export in client applications.",
         "type": "number"
       }
     */
    /** Ordering of the export in client applications. */
    order?: number;

    /**
     * @swagger {components.schemas.RequestExportDefinitionPart.properties} tooltip {
         "description": "Description that is shown as a tooltip in the clients.",
         "type": "string"
       }
     */
    /** Description that is shown as a tooltip in the clients. */
    tooltip?: string;
};

/**
 * @swagger {components.schemas} RequestExportDefinitionGroup {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsGroup" },
       {
         "description": "Group information of an export definition.",
         "type": "object"
       }
     ]
   }
 */
/** Group information of an export definition. */
export type ShapeDiverRequestExportDefinitionGroup = ShapeDiverCommonsGroup;

/**
 * @swagger {components.schemas} RequestOutputDefinition {
     "description": "Definition of outputs.<br/>A directory of output-IDs and output-definitions.",
     "type": "object",
     "additionalProperties": {
        "$ref": "#/components/schemas/RequestOutputDefinitionPart"
     }
   }
 */
/** Definition of outputs.<br/>A directory of output-IDs and output-definitions. */
export type ShapeDiverRequestOutputDefinition = {
    [outputId: string]: ShapeDiverRequestOutputDefinitionPart;
};

/**
 * @swagger {components.schemas} RequestOutputDefinitionPart {
     "description": "Data for a single output definition.",
     "type": "object"
   }
 */
/** Data for a single output definition.*/
export type ShapeDiverRequestOutputDefinitionPart = {
    /**
     * @swagger {components.schemas.RequestOutputDefinitionPart.properties} displayname {
           "description": "Parameter name to display instead of <i>name</i>.",
           "type": "string"
         }
     */
    /** Parameter name to display instead of <i>name</i>. */
    displayname?: string;

    /**
     * @swagger {components.schemas.RequestOutputDefinitionPart.properties} group {
         "anyOf": [
           { "$ref": "#/components/schemas/RequestOutputDefinitionGroup" },
           { "$ref": "#/components/schemas/NullObject" },
           {
             "description": "Set to <code>null</code> to remove the output from the currently assigned group.",
             "type": "null"
           }
         ]
       }
     */
    /**
     * Group of an output.
     * Set to `null` to remove the output from the currently assigned group.
     */
    group?: ShapeDiverRequestOutputDefinitionGroup | ShapeDiverNullObject | null;

    /**
     * @swagger {components.schemas.RequestOutputDefinitionPart.properties} hidden {
           "description": "Controls whether the output should be hidden in the UI.",
           "type": "boolean"
         }
     */
    /** Controls whether the output should be hidden in the UI. */
    hidden?: boolean;

    /**
     * @swagger {components.schemas.RequestOutputDefinitionPart.properties} order {
           "description": "Ordering of the output in client applications.",
           "type": "number"
         }
     */
    /** Ordering of the output in client applications. */
    order?: number;

    /**
     * @swagger {components.schemas.RequestOutputDefinitionPart.properties} tooltip {
         "description": "Description that is shown as a tooltip in the clients.",
         "type": "string"
       }
     */
    /** Description that is shown as a tooltip in the clients. */
    tooltip?: string;

    /**
     * @swagger {components.schemas.RequestOutputDefinitionPart.properties} chunks {
         "description": "The chunk definitions of the sdTF file that is generated by the output. If specified, all existing sdTF chunks of the output must be given. The order of the given chunk items determines the order in that the chunks will be shown in the UI.",
           "type": "array",
           "items": {
           "$ref": "#/components/schemas/RequestOutputDefinitionChunk"
         }
       }
     */
    /**
     * The chunk definitions of the sdTF file that is generated by the output.
     * If specified, all existing sdTF chunks of the output must be given.
     * The order of the given chunk items determines the order in that the chunks will be shown in the UI.
     */
    chunks?: ShapeDiverRequestOutputDefinitionChunk[];
};

/**
 * @swagger {components.schemas} RequestOutputDefinitionGroup {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsGroup" },
       {
         "description": "Group information of an output definition.",
         "type": "object"
       }
     ]
   }
 */
/** Group information of an output definition. */
export type ShapeDiverRequestOutputDefinitionGroup = ShapeDiverCommonsGroup;

/**
 * @swagger {components.schemas} RequestOutputDefinitionChunk {
     "description": "Definition of a single \"chunk\" of data in an sdTF file that is generated by the output component.",
     "type": "object"
   }
 */
/** Definition of a single "chunk" of data in the sdTF file that is generated by the output component. */
export interface ShapeDiverRequestOutputDefinitionChunk {
    /**
     * @swagger {components.schemas.RequestOutputDefinitionChunk.properties} id {
         "description": "ID of the chunk.",
         "type": "string"
       }
     * @swagger {components.schemas.RequestOutputDefinitionChunk} required [ "id" ]
     */
    /** ID of the chunk. */
    id: string;

    /**
     * @swagger {components.schemas.RequestOutputDefinitionChunk.properties} displayname {
         "description": "Chunk name to display instead of the chunk <code>name</code>. This value can be unset by specifying an empty string.",
         "type": "string"
       }
     */
    /**
     * Custom name to display instead of the chunk {@link name}.
     * This value can be unset by specifying an empty string.
     */
    displayname?: string;

    /**
     * @swagger {components.schemas.RequestOutputDefinitionChunk.properties} hidden {
         "description": "Controls whether the chunk should be hidden in the UI.",
         "type": "boolean"
       }
     */
    /** Controls whether the chunk should be hidden in the UI. */
    hidden?: boolean;
}
