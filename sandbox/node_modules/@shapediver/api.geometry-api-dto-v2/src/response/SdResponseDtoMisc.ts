import { ShapeDiverCommonsModelStatus } from '../commons/SdCommonModel';
import { ShapeDiverCommonsGroup } from '../commons/SdCommonsGroup';
import {
    ShapeDiverCommonsParameterBasic,
    ShapeDiverCommonsParameterSType,
} from '../commons/SdCommonsParameter';
import { ShapeDiverCommonsTicket, ShapeDiverCommonsTicketType } from '../commons/SdCommonsTicket';

/**
 * @swagger {components.schemas} ResponseAction {
     "description": "Defines the actions to be taken on the response data.",
     "type": "object"
   }
 */
/** Defines the actions to be taken on the response data. */
export interface ShapeDiverResponseAction {
    /**
     * @swagger {components.schemas.ResponseAction.properties} name {
         "description": "Name of the action, e.g. customize, close, default, etc.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseAction} required [ "name" ]
     */
    /** Name of the action, e.g. customize, close, default, etc. */
    name: string;

    /**
     * @swagger {components.schemas.ResponseAction.properties} title {
         "description": "Title of the action, e.g. 'Customize model', 'Close session', etc.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseAction} required [ "title" ]
     */
    /** Title of the action, e.g. 'Customize model', 'Close session', etc. */
    title: string;

    /**
     * @swagger {components.schemas.ResponseAction.properties} href {
         "description": "Hyperlink to make the request to.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseAction} required [ "href" ]
     */
    /** Hyperlink to make the request to. */
    href: string;

    /**
     * @swagger {components.schemas.ResponseAction.properties} method {
         "description": "HTTP method to use.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseAction} required [ "method" ]
     */
    /** HTTP method to use. */
    method: string;

    /**
     * @swagger {components.schemas.ResponseAction.properties} template {
         "description": "Template for the request body, references into the 'templates' array of the response (e.g. 'customize-request').",
         "type": "string"
       }
     */
    /** Template for the request body, references into the 'templates' array of the response (e.g. 'customize-request'). */
    template?: string;
}

/**
 * @swagger {components.schemas} ResponseTemplate {
     "description": "Provides templates for actions.",
     "type": "object"
   }
 */
/** Provides templates for actions. */
export interface ShapeDiverResponseTemplate {
    /**
     * @swagger {components.schemas.ResponseTemplate.properties} name {
         "description": "Name of the template, e.g. 'customize-request'.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseTemplate} required [ "name" ]
     */
    /** Name of the template, e.g. 'customize-request'. */
    name: string;

    /**
     * @swagger {components.schemas.ResponseTemplate.properties} title {
         "description": "Title of the template, e.g. 'Template for model customization request'.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseTemplate} required [ "titel" ]
     */
    /** Title of the template, e.g. 'Template for model customization request'. */
    title: string;

    /**
     * @swagger {components.schemas.ResponseTemplate.properties} data {
         "description": "Template for the request body.",
         "type": "object",
         "properties": {}
       }
     * @swagger {components.schemas.ResponseTemplate} required [ "data" ]
     */
    /** Template for the request body. */
    data: object;
}

/**
 * @swagger {components.schemas} ResponseModel {
     "description": "Definition of a ShapeDiver model.",
     "type": "object"
   }
 */
/** Definition of a ShapeDiver model. */
export interface ShapeDiverResponseModel {
    /**
     * @swagger {components.schemas.ResponseModel.properties} backlinkurl {
         "description": "Link to view the model on the ShapeDiver Platform.",
         "type": "string"
       }
     */
    /** Link to view the model on the ShapeDiver Platform. */
    backlinkurl?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} checkurl {
         "description": "Link to continue the checking process of the model on the ShapeDiver Platform.",
         "type": "string"
       }
     */
    /** Link to continue the checking process of the model on the ShapeDiver Platform. */
    checkurl?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} createdate {
         "description": "Timestamp of creation of the model, in ISO-8601 format.",
         "type": "string"
       }
     */
    /** Timestamp of creation of the model, in ISO-8601 format. */
    createdate?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} documentid {
         "description": "ID of the Grasshopper document.",
         "type": "string",
         "format": "uuid"
       }
     */
    /** ID of the Grasshopper document. */
    documentid?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} filename {
         "description": "Original name of the model's grasshopper file.",
         "type": "string"
       }
     */
    /** Original name of the model's grasshopper file. */
    filename?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} id {
         "description": "ID of the model.",
         "type": "string",
         "format": "uuid"
       }
     * @swagger {components.schemas.ResponseModel} required [ "id" ]
     */
    /** ID of the model. */
    id: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} id2 {
         "description": "Optional second ID of the model. This value can be unset via an empty string.",
         "type": "string",
         "format": "uuid"
       }
     */
    /** Optional second ID of the model. This value can be unset via an empty string. */
    id2?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} msg {
         "description": "Optional message, used in case the model was denied.",
         "type": "string"
       }
     */
    /** Optional message, used in case the model was denied. */
    msg?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} name {
         "description": "Model name.",
         "type": "string"
       }
     */
    /** Model name. */
    name?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} org_id {
     "description": "Organization ID of the user that owns the model.",
     "type": "string"
     }
     */
    /** Organization ID of the user that owns the model. */
    org_id?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} stat {
         "description": "Status of the model.",
         "$ref": "#/components/schemas/ResponseModelStatus"
       }
     * @swagger {components.schemas.ResponseModel} required [ "stat" ]
     */
    /** Status of the model. */
    stat: ShapeDiverResponseModelStatus;

    /**
     * @swagger {components.schemas.ResponseModel.properties} user_id {
     "description": "ShapeDiver User ID of the model owner.",
     "type": "string"
     }
     */
    /** ShapeDiver User ID of the model owner. */
    user_id?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} webhook_url {
         "description": "The webhook-url for updating the platform backend about model status changes.",
         "type": "string"
       }
     */
    /** The webhook-url for updating the platform backend about model status changes. */
    webhook_url?: string;

    /**
     * @swagger {components.schemas.ResponseModel.properties} webhook_token {
         "description": "The webhook-token for authentication used by the webhook-url.",
         "type": "string"
       }
     */
    /** The webhook-token for authentication used by the webhook-url. */
    webhook_token?: string;
}

/**
 * @swagger {components.schemas} ResponseModelStatus {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsModelStatus" }
     ]
   }
 */
/** Status of the model. */
export const ShapeDiverResponseModelStatus = {
    ...ShapeDiverCommonsModelStatus,
};
export type ShapeDiverResponseModelStatus =
    (typeof ShapeDiverResponseModelStatus)[keyof typeof ShapeDiverResponseModelStatus];

/**
 * @swagger {components.schemas} ResponseFile {
     "description": "Definitions of a model file.",
     "type": "object"
   }
 */
/** Definitions of a model file. */
export interface ShapeDiverResponseFile {
    /**
     * @swagger {components.schemas.ResponseFile.properties} upload {
         "description": "href to upload a model file.",
         "type": "string"
       }
     */
    /** href to upload a model file. */
    upload?: string;

    /**
     * @swagger {components.schemas.ResponseFile.properties} download {
         "description": "href to download a model file.",
         "type": "string"
       }
     */
    /** href to download a model file. */
    download?: string;
}

/**
 * @swagger {components.schemas} ResponsePlugins {
     "description": "Information about Grasshopper plugins.",
     "type": "object"
   }
 */
/** Information about Grasshopper plugins. */
export interface ShapeDiverResponsePlugins {
    /**
     * @swagger {components.schemas.ResponsePlugins.properties} libraries {
         "description": "Libraries used by the model.",
         "type": "array",
         "items": {
           "$ref": "#/components/schemas/ResponsePluginsLibrary"
         }
       }
     */
    /** Libraries used by the model. */
    libraries?: ShapeDiverResponsePluginsLibrary[];
}

/**
 * @swagger {components.schemas} ResponsePluginsLibrary {
     "description": "Definition of a model library.",
     "type": "object"
   }
 */
/** Definition of a model library. */
export interface ShapeDiverResponsePluginsLibrary {
    /**
     * @swagger {components.schemas.ResponsePluginsLibrary.properties} id {
         "description": "Library ID.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponsePluginsLibrary} required [ "id" ]
     */
    /** Library ID. */
    id: string;

    /**
     * @swagger {components.schemas.ResponsePluginsLibrary.properties} version {
         "description": "Library version.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponsePluginsLibrary} required [ "version" ]
     */
    /** Library version. */
    version: string;

    /**
     * @swagger {components.schemas.ResponsePluginsLibrary.properties} name {
         "description": "Library name.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponsePluginsLibrary} required [ "name" ]
     */
    /** Library name. */
    name: string;

    /**
     * @swagger {components.schemas.ResponsePluginsLibrary.properties} author {
         "description": "Library author.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponsePluginsLibrary} required [ "author" ]
     */
    /** Library author. */
    author: string;

    /**
     * @swagger {components.schemas.ResponsePluginsLibrary.properties} assemblyFullName {
         "description": "Assembly name (not present in Rhino 5).",
         "type": "string"
       }
     */
    /** Assembly name (not present in Rhino 5). */
    assemblyFullName?: string;

    /**
     * @swagger {components.schemas.ResponsePluginsLibrary.properties} assemblyVersion {
         "description": "Assembly version (not present in Rhino 5).",
         "type": "string"
       }
     */
    /** Assembly version (not present in Rhino 5). */
    assemblyVersion?: string;
}

/**
 * @swagger {components.schemas} ResponseStatistic {
     "description": "Model statistic object.",
     "type": "object"
   }
 */
/** Model statistic object. */
export interface ShapeDiverResponseStatistic {
    /**
     * @swagger {components.schemas.ResponseStatistic.properties} comptime {
         "description": "Cumulative time (msec) which has been spent for processing computation requests by the workers (pure computation time).",
         "type": "number"
       }
     */
    /** Cumulative time (msec) which has been spent for processing computation requests by the workers (pure computation time). */
    comptime?: number;

    /**
     * @swagger {components.schemas.ResponseStatistic.properties} lastsession {
         "description": "Timestamp of last session created for the model, in ISO-8601 format.",
         "type": "string"
       }
     */
    /** Timestamp of last session created for the model, in ISO-8601 format. */
    lastsession?: string;

    /**
     * @swagger {components.schemas.ResponseStatistic.properties} lastview {
         "description": "Timestamp of last view of the model, in ISO-8601 format.",
         "type": "string"
       }
     */
    /** Timestamp of last view of the model, in ISO-8601 format. */
    lastview?: string;

    /**
     * @swagger {components.schemas.ResponseStatistic.properties} memUsage {
         "description": "Approximate memory usage of model on workers, in bytes.",
         "type": "number"
       }
     */
    /** Approximate memory usage of model on workers, in bytes. */
    memUsage?: number;

    /**
     * @swagger {components.schemas.ResponseStatistic.properties} numcomp {
         "description": "Number of computations which have been carried out for the model by the workers so far.",
         "type": "number"
       }
     */
    /** Number of computations which have been carried out for the model by the workers so far. */
    numcomp?: number;

    /**
     * @swagger {components.schemas.ResponseStatistic.properties} numsessions {
         "description": "Number of sessions which have been opened for the model so far.",
         "type": "number"
       }
     */
    /** Number of sessions which have been opened for the model so far. */
    numsessions?: number;

    /**
     * @swagger {components.schemas.ResponseStatistic.properties} requesttime {
         "description": "Cumulative time (msec) which has been spent for processing computation requests by the workers (computation time plus overheads).",
         "type": "number"
       }
     */
    /** Cumulative time (msec) which has been spent for processing computation requests by the workers (computation time plus overheads). */
    requesttime?: number;

    /**
     * @swagger {components.schemas.ResponseStatistic.properties} size {
         "description": "File size of the model file in bytes.",
         "type": "number"
       }
     */
    /** File size of the model file in bytes. */
    size?: number;
}

/**
 * @swagger {components.schemas} ResponseParameter {
     "description": "Definition of a parameter of a ShapeDiver Model.",
     "type": "object"
   }
 */
/** Definition of a parameter of a ShapeDiver Model. */
export interface ShapeDiverResponseParameter {
    /**
     * @swagger {components.schemas.ResponseParameter.properties} id {
         "description": "Unique ID of parameter, stays constant each time a model gets uploaded.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseParameter} required [ "id" ]
     */
    /** Unique ID of parameter, stays constant each time a model gets uploaded. */
    id: string;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} choices {
         "description": "Choice of parameter values for types <code>STRINGLIST</code>.",
         "type": "array",
         "items": { "type": "string" }
       }
     */
    /** Choice of parameter values for types <code>STRINGLIST</code>. */
    choices?: string[];

    /**
     * @swagger {components.schemas.ResponseParameter.properties} decimalplaces {
         "description": "Number of decimal places for numeric types.",
         "type": "number"
       }
     */
    /** Number of decimal places for numeric types. */
    decimalplaces?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} defval {
         "description": "Default value of parameter, stringified.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseParameter} required [ "defvali" ]
     */
    /** Default value of parameter, stringified. */
    defval: string;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} expression {
         "description": "Optional expression to be applied to value for visualisation.",
         "type": "string"
       }
     */
    /** Optional expression to be applied to value for visualisation. */
    expression?: string;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} format {
         "description": "List of file formats (content types) supported, used for type <code>FILE</code>.",
         "type": "array",
         "items": { "type": "string" }
       }
     */
    /** List of file formats (content types) supported, used for type <code>FILE</code>. */
    format?: string[];

    /**
     * @swagger {components.schemas.ResponseParameter.properties} min {
         "description": "Minimum value (stringified) for numeric types.",
         "type": "number"
       }
     */
    /** Minimum value (stringified) for numeric types. */
    min?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} max {
         "description": "Maximum:<ul><li>value (stringified) for numeric types.</li><li>string length for type <code>STRING</code>.</li><li>file size allowed (stringified) for type FILE.</li><ul>",
         "type": "number"
       }
     */
    /** Maximum:<ul><li>value (stringified) for numeric types.</li><li>string length for type <code>STRING</code>.</li><li>file size allowed (stringified) for type `FILE`.</li><ul> */
    max?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} umin {
         "description": "Minimum <i>u</i> value for two dimensional domain parameters.",
         "type": "number"
       }
     */
    /** Minimum <i>u</i> value for two dimensional domain parameters. */
    umin?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} umax {
         "description": "Maximum <i>u</i> value for two dimensional domain parameters.",
         "type": "number"
       }
     */
    /** Maximum <i>u</i> value for two dimensional domain parameters. */
    umax?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} vmin {
         "description": "Minimum <i>v</i> value for two dimensional domain parameters.",
         "type": "number"
       }
     */
    /** Minimum <i>v</i> value for two dimensional domain parameters. */
    vmin?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} vmax {
         "description": "Maximum <i>v</i> value for two dimensional domain parameters.",
         "type": "number"
       }
     */
    /** Maximum <i>v</i> value for two dimensional domain parameters. */
    vmax?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} interval {
         "description": "Step size used for domain parameters.",
         "type": "number"
       }
     */
    /** Step size used for domain parameters. */
    interval?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} name {
         "description": "Name of the parameter.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseParameter} required [ "name" ]
     */
    /** Name of the parameter. */
    name: string;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} type {
         "description": "Type of parameter.",
         "$ref": "#/components/schemas/ResponseParameterType"
       }
     * @swagger {components.schemas.ResponseParameter} required [ "type" ]
     */
    /** Type of parameter. */
    type: ShapeDiverResponseParameterType;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} visualization {
         "description": "Optional preferred visualization for parameters of type <code>FILE</code> and <code>STRINGLIST</code>.",
         "$ref": "#/components/schemas/ResponseParameterVisualization"
       }
     */
    /**
     * Optional preferred visualization for parameters of type
     * {@link ShapeDiverResponseParameterType.FILE} and
     * {@link ShapeDiverResponseParameterType.STRINGLIST}.
     */
    visualization?: ShapeDiverResponseParameterVisualization;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} structure {
         "description": "Structure of a parameter.",
         "$ref": "#/components/schemas/ResponseParameterStructure"
       }
     */
    /** Structure of a parameter. */
    structure?: ShapeDiverResponseParameterStructure;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} group {
         "description": "Group of a parameter.",
         "$ref": "#/components/schemas/ResponseParameterGroup"
       }
     */
    /** Group of a parameter. */
    group?: ShapeDiverResponseParameterGroup;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} hint {
         "description": "Technical hint for the UI implementation.",
         "type": "string"
       }
     */
    /** Technical hint for the UI implementation. */
    hint?: string;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} order {
         "description": "Ordering of the parameter in client applications.",
         "type": "number"
       }
     */
    /** Ordering of the parameter in client applications. */
    order?: number;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} tooltip {
         "description": "Description that is shown as a tooltip in the clients.",
         "type": "string"
       }
     */
    /** Description that is shown as a tooltip in the clients. */
    tooltip?: string;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} displayname {
         "description": "Parameter name to display instead of <code>name</code>.",
         "type": "string"
       }
     */
    /** Parameter name to display instead of {@link name}. */
    displayname?: string;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} hidden {
         "description": "Controls whether the parameter should be hidden in the UI.",
         "type": "boolean"
       }
     * @swagger {components.schemas.ResponseParameter} required [ "hidden" ]
     */
    /** Controls whether the parameter should be hidden in the UI. */
    hidden: boolean;

    /**
     * @swagger {components.schemas.ResponseParameter.properties} settings {
         "description": "Holds parameter-type specific information.",
         "type": "object"
       }
     */
    /** Holds parameter-type specific information. */
    settings?: Record<string, any>;
}

/**
 * @swagger {components.schemas} ResponseParameterType {
     "description": "Type of parameter.<br/><br/>All types starting with 's' are s-type parameters while the others are basic parameter types.",
     "type": "string",
     "enum": [ "sBitmap", "sBool", "sBox", "sBrep", "sCircle", "sColor", "sCurve", "sDomain", "sDomain2D", "sInteger", "sLine", "sMesh", "sNumber", "sPlane", "sPoint", "sRectangle", "sString", "sSubdiv", "sSurface", "sTime", "sVector", "Bool", "Color", "Even", "File", "Float", "Int", "Odd", "String", "StringList", "Time", "unknown" ]
   }
 */
/**
 * Type of parameter.
 *
 * All types starting with 's' are s-type parameters while the others are basic parameter types.
 */
export enum ShapeDiverResponseParameterType {
    S_BITMAP = 'sBitmap',
    S_BOOL = 'sBool',
    S_BOX = 'sBox',
    S_BREP = 'sBrep',
    S_CIRCLE = 'sCircle',
    S_COLOR = 'sColor',
    S_CURVE = 'sCurve',
    S_DOMAIN = 'sDomain',
    S_DOMAIN_2D = 'sDomain2D',
    S_INTEGER = 'sInteger',
    S_LINE = 'sLine',
    S_MESH = 'sMesh',
    S_NUMBER = 'sNumber',
    S_PLANE = 'sPlane',
    S_POINT = 'sPoint',
    S_RECTANGLE = 'sRectangle',
    S_STRING = 'sString',
    S_SUBDIV = 'sSubdiv',
    S_SURFACE = 'sSurface',
    S_TIME = 'sTime',
    S_VECTOR = 'sVector',
    BOOL = 'Bool',
    COLOR = 'Color',
    DRAWING = 'Drawing',
    EVEN = 'Even',
    FILE = 'File',
    FLOAT = 'Float',
    INTERACTION = 'Interaction',
    INT = 'Int',
    ODD = 'Odd',
    STRING = 'String',
    STRINGLIST = 'StringList',
    TIME = 'Time',
    UNKNOWN = 'unknown',
}

/**
 * @swagger {components.schemas} ResponseParameterVisualization {
     "description": "Optional preferred visualization for parameters of type <code>FILE</code> and <code>STRINGLIST</code>.",
     "type": "string",
     "enum": [ "unknown", "button", "calendar", "checklist", "clock", "cycle", "dial", "dropdown", "geometry", "image", "sequence", "slider", "swatch", "text", "toggle" ]
   }
 */
/**
 * Optional preferred visualization for parameters of type
 * {@link ShapeDiverResponseParameterType.FILE} and
 * {@link ShapeDiverResponseParameterType.STRINGLIST}.
 */
export enum ShapeDiverResponseParameterVisualization {
    UNKNOWN = 'unknown',
    BUTTON = 'button',
    CALENDAR = 'calendar',
    CHECKLIST = 'checklist',
    CLOCK = 'clock',
    CYCLE = 'cycle',
    DIAL = 'dial',
    DROPDOWN = 'dropdown',
    GEOMETRY = 'geometry',
    IMAGE = 'image',
    SEQUENCE = 'sequence',
    SLIDER = 'slider',
    SWATCH = 'swatch',
    TEXT = 'text',
    TOGGLE = 'toggle',
}

/**
 * @swagger {components.schemas} ResponseParameterStructure {
     "description": "Structural information of a parameter.",
     "type": "string",
     "enum": [ "item", "list", "tree" ]
   }
 */
/** Structural information of a parameter. */
export enum ShapeDiverResponseParameterStructure {
    ITEM = 'item',
    LIST = 'list',
    TREE = 'tree',
}

/**
 * @swagger {components.schemas} ResponseParameterGroup {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsGroup" },
       {
         "description": "Group information of a parameter.",
         "type": "object"
       }
     ]
   }
 */
/** Group information of a parameter. */
export type ShapeDiverResponseParameterGroup = ShapeDiverCommonsGroup;

/**
 * @swagger {components.schemas} ResponseParameterBasic {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsParameterBasic" },
       {
         "description": "Definition of a basic ShapeDiver parameter.",
         "type": "object"
       }
     ]
   }
 */
/** Definition of a basic ShapeDiver parameter. */
export type ShapeDiverResponseParameterBasic = ShapeDiverCommonsParameterBasic;

/**
 * @swagger {components.schemas} ResponseParameterSType {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsParameterSType" },
       {
         "description": "Definition of the value to use for s-type parameters.",
         "type": "object"
       }
     ]
   }
 */
/** Definition of the value to use for s-type parameters. */
export type ShapeDiverResponseParameterSType = ShapeDiverCommonsParameterSType;

/**
 * @swagger {components.schemas} ResponseModelState {
     "description": "Definition of a Model-State.",
     "type": "object"
   }
 */
/** Definition of a Model-State. */
export interface ShapeDiverResponseModelState {
    /**
     * @swagger {components.schemas.ResponseModelState.properties} id {
         "description": "ID of the Model-State.",
         "type": "string"
       }
     */
    /**
     * The ID of an existing AR scene associated with this model. If provided, the scene's glTF
     * and USDZ data will be duplicated into the newly created Model-State.
     */
    id?: string;

    /**
     * @swagger {components.schemas.ResponseModelState.properties} modelId {
         "description": "ID of the ShapeDiver model.",
         "type": "string"
       }
     */
    /** ID of the ShapeDiver model. */
    modelId?: string;

    /**
     * @swagger {components.schemas.ResponseModelState.properties} parameters {
         "description": "A directory of parameter IDs and values.",
         "type": "object",
         "additionalProperties": {
           "oneOf": [
             { "$ref": "#/components/schemas/ResponseParameterBasic" },
             { "$ref": "#/components/schemas/ResponseParameterSType" }
           ]
         }
       }
     */
    /** A directory of parameter IDs and values. */
    parameters?: {
        [key: string]: ShapeDiverResponseParameterBasic | ShapeDiverResponseParameterSType;
    };

    /**
     * @swagger {components.schemas.ResponseModelState.properties} data {
         "description": "Optional untyped data that can be used to store additional information.",
         "type": "object",
         "additionalProperties": true
       }
     */
    /** Optional untyped data that can be used to store additional information. */
    data?: Record<string, any>;

    /**
     * @swagger {components.schemas.ResponseModelState.properties} createdate {
         "description": "Timestamp of creation of the Model-State.",
         "type": "string"
       }
     */
    /** Timestamp of creation of the Model-State. */
    createdate?: string;

    /**
     * @swagger {components.schemas.ResponseModelState.properties} imageUrl {
         "description": "The URL of the Model-State image.",
         "type": "string"
       }
     */
    /** The URL of the Model-State image. */
    imageUrl?: string;

    /**
     * @swagger {components.schemas.ResponseModelState.properties} hasImage {
         "description": "Indicates whether the Model-State includes an image.",
         "type": "boolean"
       }
     */
    /** Indicates whether the Model-State includes an image. */
    hasImage?: boolean;

    /**
     * @swagger {components.schemas.ResponseModelState.properties} hasGltf {
         "description": "Indicates whether the Model-State includes a glTF asset.",
         "type": "boolean"
       }
     */
    /** Indicates whether the Model-State includes a glTF asset. */
    hasGltf?: boolean;

    /**
     * @swagger {components.schemas.ResponseModelState.properties} hasUsdz {
         "description": "Indicates whether the Model-State includes a USDZ asset.",
         "type": "boolean"
       }
     */
    /** Indicates whether the Model-State includes a USDZ asset. */
    hasUsdz?: boolean;
}

/**
 * @swagger {components.schemas} ResponseViewer {
     "description": "Viewer config object.",
     "type": "object"
   }
 */
/** Viewer config object. */
export interface ShapeDiverResponseViewer {
    /**
     * @swagger {components.schemas.ResponseViewer.properties} config {
         "description": "The config is currently NOT typed, but this will be added sooner or later.",
         "type": "object",
         "properties": {}
       }
     * @swagger {components.schemas.ResponseViewer} required [ "config" ]
     */
    /** The config is currently NOT typed, but this will be added sooner or later. */
    config: object;
}

/**
 * @swagger {components.schemas} ResponseTicketType {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsTicketType" }
     ]
   }
 */
/** */
export const ShapeDiverResponseTicketType = {
    ...ShapeDiverCommonsTicketType,
};
export type ShapeDiverResponseTicketType =
    (typeof ShapeDiverResponseTicketType)[keyof typeof ShapeDiverResponseTicketType];

/**
 * @swagger {components.schemas} ResponseTicket {
     "allOf": [
       { "$ref": "#/components/schemas/CommonsTicket" },
       {
         "description": "Decrypted ticket details.",
         "type": "object",
         "required": [ "accessdomains", "author", "use_id2" ]
       }
     ]
   }
 */
/** Decrypted ticket details. */
export interface ShapeDiverResponseTicket extends ShapeDiverCommonsTicket {
    /**
     * @swagger {components.schemas.ResponseTicket.properties} type {
         "description": "The type of the ticket.",
         "$ref": "#/components/schemas/ResponseTicketType"
       }
     * @swagger {components.schemas.ResponseTicket} required [ "type" ]
     */
    /** The type of the ticket. */
    type: ShapeDiverResponseTicketType;

    /**
     * @swagger {components.schemas.ResponseTicket.properties} model_id {
         "description": "Either the model's <code>id</code> or <code>id2</code> property, depending on the ticket property <code>use_id2</code>.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseTicket} required [ "model_id" ]
     */
    /** Either the model's <code>id</code> or <code>id2</code> property, depending on the ticket property {@link use_id2}. */
    model_id: string;
}

/**
 * @swagger {components.schemas} ResponseGltfUpload {
     "description": "Information about uploaded glTF object.",
     "type": "object"
   }
 */
/** Information about uploaded glTF object. */
export interface ShapeDiverResponseGltfUpload {
    /**
     * @swagger {components.schemas.ResponseGltfUpload.properties} href {
         "description": "The URL to download the glTF file.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseGltfUpload} required [ "href" ]
     */
    /** The URL to download the glTF file. */
    href: string;

    /**
     * @swagger {components.schemas.ResponseGltfUpload.properties} sceneId {
         "description": "Contains the unique ID of the uploaded scene. Only present for uploads with the conversion type <code>scene</code>.",
         "type": "string"
       }
     */
    /** Contains the unique ID of the uploaded scene. Only present for uploads with the conversion type <code>scene</code>. */
    sceneId?: string;
}

/**
 * @swagger {components.schemas} ResponseModelCleanupProcess {
 *   "description": "Information about a model cleanup process.",
 *   "type": "object"
 * }
 */
/** Information about a model cleanup process. */
export interface ShapeDiverResponseModelCleanupProcess {
    /**
     * @swagger {components.schemas.ResponseModelCleanupProcess.properties} type {
         "description": "Type of the model cleanup process.",
         "$ref": "#/components/schemas/ResponseModelCleanupProcessType"
       }
     * @swagger {components.schemas.ResponseModelCleanupProcess} required [ "type" ]
     */
    /** Type of the model cleanup process. */
    type: ShapeDiverResponseModelCleanupProcessType;

    /**
     * @swagger {components.schemas.ResponseModelCleanupProcess.properties} timestamp_enqueued {
         "description": "The timestamp when the deletion job has been enqueued (format <code>YYYYMMDDhhmmssZZZ</code>).",
         "type": "string",
         "pattern": "^\\d{17}$"
       }
     * @swagger {components.schemas.ResponseModelCleanupProcess} required [ "timestamp_enqueued" ]
     */
    /** The timestamp when the deletion job has been enqueued (format <code>YYYYMMDDhhmmssZZZ</code>). */
    timestamp_enqueued: string;

    /**
     * @swagger {components.schemas.ResponseModelCleanupProcess.properties} total {
         "description": "The total number of items of this type that are going to be deleted.",
         "type": "number"
       }
     */
    /** The total number of items of this type that are going to be deleted. */
    total?: number;

    /**
     * @swagger {components.schemas.ResponseModelCleanupProcess.properties} deleted {
         "description": "The number of already deleted items of this type.",
         "type": "number"
       }
     */
    /** The number of already deleted items of this type. */
    deleted?: number;
}

/**
 * @swagger {components.schemas} ResponseModelCleanupProcessType {
     "description": "Model cleanup process types.",
     "type": "string",
     "enum": [ "delete_export_version", "delete_model_texture", "delete_output_version" ]
   }
 */
/** Model cleanup process types. */
export enum ShapeDiverResponseModelCleanupProcessType {
    DELETE_EXPORT_VERSION = 'delete_export_version',
    DELETE_MODEL_TEXTURE = 'delete_model_texture',
    DELETE_OUTPUT_VERSION = 'delete_output_version',
}

/**
 * @swagger {components.schemas} ResponseModelTexture {
 *   "description": "Information about a model texture.",
 *   "type": "object"
 * }
 */
/** Information about a model texture. */
export interface ShapeDiverResponseModelTexture {
    /**
     * @swagger {components.schemas.ResponseModelTexture.properties} modelId {
         "description": "The ID of the ShapeDiver model.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseModelTexture} required [ "modelId" ]
     */
    /** The ID of the ShapeDiver model. */
    modelId: string;

    /**
     * @swagger {components.schemas.ResponseModelTexture.properties} textureId {
         "description": "The texture ID.",
         "type": "string"
       }
     * @swagger {components.schemas.ResponseModelTexture} required [ "textureId" ]
     */
    /** The texture ID. */
    textureId: string;

    /**
     * @swagger {components.schemas.ResponseModelTexture.properties} url {
         "description": "The original URL of the texture asset.",
         "type": "string"
       }
     */
    /** The original URL of the texture asset. */
    url?: string;

    /**
     * @swagger {components.schemas.ResponseModelTexture.properties} width {
         "description": "The width of the texture.",
         "type": "number"
       }
     */
    /** The width of the texture. */
    width?: number;

    /**
     * @swagger {components.schemas.ResponseModelTexture.properties} height {
         "description": "The height of the texture.",
         "type": "number"
       }
     */
    /** The height of the texture. */
    height?: number;

    /**
     * @swagger {components.schemas.ResponseModelTexture.properties} isAssetAvailable {
         "description": "Is <code>true</code> when the texture has been cached, otherwise <code>false</code>.",
         "type": "boolean"
       }
     * @swagger {components.schemas.ResponseModelTexture} required [ "isAssetAvailable" ]
     */
    /** Is `true` when the texture has been cached, otherwise `false`. */
    isAssetAvailable: boolean;
}
