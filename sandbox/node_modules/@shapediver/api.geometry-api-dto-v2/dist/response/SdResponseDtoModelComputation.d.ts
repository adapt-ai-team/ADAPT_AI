import { ShapeDiverCommonsModelComputationStatus } from '../commons/SdCommonModelComputation';
export interface ShapeDiverResponseModelComputation {
    id: string;
    timestamp: number;
    timestamp_str: string;
    compute_request_id: string;
    exports: {
        [id: string]: string;
    };
    outputs: {
        [id: string]: string;
    };
    params: object;
    stats: ShapeDiverResponseModelComputationStats;
    status: ShapeDiverResponseModelComputationStatus;
    timestamp_fin: string;
    timestamp_req: string;
    timestamp_req_iso: string;
    timestamp_resp: string;
    msg?: string;
    limit?: ShapeDiverResponseModelComputationLimits;
}
export interface ShapeDiverResponseModelComputationStats {
    size_assets?: number;
    size_assets_storage?: number;
    time_completion: number;
    time_model_download: number;
    time_model_open: number;
    time_processing: number;
    time_check_stored: number;
    time_check_loaded: number;
    time_storage?: number;
    time_solver: number;
    time_solver_collect?: number;
    time_solver_ext: number;
    time_wait: number;
    time_cache_outputs?: number;
    model?: ShapeDiverResponseModelComputationModel;
    cpu_time_check_stored?: number;
    cpu_time_check_loaded?: number;
    cpu_time_storage?: number;
    cpu_time_model_download?: number;
    cpu_time_model_open?: number;
    cpu_time_solver?: number;
    cpu_time_solver_collect?: number;
    cpu_time_solver_ext?: number;
    cpu_time_cache_outputs?: number;
    time_model_prepare?: number;
    cpu_time_model_prepare?: number;
}
export interface ShapeDiverResponseModelComputationModel {
    components: {
        computed: {
            instance: string;
            component: string;
            name: string;
            nick_name: string;
            time: number;
        }[];
        computing: {
            instance: string;
            component: string;
            name: string;
            nick_name: string;
        }[];
        errors: {
            component: string;
            errors: string[];
            instance: string;
            name: string;
            nick_name: string;
            warnings: string[];
        }[];
        warnings: {
            component: string;
            instance: string;
            name: string;
            nick_name: string;
            warnings: string[];
        }[];
    };
    count_success?: number;
    count_timeout?: number;
    changes?: string[];
}
export declare const ShapeDiverResponseModelComputationStatus: {
    SUCCESS: ShapeDiverCommonsModelComputationStatus.SUCCESS;
    TIMEOUT: ShapeDiverCommonsModelComputationStatus.TIMEOUT;
    CHECK_CONFIRMED: ShapeDiverCommonsModelComputationStatus.CHECK_CONFIRMED;
    CHECK_DENIED: ShapeDiverCommonsModelComputationStatus.CHECK_DENIED;
    CHECK_PENDING: ShapeDiverCommonsModelComputationStatus.CHECK_PENDING;
    MAX_COMBINED_ASSET_SIZE_EXCEEDED: ShapeDiverCommonsModelComputationStatus.MAX_COMBINED_ASSET_SIZE_EXCEEDED;
    MAX_DB_SIZE_PER_OUTPUT_EXCEEDED: ShapeDiverCommonsModelComputationStatus.MAX_DB_SIZE_PER_OUTPUT_EXCEEDED;
    MAX_PARTS_PER_OUTPUT_EXCEEDED: ShapeDiverCommonsModelComputationStatus.MAX_PARTS_PER_OUTPUT_EXCEEDED;
    MAX_ASSET_PARTS_PER_OUTPUT_EXCEEDED: ShapeDiverCommonsModelComputationStatus.MAX_ASSET_PARTS_PER_OUTPUT_EXCEEDED;
    MAX_TRANSFORMATIONS_PER_OUTPUT_EXCEEDED: ShapeDiverCommonsModelComputationStatus.MAX_TRANSFORMATIONS_PER_OUTPUT_EXCEEDED;
    MAX_PARTS_EXCEEDED: ShapeDiverCommonsModelComputationStatus.MAX_PARTS_EXCEEDED;
    MAX_ASSET_PARTS_EXCEEDED: ShapeDiverCommonsModelComputationStatus.MAX_ASSET_PARTS_EXCEEDED;
    RECOVERABLE_ERROR: ShapeDiverCommonsModelComputationStatus.RECOVERABLE_ERROR;
    UNRECOVERABLE_ERROR: ShapeDiverCommonsModelComputationStatus.UNRECOVERABLE_ERROR;
    NO_OUTPUT_DATA_FOR_DEFAULT_PARAMETER_VALUES: ShapeDiverCommonsModelComputationStatus.NO_OUTPUT_DATA_FOR_DEFAULT_PARAMETER_VALUES;
    MODEL_WITHOUT_GEOMETRY_OUTPUT: ShapeDiverCommonsModelComputationStatus.MODEL_WITHOUT_GEOMETRY_OUTPUT;
    UNKNOWN: ShapeDiverCommonsModelComputationStatus.UNKNOWN;
};
export type ShapeDiverResponseModelComputationStatus = (typeof ShapeDiverResponseModelComputationStatus)[keyof typeof ShapeDiverResponseModelComputationStatus];
export interface ShapeDiverResponseModelComputationLimits {
    max_comp_time: number;
    max_output_size: number;
    max_export_size: number;
}
//# sourceMappingURL=SdResponseDtoModelComputation.d.ts.map