export interface ShapeDiverResponseError {
    error: ShapeDiverResponseErrorType;
    desc: string;
    message?: string;
}
export declare enum ShapeDiverResponseErrorType {
    ASSERTION_ERROR = "SdAssertionError",
    CACHE_ERROR_GENERIC = "SdCacheErrorGeneric",
    CONNECTOR_ERROR = "SdConnectorError",
    DATABASE_ERROR_GENERIC = "SdDatabaseErrorGeneric",
    EMAILING_ERROR = "SdEmailingError",
    ERROR_ENTITY_NOT_FOUND = "SdErrorEntityNotFound",
    ERROR_FORBIDDEN = "SdErrorForbidden",
    ERROR_GENERIC_CLIENT = "SdErrorGenericClient",
    ERROR_GENERIC_INTERNAL = "SdErrorGenericInternal",
    ERROR_UNAUTHORIZED = "SdErrorUnauthorized",
    ILLEGAL_ARGUMENT_ERROR = "SdIllegalArgumentError",
    JWT_VALIDATION_ERROR = "SdJwtValidationError",
    MODEL_VALIDATION_ERROR = "SdModelValidationError",
    NOT_ACCEPTABLE = "SdNotAcceptable",
    NOT_FOUND_ERROR = "SdNotFoundError",
    PARAMETER_VALIDATION_ERROR = "SdParameterValidationError",
    RATE_LIMIT_ERROR_GENERIC = "SdRateLimitErrorGeneric",
    REQUEST_TIMEOUT = "SdRequestTimeout",
    REQUEST_VALIDATION_ERROR = "SdRequestValidationError",
    RESOURCE_GONE_ERROR = "SdResourceGoneError",
    SESSION_GONE_ERROR = "SdSessionGoneError",
    SESSION_VALIDATION_ERROR = "SdSessionValidationError",
    STORAGE_ERROR_GENERIC = "SdStorageErrorGeneric",
    TEXTURE_URL_ERROR = "SdTextureUrlError",
    TICKET_VALIDATION_ERROR = "SdTicketValidationError",
    TOKEN_MISSING_ERROR = "SdTokenMissingError",
    TRANSFORM_CONTENT_ARRAY_ERROR = "SdTransformContentArrayError",
    UNCONFIRMED_MODEL_ERROR = "SdUnconfirmedModelError",
    UNKNOWN = ""
}
//# sourceMappingURL=SdResponseDtoError.d.ts.map