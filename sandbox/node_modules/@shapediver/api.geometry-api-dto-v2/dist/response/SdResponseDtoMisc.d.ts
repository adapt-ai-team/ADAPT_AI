import { ShapeDiverCommonsModelStatus } from '../commons/SdCommonModel';
import { ShapeDiverCommonsGroup } from '../commons/SdCommonsGroup';
import { ShapeDiverCommonsParameterBasic, ShapeDiverCommonsParameterSType } from '../commons/SdCommonsParameter';
import { ShapeDiverCommonsTicket, ShapeDiverCommonsTicketType } from '../commons/SdCommonsTicket';
export interface ShapeDiverResponseAction {
    name: string;
    title: string;
    href: string;
    method: string;
    template?: string;
}
export interface ShapeDiverResponseTemplate {
    name: string;
    title: string;
    data: object;
}
export interface ShapeDiverResponseModel {
    backlinkurl?: string;
    checkurl?: string;
    createdate?: string;
    documentid?: string;
    filename?: string;
    id: string;
    id2?: string;
    msg?: string;
    name?: string;
    org_id?: string;
    stat: ShapeDiverResponseModelStatus;
    user_id?: string;
    webhook_url?: string;
    webhook_token?: string;
}
export declare const ShapeDiverResponseModelStatus: {
    UNKNOWN: ShapeDiverCommonsModelStatus.UNKNOWN;
    NOT_UPLOADED: ShapeDiverCommonsModelStatus.NOT_UPLOADED;
    UPLOADED: ShapeDiverCommonsModelStatus.UPLOADED;
    PENDING: ShapeDiverCommonsModelStatus.PENDING;
    CONFIRMED: ShapeDiverCommonsModelStatus.CONFIRMED;
    DENIED: ShapeDiverCommonsModelStatus.DENIED;
    DELETED: ShapeDiverCommonsModelStatus.DELETED;
};
export type ShapeDiverResponseModelStatus = (typeof ShapeDiverResponseModelStatus)[keyof typeof ShapeDiverResponseModelStatus];
export interface ShapeDiverResponseFile {
    upload?: string;
    download?: string;
}
export interface ShapeDiverResponsePlugins {
    libraries?: ShapeDiverResponsePluginsLibrary[];
}
export interface ShapeDiverResponsePluginsLibrary {
    id: string;
    version: string;
    name: string;
    author: string;
    assemblyFullName?: string;
    assemblyVersion?: string;
}
export interface ShapeDiverResponseStatistic {
    comptime?: number;
    lastsession?: string;
    lastview?: string;
    memUsage?: number;
    numcomp?: number;
    numsessions?: number;
    requesttime?: number;
    size?: number;
}
export interface ShapeDiverResponseParameter {
    id: string;
    choices?: string[];
    decimalplaces?: number;
    defval: string;
    expression?: string;
    format?: string[];
    min?: number;
    max?: number;
    umin?: number;
    umax?: number;
    vmin?: number;
    vmax?: number;
    interval?: number;
    name: string;
    type: ShapeDiverResponseParameterType;
    visualization?: ShapeDiverResponseParameterVisualization;
    structure?: ShapeDiverResponseParameterStructure;
    group?: ShapeDiverResponseParameterGroup;
    hint?: string;
    order?: number;
    tooltip?: string;
    displayname?: string;
    hidden: boolean;
    settings?: Record<string, any>;
}
export declare enum ShapeDiverResponseParameterType {
    S_BITMAP = "sBitmap",
    S_BOOL = "sBool",
    S_BOX = "sBox",
    S_BREP = "sBrep",
    S_CIRCLE = "sCircle",
    S_COLOR = "sColor",
    S_CURVE = "sCurve",
    S_DOMAIN = "sDomain",
    S_DOMAIN_2D = "sDomain2D",
    S_INTEGER = "sInteger",
    S_LINE = "sLine",
    S_MESH = "sMesh",
    S_NUMBER = "sNumber",
    S_PLANE = "sPlane",
    S_POINT = "sPoint",
    S_RECTANGLE = "sRectangle",
    S_STRING = "sString",
    S_SUBDIV = "sSubdiv",
    S_SURFACE = "sSurface",
    S_TIME = "sTime",
    S_VECTOR = "sVector",
    BOOL = "Bool",
    COLOR = "Color",
    DRAWING = "Drawing",
    EVEN = "Even",
    FILE = "File",
    FLOAT = "Float",
    INTERACTION = "Interaction",
    INT = "Int",
    ODD = "Odd",
    STRING = "String",
    STRINGLIST = "StringList",
    TIME = "Time",
    UNKNOWN = "unknown"
}
export declare enum ShapeDiverResponseParameterVisualization {
    UNKNOWN = "unknown",
    BUTTON = "button",
    CALENDAR = "calendar",
    CHECKLIST = "checklist",
    CLOCK = "clock",
    CYCLE = "cycle",
    DIAL = "dial",
    DROPDOWN = "dropdown",
    GEOMETRY = "geometry",
    IMAGE = "image",
    SEQUENCE = "sequence",
    SLIDER = "slider",
    SWATCH = "swatch",
    TEXT = "text",
    TOGGLE = "toggle"
}
export declare enum ShapeDiverResponseParameterStructure {
    ITEM = "item",
    LIST = "list",
    TREE = "tree"
}
export type ShapeDiverResponseParameterGroup = ShapeDiverCommonsGroup;
export type ShapeDiverResponseParameterBasic = ShapeDiverCommonsParameterBasic;
export type ShapeDiverResponseParameterSType = ShapeDiverCommonsParameterSType;
export interface ShapeDiverResponseModelState {
    id?: string;
    modelId?: string;
    parameters?: {
        [key: string]: ShapeDiverResponseParameterBasic | ShapeDiverResponseParameterSType;
    };
    data?: Record<string, any>;
    createdate?: string;
    imageUrl?: string;
    hasImage?: boolean;
    hasGltf?: boolean;
    hasUsdz?: boolean;
}
export interface ShapeDiverResponseViewer {
    config: object;
}
export declare const ShapeDiverResponseTicketType: {
    BACKEND: ShapeDiverCommonsTicketType.BACKEND;
    NONE: ShapeDiverCommonsTicketType.NONE;
};
export type ShapeDiverResponseTicketType = (typeof ShapeDiverResponseTicketType)[keyof typeof ShapeDiverResponseTicketType];
export interface ShapeDiverResponseTicket extends ShapeDiverCommonsTicket {
    type: ShapeDiverResponseTicketType;
    model_id: string;
}
export interface ShapeDiverResponseGltfUpload {
    href: string;
    sceneId?: string;
}
export interface ShapeDiverResponseModelCleanupProcess {
    type: ShapeDiverResponseModelCleanupProcessType;
    timestamp_enqueued: string;
    total?: number;
    deleted?: number;
}
export declare enum ShapeDiverResponseModelCleanupProcessType {
    DELETE_EXPORT_VERSION = "delete_export_version",
    DELETE_MODEL_TEXTURE = "delete_model_texture",
    DELETE_OUTPUT_VERSION = "delete_output_version"
}
export interface ShapeDiverResponseModelTexture {
    modelId: string;
    textureId: string;
    url?: string;
    width?: number;
    height?: number;
    isAssetAvailable: boolean;
}
//# sourceMappingURL=SdResponseDtoMisc.d.ts.map