import * as Sentry from '@sentry/browser';
import { ShapeDiverError as ShapeDiverBackendError } from '@shapediver/sdk.geometry-api-sdk-core';
import { ShapeDiverViewerError } from './ShapeDiverError';
export declare enum LOGGINGLEVEL {
    NONE = "none",
    ERROR = "error",
    FATAL = "fatal",
    WARN = "warn",
    INFO = "info",
    DEBUG = "debug",
    DEBUG_HIGH = "debug_high",
    DEBUG_MEDIUM = "debug_medium",
    DEBUG_LOW = "debug_low"
}
export declare enum LOGGINGTOPIC {
    AR = "ar",
    GENERAL = "general",
    EXPORT = "export",
    PARAMETER = "parameter",
    OUTPUT = "output",
    SESSION = "session",
    VIEWER = "viewer",
    CAMERA = "camera",
    LIGHT = "light",
    CAMERA_CONTROL = "camera_control",
    DATA_PROCESSING = "data_processing",
    SDTF = "sdtf",
    THREE = "three",
    SETTINGS = "settings"
}
export declare class Logger {
    private _loggingLevel;
    private _showMessages;
    private _breadCrumbs;
    private _breadCrumbCounter;
    private _sentryHub;
    private _uuidGenerator;
    private _userId;
    constructor();
    get loggingLevel(): LOGGINGLEVEL;
    set loggingLevel(value: LOGGINGLEVEL);
    get showMessages(): boolean;
    set showMessages(value: boolean);
    private canLog;
    handleError(topic: LOGGINGTOPIC, scope: string, e: ShapeDiverBackendError | ShapeDiverViewerError | Error, logToSentry?: boolean): void;
    sentryError(topic: LOGGINGTOPIC, error: ShapeDiverBackendError | ShapeDiverViewerError | Error, msg?: string): void;
    sentryBreadcrumb(topic: LOGGINGTOPIC, msg: string, level: Sentry.Severity): void;
    /**
     * Logging a debug message.
     * @param msg the message
     */
    debug(topic: LOGGINGTOPIC, msg: string): void;
    /**
     * Logging a debug message with high priority.
     * @param msg the message
     */
    debugHigh(topic: LOGGINGTOPIC, msg: string): void;
    /**
     * Logging a debug message with low priority.
     * @param msg the message
     */
    debugLow(topic: LOGGINGTOPIC, msg: string): void;
    /**
     * Logging a debug message with medium priority.
     * @param msg the message
     */
    debugMedium(topic: LOGGINGTOPIC, msg: string): void;
    /**
     * Logging an error.
     * @param msg the message
     */
    error(topic: LOGGINGTOPIC, error: Error, msg?: string, throwError?: boolean, notifySentry?: boolean): void;
    /**
     * Logging a fatal error.
     * @param msg the message
     */
    fatal(topic: LOGGINGTOPIC, msg: string, error: Error, throwError?: boolean): void;
    /**
     * Logging an info.
     * @param msg the message
     */
    info(topic: LOGGINGTOPIC, msg: string): void;
    /**
     * Logging a warning.
     * @param msg the message
     */
    warn(topic: LOGGINGTOPIC, msg: string): void;
    private messageConstruction;
}
//# sourceMappingURL=Logger.d.ts.map