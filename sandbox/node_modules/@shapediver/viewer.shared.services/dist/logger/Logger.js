"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LOGGINGTOPIC = exports.LOGGINGLEVEL = void 0;
const Sentry = __importStar(require("@sentry/browser"));
const tsyringe_1 = require("tsyringe");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const sdk_geometry_api_sdk_core_1 = require("@shapediver/sdk.geometry-api-sdk-core");
const UuidGenerator_1 = require("../uuid-generator/UuidGenerator");
const browser_1 = require("@sentry/browser");
const ShapeDiverViewerErrors_1 = require("./ShapeDiverViewerErrors");
const sdk_geometry_api_sdk_v2_1 = require("@shapediver/sdk.geometry-api-sdk-v2");
const ShapeDiverError_1 = require("./ShapeDiverError");
var LOGGINGLEVEL;
(function (LOGGINGLEVEL) {
    LOGGINGLEVEL["NONE"] = "none";
    LOGGINGLEVEL["ERROR"] = "error";
    LOGGINGLEVEL["FATAL"] = "fatal";
    LOGGINGLEVEL["WARN"] = "warn";
    LOGGINGLEVEL["INFO"] = "info";
    LOGGINGLEVEL["DEBUG"] = "debug";
    LOGGINGLEVEL["DEBUG_HIGH"] = "debug_high";
    LOGGINGLEVEL["DEBUG_MEDIUM"] = "debug_medium";
    LOGGINGLEVEL["DEBUG_LOW"] = "debug_low";
})(LOGGINGLEVEL = exports.LOGGINGLEVEL || (exports.LOGGINGLEVEL = {}));
var LOGGINGTOPIC;
(function (LOGGINGTOPIC) {
    LOGGINGTOPIC["AR"] = "ar";
    LOGGINGTOPIC["GENERAL"] = "general";
    LOGGINGTOPIC["EXPORT"] = "export";
    LOGGINGTOPIC["PARAMETER"] = "parameter";
    LOGGINGTOPIC["OUTPUT"] = "output";
    LOGGINGTOPIC["SESSION"] = "session";
    LOGGINGTOPIC["VIEWER"] = "viewer";
    LOGGINGTOPIC["CAMERA"] = "camera";
    LOGGINGTOPIC["LIGHT"] = "light";
    LOGGINGTOPIC["CAMERA_CONTROL"] = "camera_control";
    LOGGINGTOPIC["DATA_PROCESSING"] = "data_processing";
    LOGGINGTOPIC["SDTF"] = "sdtf";
    LOGGINGTOPIC["THREE"] = "three";
    LOGGINGTOPIC["SETTINGS"] = "settings";
})(LOGGINGTOPIC = exports.LOGGINGTOPIC || (exports.LOGGINGTOPIC = {}));
let Logger = class Logger {
    // #endregion Properties (2)
    constructor() {
        // #region Properties (2)
        this._loggingLevel = LOGGINGLEVEL.WARN;
        this._showMessages = true;
        this._breadCrumbs = [];
        this._breadCrumbCounter = 0;
        this._uuidGenerator = tsyringe_1.container.resolve(UuidGenerator_1.UuidGenerator);
        this._userId = this._uuidGenerator.create();
        const client = new browser_1.BrowserClient({
            dsn: "https://0510990697b04b9da3ad07868e94e378@o363881.ingest.sentry.io/5828729",
            environment: 'local',
            release: viewer_shared_build_data_1.build_data.build_version,
            maxBreadcrumbs: 100,
            beforeBreadcrumb: (breadcrumb, hint) => {
                this._breadCrumbCounter++;
                return breadcrumb;
            },
            beforeSend: (event, hint) => {
                if (event.level === Sentry.Severity.Debug)
                    event.fingerprint ? event.fingerprint.push(this._userId + '') : event.fingerprint = [this._userId + ''];
                return event;
            },
            // Set tracesSampleRate to 1.0 to capture 100%
            // of transactions for performance monitoring.
            // We recommend adjusting this value in production
            tracesSampleRate: 1.0
        });
        this._sentryHub = new browser_1.Hub(client);
        this._sentryHub.setUser({
            id: this._userId
        });
    }
    // #region Public Accessors (4)
    get loggingLevel() {
        return this._loggingLevel;
    }
    set loggingLevel(value) {
        this._loggingLevel = value;
    }
    get showMessages() {
        return this._showMessages;
    }
    set showMessages(value) {
        this._showMessages = value;
    }
    canLog(loggingLevel) {
        switch (this.loggingLevel) {
            case LOGGINGLEVEL.ERROR:
                if (loggingLevel === LOGGINGLEVEL.FATAL)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.FATAL:
                if (loggingLevel === LOGGINGLEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.WARN:
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.INFO:
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_HIGH:
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_MEDIUM:
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_LOW:
            case LOGGINGLEVEL.DEBUG:
            default:
                return true;
        }
    }
    // #endregion Public Accessors (4)
    // #region Public Methods (8)
    handleError(topic, scope, e, logToSentry = true) {
        if (this.canLog(LOGGINGLEVEL.ERROR) && this.showMessages === true)
            console.error('(ERROR) ', e);
        if (e instanceof sdk_geometry_api_sdk_v2_1.ShapeDiverRequestError) {
            const messageProperty = e && e.message ? e.message : `An unknown issue occurred in ${scope}.`;
            if (logToSentry)
                this.sentryError(topic, e, messageProperty);
            throw e;
        }
        else if (e instanceof sdk_geometry_api_sdk_v2_1.ShapeDiverResponseError && e.error === sdk_geometry_api_sdk_v2_1.ShapeDiverResponseErrorType.UNKNOWN) {
            const messageProperty = e && e.message ? e.message : `An unknown issue occurred in ${scope}.`;
            if (logToSentry)
                this.sentryError(topic, e, messageProperty);
            throw e;
        }
        else if (e instanceof sdk_geometry_api_sdk_v2_1.ShapeDiverResponseError) {
            throw e;
        }
        else if (e instanceof ShapeDiverError_1.ShapeDiverViewerError) {
            const messageProperty = e && e.message ? e.message : `An unknown issue occurred in ${scope}.`;
            if (logToSentry) {
                if (!(e instanceof ShapeDiverViewerErrors_1.ShapeDiverViewerConnectionError) || (e.status && e.status >= 500)) {
                    this.sentryError(topic, e, messageProperty);
                }
            }
            throw e;
        }
        else if (e) {
            const messageProperty = e.message ? e.message : `An unknown issue occurred in ${scope}.`;
            const viewerError = new ShapeDiverViewerErrors_1.ShapeDiverViewerUnknownError(messageProperty, e);
            if (logToSentry)
                this.sentryError(topic, viewerError, messageProperty);
            throw viewerError;
        }
    }
    sentryError(topic, error, msg) {
        var _a;
        this.sentryBreadcrumb(topic, msg || error.message, Sentry.Severity.Error);
        const breadcrumbCounter = this._breadCrumbCounter > 100 ? 100 : this._breadCrumbCounter;
        for (let i = breadcrumbCounter; i < this._breadCrumbs.length + breadcrumbCounter; i++) {
            if (i % 100 === 0 && i !== 0) {
                this._sentryHub.setTag('topic', topic);
                this._sentryHub.setUser({ id: this._userId });
                this._sentryHub.captureMessage('Breadcrumb Issue ' + (i / 100 - 1) + ' (' + this._userId + ')', Sentry.Severity.Debug);
                (_a = this._sentryHub.getScope()) === null || _a === void 0 ? void 0 : _a.clear();
            }
            this._sentryHub.addBreadcrumb(this._breadCrumbs[i - breadcrumbCounter]);
        }
        this._sentryHub.setTag('topic', topic);
        this._sentryHub.setUser({ id: this._userId });
        if (error instanceof sdk_geometry_api_sdk_core_1.ShapeDiverError || error instanceof ShapeDiverError_1.ShapeDiverViewerError) {
            this._sentryHub.captureMessage(error.message, Sentry.Severity.Error);
        }
        else {
            this._sentryHub.captureException(error);
        }
    }
    sentryBreadcrumb(topic, msg, level) {
        this._breadCrumbs.push({
            category: topic,
            message: msg,
            level: Sentry.Severity.Debug,
            timestamp: Math.floor(new Date().getTime() / 1000)
        });
    }
    /**
     * Logging a debug message.
     * @param msg the message
     */
    debug(topic, msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG) && this.showMessages === true)
            console.debug('(DEBUG) ' + this.messageConstruction(msg));
    }
    /**
     * Logging a debug message with high priority.
     * @param msg the message
     */
    debugHigh(topic, msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG_HIGH) && this.showMessages === true)
            console.debug('(DEBUG_HIGH) ' + this.messageConstruction(msg));
    }
    /**
     * Logging a debug message with low priority.
     * @param msg the message
     */
    debugLow(topic, msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG_LOW) && this.showMessages === true)
            console.debug('(DEBUG_LOW) ' + this.messageConstruction(msg));
    }
    /**
     * Logging a debug message with medium priority.
     * @param msg the message
     */
    debugMedium(topic, msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG_MEDIUM) && this.showMessages === true)
            console.debug('(DEBUG_MEDIUM) ' + this.messageConstruction(msg));
    }
    /**
     * Logging an error.
     * @param msg the message
     */
    error(topic, error, msg, throwError = false, notifySentry = true) {
        this.sentryBreadcrumb(topic, msg || error.message, Sentry.Severity.Error);
        if (notifySentry)
            this.sentryError(topic, error, msg);
        if (this.canLog(LOGGINGLEVEL.ERROR) && this.showMessages === true)
            console.error('(ERROR) ' + this.messageConstruction(msg || error.message));
        if (throwError)
            throw error;
    }
    /**
     * Logging a fatal error.
     * @param msg the message
     */
    fatal(topic, msg, error, throwError = false) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Fatal);
        this.sentryError(topic, error, msg);
        if (this.canLog(LOGGINGLEVEL.FATAL) && this.showMessages === true)
            console.error('(FATAL) ' + this.messageConstruction(msg));
        if (throwError)
            throw error;
    }
    /**
     * Logging an info.
     * @param msg the message
     */
    info(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Info);
        if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
            console.info('(INFO) ' + this.messageConstruction(msg));
    }
    /**
     * Logging a warning.
     * @param msg the message
     */
    warn(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Warning);
        if (this.canLog(LOGGINGLEVEL.WARN) && this.showMessages === true)
            console.warn('(WARN) ' + this.messageConstruction(msg));
    }
    // #endregion Public Methods (8)
    // #region Private Methods (2)
    messageConstruction(msg) {
        return new Date().toISOString() + ': ' + msg;
    }
};
Logger = __decorate([
    tsyringe_1.singleton(),
    __metadata("design:paramtypes", [])
], Logger);
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map