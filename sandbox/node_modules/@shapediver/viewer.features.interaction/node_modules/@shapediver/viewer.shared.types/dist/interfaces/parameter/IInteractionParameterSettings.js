"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateDraggingParameterSettings = exports.validateGumballParameterSettings = exports.validateSelectionParameterSettings = exports.validateInteractionParameterSettings = exports.IInteractionParameterJsonSchema = exports.IDraggingParameterJsonSchema = exports.IGumballParameterJsonSchema = exports.ISelectionParameterJsonSchema = void 0;
const zod_1 = require("zod");
// #endregion Interfaces (2)
// #region Variables (7)
const IGeneralInteractionParameterJsonSchema = zod_1.z.object({
    hover: zod_1.z.boolean().optional(),
    hoverColor: zod_1.z.string().optional(),
    prompt: zod_1.z
        .object({
        inactiveTitle: zod_1.z.string().optional(),
        activeTitle: zod_1.z.string().optional(),
        activeText: zod_1.z.string().optional(),
    })
        .optional(),
});
exports.ISelectionParameterJsonSchema = zod_1.z.object({
    type: zod_1.z.literal("selection"),
    props: zod_1.z
        .object({
        maximumSelection: zod_1.z.number().optional(),
        minimumSelection: zod_1.z.number().optional(),
        nameFilter: zod_1.z.array(zod_1.z.string()).optional(),
        selectionColor: zod_1.z.string().optional(),
    })
        .merge(IGeneralInteractionParameterJsonSchema),
});
exports.IGumballParameterJsonSchema = zod_1.z.object({
    type: zod_1.z.literal("gumball"),
    props: zod_1.z
        .object({
        enableRotation: zod_1.z.boolean().optional(),
        enableRotationAxes: zod_1.z
            .object({
            x: zod_1.z.boolean().optional(),
            y: zod_1.z.boolean().optional(),
            z: zod_1.z.boolean().optional(),
        })
            .optional(),
        enableScaling: zod_1.z.boolean().optional(),
        enableScalingAxes: zod_1.z
            .object({
            x: zod_1.z.boolean().optional(),
            y: zod_1.z.boolean().optional(),
            z: zod_1.z.boolean().optional(),
        })
            .optional(),
        enableTranslation: zod_1.z.boolean().optional(),
        enableTranslationAxes: zod_1.z
            .object({
            x: zod_1.z.boolean().optional(),
            y: zod_1.z.boolean().optional(),
            z: zod_1.z.boolean().optional(),
        })
            .optional(),
        nameFilter: zod_1.z.array(zod_1.z.string()).optional(),
        scale: zod_1.z.number().optional(),
        space: zod_1.z.literal("local").or(zod_1.z.literal("world")).optional(),
        selectionColor: zod_1.z.string().optional(),
    })
        .merge(IGeneralInteractionParameterJsonSchema),
});
exports.IDraggingParameterJsonSchema = zod_1.z.object({
    type: zod_1.z.literal("dragging"),
    props: zod_1.z
        .object({
        draggingColor: zod_1.z.string().optional(),
        objects: zod_1.z
            .array(zod_1.z.object({
            nameFilter: zod_1.z.string(),
            restrictions: zod_1.z.array(zod_1.z.string()),
            dragAnchors: zod_1.z
                .array(zod_1.z.object({
                id: zod_1.z.string(),
                position: zod_1.z.array(zod_1.z.number()),
                rotation: zod_1.z
                    .object({
                    axis: zod_1.z.array(zod_1.z.number()),
                    angle: zod_1.z.number(),
                })
                    .optional(),
            }))
                .optional(),
            dragOrigin: zod_1.z.array(zod_1.z.number()).optional(),
        }))
            .optional(),
        restrictions: zod_1.z
            .array(zod_1.z
            .object({
            id: zod_1.z.string(),
            type: zod_1.z.string(),
            rotation: zod_1.z
                .object({
                axis: zod_1.z.array(zod_1.z.number()),
                angle: zod_1.z.number(),
            })
                .optional(),
        })
            .passthrough())
            .optional(),
    })
        .merge(IGeneralInteractionParameterJsonSchema),
});
exports.IInteractionParameterJsonSchema = exports.ISelectionParameterJsonSchema.or(exports.IGumballParameterJsonSchema).or(exports.IDraggingParameterJsonSchema);
const validateInteractionParameterSettings = (param) => {
    return exports.IInteractionParameterJsonSchema.safeParse(param);
};
exports.validateInteractionParameterSettings = validateInteractionParameterSettings;
const validateSelectionParameterSettings = (param) => {
    return exports.ISelectionParameterJsonSchema.safeParse(param);
};
exports.validateSelectionParameterSettings = validateSelectionParameterSettings;
const validateGumballParameterSettings = (param) => {
    return exports.IGumballParameterJsonSchema.safeParse(param);
};
exports.validateGumballParameterSettings = validateGumballParameterSettings;
const validateDraggingParameterSettings = (param) => {
    return exports.IDraggingParameterJsonSchema.safeParse(param);
};
exports.validateDraggingParameterSettings = validateDraggingParameterSettings;
// #endregion Variables (7)
//# sourceMappingURL=IInteractionParameterSettings.js.map