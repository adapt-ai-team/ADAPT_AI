import { ShapeDiverResponseOutputContent } from "@shapediver/sdk.geometry-api-sdk-v2";
import { IMaterialContentDataV1, IMaterialContentDataV2, IMaterialContentDataV3, ITexture } from "@shapediver/viewer.data-engine.shared-types";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { IMapDataPropertiesDefinition, IMaterialAbstractData, IMaterialAbstractDataProperties, IMaterialAbstractDataPropertiesDefinition, MapData, MaterialStandardData } from "@shapediver/viewer.shared.types";
export declare class MaterialEngine {
    private readonly _converter;
    private readonly _httpClient;
    private readonly _logger;
    private static _instance;
    static get instance(): MaterialEngine;
    /**
     * Create a material data based on the material properties
     *
     * @param materialProperties
     * @returns
     */
    createMaterialData(materialProperties: IMaterialAbstractDataProperties): IMaterialAbstractData;
    createMaterialDataFromDefinition(definition: IMaterialAbstractDataPropertiesDefinition): Promise<IMaterialAbstractData>;
    /**
     * Load the material content into a scene graph node.
     *
     * @param content the material content
     * @returns the scene graph node
     */
    loadContent(content: ShapeDiverResponseOutputContent): Promise<ITreeNode>;
    loadMap(url: string, id?: string): Promise<MapData | undefined>;
    /**
     * Load a map from a definition.
     *
     * @param definition
     * @returns
     */
    loadMapFromDefinition(definition?: IMapDataPropertiesDefinition): Promise<MapData | undefined>;
    loadMapWithProperties(texture: ITexture): Promise<MapData | undefined>;
    loadMaterialDefinitionV1(data: IMaterialContentDataV1, presetData?: IMaterialContentDataV3): IMaterialContentDataV3;
    loadMaterialDefinitionV2(data: IMaterialContentDataV2, presetData?: IMaterialContentDataV3): IMaterialContentDataV3;
    loadMaterialDefinitionV3(data: IMaterialContentDataV3, presetData?: IMaterialContentDataV3): IMaterialContentDataV3;
    loadMaterialV3(data: IMaterialContentDataV3): Promise<MaterialStandardData>;
    loadPresetMaterial(preset: number): Promise<MaterialStandardData>;
    loadPresetMaterialDefinition(preset: number): IMaterialContentDataV3;
    private assignGeneralDefinition;
    private assignSpecificDefinition;
    private getClassAndSpecificId;
    /**
     * Multiply two colors
     *
     * @param color1
     * @param color2
     * @returns
     */
    private multiplyColors;
}
//# sourceMappingURL=MaterialEngine.d.ts.map