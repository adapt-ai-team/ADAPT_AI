"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FileParameter_logger, _FileParameter_sessionEngine, _FileParameter_uuidGenerator;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileParameter = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const MimeTypeUtils = __importStar(require("@shapediver/viewer.utils.mime-type"));
const Parameter_1 = require("./Parameter");
class FileParameter extends Parameter_1.Parameter {
    // #endregion Properties (3)
    // #region Constructors (1)
    constructor(paramDef, sessionEngine) {
        super(paramDef, sessionEngine);
        // #region Properties (3)
        _FileParameter_logger.set(this, viewer_shared_services_1.Logger.instance);
        _FileParameter_sessionEngine.set(this, void 0);
        _FileParameter_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);
        __classPrivateFieldSet(this, _FileParameter_sessionEngine, sessionEngine, "f");
    }
    // #endregion Constructors (1)
    // #region Public Methods (2)
    getFilename(fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            // if fileId is undefined and value is undefined, return undefined
            if (fileId === undefined && this.value === undefined)
                return;
            // if fileId is undefined and value is a string and is a valid uuid, use the value as fileId
            if (fileId === undefined &&
                typeof this.value === "string" &&
                ((this.value.length === 36 &&
                    __classPrivateFieldGet(this, _FileParameter_uuidGenerator, "f").validate(this.value)) ||
                    this.value === ""))
                return (yield __classPrivateFieldGet(this, _FileParameter_sessionEngine, "f").getFileInfo(this.id, this.value))
                    .filename;
            // if fileId is undefined, return undefined
            if (fileId === undefined)
                return;
            return (yield __classPrivateFieldGet(this, _FileParameter_sessionEngine, "f").getFileInfo(this.id, fileId))
                .filename;
        });
    }
    upload(v) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const value = v !== undefined ? v : this.value;
            if (value === undefined)
                return this.defval;
            if (typeof value === "string" &&
                ((value.length === 36 && __classPrivateFieldGet(this, _FileParameter_uuidGenerator, "f").validate(value)) ||
                    value === ""))
                return value;
            // get the type of the file
            let fileType;
            if (value instanceof File) {
                // try to get type from file name
                const types = MimeTypeUtils.guessMimeTypeFromFilename(value.name);
                if (value.type === "") {
                    if (types.length === 0) {
                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${this.id}).upload: Error uploading FileParameter, provided File has no type and could not be guessed from filename. Has to be ${this.format}.`);
                    }
                    else {
                        fileType = types;
                    }
                }
                else {
                    fileType = types.concat(value.type);
                }
            }
            else if (value instanceof Blob) {
                if (value.type === "") {
                    throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${this.id}).upload: Error uploading FileParameter, provided File has no type and could not be guessed from filename. Has to be ${this.format}.`);
                }
                else {
                    fileType = value.type;
                }
            }
            else {
                fileType = "text/plain";
            }
            /**
             * Get all possible mime types for the provided fileType.
             */
            let types = typeof fileType === "string" ? [fileType] : fileType;
            // get all endings that are possible for this type
            const endings = MimeTypeUtils.mapMimeTypeToFileEndings(types);
            // get all mimeTypes that are possible for these endings
            endings.forEach((e) => (types = types.concat(MimeTypeUtils.guessMimeTypeFromFilename(e))));
            /**
             * Check if the provided fileType is allowed for this parameter.
             * If not, throw an error.
             */
            let type = undefined;
            // check if one of the mime types is allowed
            let allowedType = false;
            for (let i = 0; i < types.length; i++) {
                if ((_a = this.format) === null || _a === void 0 ? void 0 : _a.includes(types[i])) {
                    allowedType = true;
                    type = types[i];
                    break;
                }
            }
            // if the type is not allowed, throw an error
            if (allowedType === false || type === undefined)
                throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${this.id}).upload: Error uploading FileParameter, type of data (${fileType}) is not a valid type. Has to be ${this.format}.`);
            // create a File object
            const data = new File([
                typeof value === "string"
                    ? new Blob([value], { type: "text/plain" })
                    : value,
            ], value instanceof File && value.name !== undefined ? value.name : "", { type });
            __classPrivateFieldGet(this, _FileParameter_logger, "f").debug(`Parameter(${this.id}).upload: Uploading FileParameter.`);
            return yield __classPrivateFieldGet(this, _FileParameter_sessionEngine, "f").uploadFile(this.id, data, type);
        });
    }
}
exports.FileParameter = FileParameter;
_FileParameter_logger = new WeakMap(), _FileParameter_sessionEngine = new WeakMap(), _FileParameter_uuidGenerator = new WeakMap();
//# sourceMappingURL=FileParameter.js.map