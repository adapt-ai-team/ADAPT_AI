"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _DrawingParameter_sessionEngine;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrawingParameter = void 0;
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const Parameter_1 = require("./Parameter");
class DrawingParameter extends Parameter_1.Parameter {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(paramDef, sessionEngine) {
        super(paramDef, sessionEngine);
        // #region Properties (1)
        _DrawingParameter_sessionEngine.set(this, void 0);
        __classPrivateFieldSet(this, _DrawingParameter_sessionEngine, sessionEngine, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (2)
    get geometry() {
        var _a;
        return (_a = this.getDrawingProperties()) === null || _a === void 0 ? void 0 : _a.geometry;
    }
    get restrictions() {
        var _a;
        return (_a = this.getDrawingProperties()) === null || _a === void 0 ? void 0 : _a.restrictions;
    }
    // #endregion Public Getters And Setters (2)
    // #region Private Methods (1)
    getDrawingProperties() {
        const result = (0, viewer_shared_types_1.validateDrawingParameterSettings)(this.settings);
        if (result.success) {
            return this.settings;
        }
    }
}
exports.DrawingParameter = DrawingParameter;
_DrawingParameter_sessionEngine = new WeakMap();
//# sourceMappingURL=DrawingParameter.js.map