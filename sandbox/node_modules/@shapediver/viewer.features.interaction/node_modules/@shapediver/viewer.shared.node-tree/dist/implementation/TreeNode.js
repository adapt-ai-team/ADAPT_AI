"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TreeNode_boundingBox, _TreeNode_boundingBoxViewport, _TreeNode_children, _TreeNode_data, _TreeNode_id, _TreeNode_uuidGenerator, _TreeNode_boneInverses, _TreeNode_bones, _TreeNode_convertedObject, _TreeNode_excludeViewports, _TreeNode_intersectionTest, _TreeNode_name, _TreeNode_originalId, _TreeNode_originalName, _TreeNode_parent, _TreeNode_restrictViewports, _TreeNode_skinNode, _TreeNode_transformations, _TreeNode_updateCallbackConvertedObject, _TreeNode_version, _TreeNode_visible, _TreeNode_displayName;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeNode = void 0;
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const gl_matrix_1 = require("gl-matrix");
class TreeNode {
    // #endregion Properties (19)
    // #region Constructors (1)
    /**
     * Creation of a node that can be used in the node tree.
     *
     * @param name the name of the node
     * @param parent the parent of this node
     * @param data the array of data
     * @param transformations the array of transformations
     */
    constructor(name = "node", parent, data = [], transformations = []) {
        var _a;
        // #region Properties (19)
        _TreeNode_boundingBox.set(this, new viewer_shared_math_1.Box());
        _TreeNode_boundingBoxViewport.set(this, {});
        _TreeNode_children.set(this, []);
        _TreeNode_data.set(this, []);
        _TreeNode_id.set(this, void 0);
        _TreeNode_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);
        _TreeNode_boneInverses.set(this, []);
        _TreeNode_bones.set(this, []);
        _TreeNode_convertedObject.set(this, {});
        _TreeNode_excludeViewports.set(this, []);
        _TreeNode_intersectionTest.set(this, true);
        _TreeNode_name.set(this, "");
        _TreeNode_originalId.set(this, void 0);
        _TreeNode_originalName.set(this, void 0);
        _TreeNode_parent.set(this, void 0);
        _TreeNode_restrictViewports.set(this, []);
        _TreeNode_skinNode.set(this, false);
        _TreeNode_transformations.set(this, []);
        _TreeNode_updateCallbackConvertedObject.set(this, null);
        _TreeNode_version.set(this, void 0);
        _TreeNode_visible.set(this, true);
        _TreeNode_displayName.set(this, void 0);
        __classPrivateFieldSet(this, _TreeNode_name, name, "f");
        __classPrivateFieldSet(this, _TreeNode_parent, parent, "f");
        __classPrivateFieldSet(this, _TreeNode_data, data, "f");
        __classPrivateFieldSet(this, _TreeNode_transformations, transformations, "f");
        __classPrivateFieldSet(this, _TreeNode_id, __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create(), "f");
        __classPrivateFieldSet(this, _TreeNode_originalId, __classPrivateFieldGet(this, _TreeNode_id, "f"), "f");
        __classPrivateFieldSet(this, _TreeNode_version, __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create(), "f");
        (_a = __classPrivateFieldGet(this, _TreeNode_parent, "f")) === null || _a === void 0 ? void 0 : _a.addChild(this);
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (33)
    get boneInverses() {
        return __classPrivateFieldGet(this, _TreeNode_boneInverses, "f");
    }
    set boneInverses(value) {
        __classPrivateFieldSet(this, _TreeNode_boneInverses, value, "f");
    }
    get bones() {
        return __classPrivateFieldGet(this, _TreeNode_bones, "f");
    }
    set bones(value) {
        __classPrivateFieldSet(this, _TreeNode_bones, value, "f");
    }
    get boundingBox() {
        return __classPrivateFieldGet(this, _TreeNode_boundingBox, "f");
    }
    get boundingBoxViewport() {
        return __classPrivateFieldGet(this, _TreeNode_boundingBoxViewport, "f");
    }
    get children() {
        return __classPrivateFieldGet(this, _TreeNode_children, "f");
    }
    get convertedObject() {
        return __classPrivateFieldGet(this, _TreeNode_convertedObject, "f");
    }
    set convertedObject(value) {
        __classPrivateFieldSet(this, _TreeNode_convertedObject, value, "f");
    }
    get data() {
        return __classPrivateFieldGet(this, _TreeNode_data, "f");
    }
    get displayName() {
        return __classPrivateFieldGet(this, _TreeNode_displayName, "f");
    }
    set displayName(value) {
        __classPrivateFieldSet(this, _TreeNode_displayName, value, "f");
    }
    get excludeViewports() {
        return __classPrivateFieldGet(this, _TreeNode_excludeViewports, "f");
    }
    set excludeViewports(value) {
        __classPrivateFieldSet(this, _TreeNode_excludeViewports, value, "f");
    }
    get intersectionTest() {
        return __classPrivateFieldGet(this, _TreeNode_intersectionTest, "f");
    }
    set intersectionTest(value) {
        __classPrivateFieldSet(this, _TreeNode_intersectionTest, value, "f");
    }
    get id() {
        return __classPrivateFieldGet(this, _TreeNode_id, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _TreeNode_name, "f");
    }
    set name(value) {
        __classPrivateFieldSet(this, _TreeNode_name, value, "f");
    }
    get nodeMatrix() {
        const matrix = gl_matrix_1.mat4.create();
        for (const transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            if (transform.id !== "sdtf")
                gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);
        return matrix;
    }
    get originalId() {
        return __classPrivateFieldGet(this, _TreeNode_originalId, "f");
    }
    set originalId(value) {
        __classPrivateFieldSet(this, _TreeNode_originalId, value, "f");
    }
    get originalName() {
        return __classPrivateFieldGet(this, _TreeNode_originalName, "f");
    }
    set originalName(value) {
        __classPrivateFieldSet(this, _TreeNode_originalName, value, "f");
    }
    get parent() {
        return __classPrivateFieldGet(this, _TreeNode_parent, "f");
    }
    set parent(value) {
        // check if it was removed from previous parent
        if (__classPrivateFieldGet(this, _TreeNode_parent, "f"))
            __classPrivateFieldGet(this, _TreeNode_parent, "f").removeChild(this);
        // check if it is in children of new parent
        if (value)
            value.addChild(this);
        __classPrivateFieldSet(this, _TreeNode_parent, value, "f");
    }
    get restrictViewports() {
        return __classPrivateFieldGet(this, _TreeNode_restrictViewports, "f");
    }
    set restrictViewports(value) {
        __classPrivateFieldSet(this, _TreeNode_restrictViewports, value, "f");
    }
    get skinNode() {
        return __classPrivateFieldGet(this, _TreeNode_skinNode, "f");
    }
    set skinNode(value) {
        __classPrivateFieldSet(this, _TreeNode_skinNode, value, "f");
    }
    get transformations() {
        return __classPrivateFieldGet(this, _TreeNode_transformations, "f");
    }
    set transformations(value) {
        __classPrivateFieldSet(this, _TreeNode_transformations, value, "f");
    }
    get updateCallbackConvertedObject() {
        return __classPrivateFieldGet(this, _TreeNode_updateCallbackConvertedObject, "f");
    }
    set updateCallbackConvertedObject(value) {
        __classPrivateFieldSet(this, _TreeNode_updateCallbackConvertedObject, value, "f");
    }
    get version() {
        return __classPrivateFieldGet(this, _TreeNode_version, "f");
    }
    set version(value) {
        __classPrivateFieldSet(this, _TreeNode_version, value, "f");
    }
    get visible() {
        return __classPrivateFieldGet(this, _TreeNode_visible, "f");
    }
    set visible(value) {
        __classPrivateFieldSet(this, _TreeNode_visible, value, "f");
    }
    get worldMatrix() {
        const matrix = gl_matrix_1.mat4.create();
        for (const transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        let node = this;
        while (node.parent) {
            gl_matrix_1.mat4.multiply(matrix, node.parent.nodeMatrix, matrix);
            node = node.parent;
        }
        return matrix;
    }
    // #endregion Public Getters And Setters (33)
    // #region Public Methods (20)
    addChild(child) {
        if (this.hasChild(child))
            return false;
        __classPrivateFieldGet(this, _TreeNode_children, "f").push(child);
        if (child.parent)
            child.parent.removeChild(child);
        child.parent = this;
        return true;
    }
    addData(data) {
        __classPrivateFieldGet(this, _TreeNode_data, "f").push(data);
        return true;
    }
    addTransformation(transformation) {
        __classPrivateFieldGet(this, _TreeNode_transformations, "f").push(transformation);
        return true;
    }
    clone() {
        const clone = new this.constructor();
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        clone.name = this.name;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        clone.originalId = this.originalId;
        clone.displayName = this.displayName;
        clone.excludeViewports = this.excludeViewports;
        clone.restrictViewports = this.restrictViewports;
        clone.skinNode = this.skinNode;
        clone.boneInverses = this.boneInverses;
        clone.bones = this.bones;
        clone.intersectionTest = this.intersectionTest;
        clone.visible = this.visible;
        for (const child of __classPrivateFieldGet(this, _TreeNode_children, "f"))
            clone.addChild(child.clone());
        for (const data of __classPrivateFieldGet(this, _TreeNode_data, "f"))
            clone.data.push(data.clone());
        for (const transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            clone.addTransformation({
                id: transform.id,
                matrix: gl_matrix_1.mat4.clone(transform.matrix),
            });
        return clone;
    }
    cloneInstance() {
        const clone = new this.constructor();
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        clone.name = this.name;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        clone.originalId = this.originalId;
        clone.displayName = this.displayName;
        clone.excludeViewports = this.excludeViewports;
        clone.restrictViewports = this.restrictViewports;
        clone.skinNode = this.skinNode;
        clone.boneInverses = this.boneInverses;
        clone.bones = this.bones;
        clone.intersectionTest = this.intersectionTest;
        clone.visible = this.visible;
        for (const child of __classPrivateFieldGet(this, _TreeNode_children, "f"))
            clone.addChild(child.cloneInstance());
        for (const data of __classPrivateFieldGet(this, _TreeNode_data, "f"))
            clone.data.push(data);
        for (const transform of __classPrivateFieldGet(this, _TreeNode_transformations, "f"))
            clone.addTransformation({
                id: transform.id,
                matrix: gl_matrix_1.mat4.clone(transform.matrix),
            });
        return clone;
    }
    getChild(id) {
        for (let i = 0; i < __classPrivateFieldGet(this, _TreeNode_children, "f").length; i++)
            if (__classPrivateFieldGet(this, _TreeNode_children, "f")[i].id === id)
                return __classPrivateFieldGet(this, _TreeNode_children, "f")[i];
        return;
    }
    getData(id) {
        for (let i = 0; i < __classPrivateFieldGet(this, _TreeNode_data, "f").length; i++)
            if (__classPrivateFieldGet(this, _TreeNode_data, "f")[i].id === id)
                return __classPrivateFieldGet(this, _TreeNode_data, "f")[i];
        return;
    }
    getNodesByName(name) {
        const nodes = [];
        if (name === this.name)
            nodes.push(this);
        this.traverse((n) => {
            if (name === n.name)
                nodes.push(n);
        });
        return nodes;
    }
    getNodesByNameWithRegex(regex) {
        const nodes = [];
        if (regex.test(this.name))
            nodes.push(this);
        this.traverse((n) => {
            if (regex.test(n.name))
                nodes.push(n);
        });
        return nodes;
    }
    getPath() {
        let path = this.name;
        let node = this.parent;
        while (node) {
            path = node.name + "." + path;
            node = node.parent;
        }
        return path;
    }
    getOriginalNamePath() {
        let path = this.originalName || "";
        let node = this.parent;
        while (node) {
            path = (node.originalName || "") + "." + path;
            node = node.parent;
        }
        return path;
    }
    getTransformation(id) {
        for (let i = 0; i < __classPrivateFieldGet(this, _TreeNode_transformations, "f").length; i++)
            if (__classPrivateFieldGet(this, _TreeNode_transformations, "f")[i].id === id)
                return __classPrivateFieldGet(this, _TreeNode_transformations, "f")[i];
        return;
    }
    hasChild(child) {
        return __classPrivateFieldGet(this, _TreeNode_children, "f").includes(child);
    }
    hasData(data) {
        return __classPrivateFieldGet(this, _TreeNode_data, "f").includes(data);
    }
    hasTransformation(transformation) {
        return __classPrivateFieldGet(this, _TreeNode_transformations, "f").includes(transformation);
    }
    removeChild(child) {
        const index = __classPrivateFieldGet(this, _TreeNode_children, "f").indexOf(child);
        if (index === -1)
            return false;
        __classPrivateFieldGet(this, _TreeNode_children, "f").splice(index, 1);
        child.parent = undefined;
        return true;
    }
    removeData(data) {
        const index = __classPrivateFieldGet(this, _TreeNode_data, "f").indexOf(data);
        if (index === -1)
            return false;
        __classPrivateFieldGet(this, _TreeNode_data, "f").splice(index, 1);
        return true;
    }
    removeTransformation(transformation) {
        const index = __classPrivateFieldGet(this, _TreeNode_transformations, "f").indexOf(transformation);
        if (index === -1)
            return false;
        __classPrivateFieldGet(this, _TreeNode_transformations, "f").splice(index, 1);
        return true;
    }
    traverse(callback) {
        callback(this);
        for (let i = 0; i < this.children.length; i++)
            this.children[i].traverse(callback);
    }
    traverseData(callback) {
        for (let j = 0; j < this.data.length; j++)
            callback(this.data[j]);
        for (let i = 0; i < this.children.length; i++)
            this.children[i].traverseData(callback);
    }
    updateVersion(parents = true, children = true) {
        if (parents === true) {
            let node = this;
            while (node.parent) {
                node = node.parent;
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                node.version = __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create();
            }
        }
        if (children === true) {
            for (let i = 0; i < __classPrivateFieldGet(this, _TreeNode_children, "f").length; i++)
                __classPrivateFieldGet(this, _TreeNode_children, "f")[i].updateVersion(parents, children);
        }
        __classPrivateFieldSet(this, _TreeNode_version, __classPrivateFieldGet(this, _TreeNode_uuidGenerator, "f").create(), "f");
    }
}
exports.TreeNode = TreeNode;
_TreeNode_boundingBox = new WeakMap(), _TreeNode_boundingBoxViewport = new WeakMap(), _TreeNode_children = new WeakMap(), _TreeNode_data = new WeakMap(), _TreeNode_id = new WeakMap(), _TreeNode_uuidGenerator = new WeakMap(), _TreeNode_boneInverses = new WeakMap(), _TreeNode_bones = new WeakMap(), _TreeNode_convertedObject = new WeakMap(), _TreeNode_excludeViewports = new WeakMap(), _TreeNode_intersectionTest = new WeakMap(), _TreeNode_name = new WeakMap(), _TreeNode_originalId = new WeakMap(), _TreeNode_originalName = new WeakMap(), _TreeNode_parent = new WeakMap(), _TreeNode_restrictViewports = new WeakMap(), _TreeNode_skinNode = new WeakMap(), _TreeNode_transformations = new WeakMap(), _TreeNode_updateCallbackConvertedObject = new WeakMap(), _TreeNode_version = new WeakMap(), _TreeNode_visible = new WeakMap(), _TreeNode_displayName = new WeakMap();
//# sourceMappingURL=TreeNode.js.map