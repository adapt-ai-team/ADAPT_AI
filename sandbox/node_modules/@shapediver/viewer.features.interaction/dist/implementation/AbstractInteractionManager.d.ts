import { IMaterialAbstractData, ITreeNode, IViewportApi } from "@shapediver/viewer";
import { IIntersection, IRay } from "@shapediver/viewer.shared.types";
import { INTERACTION_STATE } from "../interfaces/IInteractionEngine";
import { IInteractionFilterOptions, IInteractionManager } from "../interfaces/IInteractionManager";
import { IInteractionEffectUtils } from "../interfaces/utils/IInteractionEffectUtils";
export declare abstract class AbstractInteractionManager implements IInteractionManager {
    #private;
    abstract filter: IInteractionFilterOptions;
    constructor(id?: string, effectMaterial?: IMaterialAbstractData);
    get effectMaterial(): IMaterialAbstractData | undefined;
    set effectMaterial(value: IMaterialAbstractData | undefined);
    get gatheredGroupedNodes(): {
        [key: string]: ITreeNode[];
    };
    get id(): string;
    get interactionEffectUtils(): IInteractionEffectUtils;
    set interactionEffectUtils(value: IInteractionEffectUtils);
    get viewport(): IViewportApi | undefined;
    set viewport(value: IViewportApi | undefined);
    abstract add(viewport: IViewportApi): void;
    abstract onDown(event: PointerEvent, ray: IRay, intersection: IIntersection[]): void;
    abstract onEnd(event: PointerEvent, ray: IRay, intersection: IIntersection[], endState: INTERACTION_STATE): void;
    abstract onMove(event: PointerEvent, ray: IRay, intersection: IIntersection[]): void;
    abstract remove(): void;
    private gatherGroupNodes;
}
//# sourceMappingURL=AbstractInteractionManager.d.ts.map