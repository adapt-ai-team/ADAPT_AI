"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SelectManager_eventEngine, _SelectManager_logger, _SelectManager_tree, _SelectManager_deselectOnEmpty, _SelectManager_effectMaterialToken, _SelectManager_filter, _SelectManager_groupEffectMaterialToken, _SelectManager_groupedNodes, _SelectManager_intersection, _SelectManager_node, _SelectManager_removalKey, _SelectManager_useModifierKeys;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectManager = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const IInteractionEngine_1 = require("../../interfaces/IInteractionEngine");
const AbstractInteractionManager_1 = require("../AbstractInteractionManager");
const InteractionData_1 = require("../InteractionData");
/* eslint-disable @typescript-eslint/no-unused-vars */
class SelectManager extends AbstractInteractionManager_1.AbstractInteractionManager {
    // #endregion Properties (11)
    // #region Constructors (1)
    constructor(id, effectMaterial, deselectOnEmpty, useModifierKeys) {
        super(id, effectMaterial);
        // #region Properties (11)
        _SelectManager_eventEngine.set(this, viewer_shared_services_1.EventEngine.instance);
        _SelectManager_logger.set(this, viewer_shared_services_1.Logger.instance);
        _SelectManager_tree.set(this, viewer_shared_node_tree_1.Tree.instance);
        _SelectManager_deselectOnEmpty.set(this, false);
        _SelectManager_effectMaterialToken.set(this, void 0);
        _SelectManager_filter.set(this, (interactionState) => {
            if (interactionState === IInteractionEngine_1.INTERACTION_STATE.DOWN) {
                return (node) => {
                    return !!this.getInteractionData(node);
                };
            }
            return (node) => false;
        });
        _SelectManager_groupEffectMaterialToken.set(this, void 0);
        _SelectManager_groupedNodes.set(this, void 0);
        _SelectManager_intersection.set(this, null);
        _SelectManager_node.set(this, null);
        _SelectManager_removalKey.set(this, "Control");
        _SelectManager_useModifierKeys.set(this, false);
        if (deselectOnEmpty !== undefined)
            __classPrivateFieldSet(this, _SelectManager_deselectOnEmpty, deselectOnEmpty, "f");
        if (useModifierKeys !== undefined)
            __classPrivateFieldSet(this, _SelectManager_useModifierKeys, useModifierKeys, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (7)
    get deselectOnEmpty() {
        return __classPrivateFieldGet(this, _SelectManager_deselectOnEmpty, "f");
    }
    set deselectOnEmpty(value) {
        __classPrivateFieldSet(this, _SelectManager_deselectOnEmpty, value, "f");
    }
    get filter() {
        return __classPrivateFieldGet(this, _SelectManager_filter, "f");
    }
    get removalKey() {
        return __classPrivateFieldGet(this, _SelectManager_removalKey, "f");
    }
    set removalKey(value) {
        __classPrivateFieldSet(this, _SelectManager_removalKey, value, "f");
    }
    get useModifierKeys() {
        return __classPrivateFieldGet(this, _SelectManager_useModifierKeys, "f");
    }
    set useModifierKeys(value) {
        __classPrivateFieldSet(this, _SelectManager_useModifierKeys, value, "f");
    }
    // #endregion Public Getters And Setters (7)
    // #region Public Methods (7)
    add(viewport) {
        this.viewport = viewport;
    }
    /**
     * Deselect the current node.
     */
    deselect() {
        if (__classPrivateFieldGet(this, _SelectManager_node, "f"))
            this.deactivateNode();
    }
    onDown(event, ray, intersection) {
        if (!this.viewport) {
            __classPrivateFieldGet(this, _SelectManager_logger, "f").warn("The interaction manager does not belong to an interaction engine. Please add it to one first.");
            return;
        }
        const intersections = intersection.filter((i) => this.filter(IInteractionEngine_1.INTERACTION_STATE.DOWN)(i.node));
        if (__classPrivateFieldGet(this, _SelectManager_useModifierKeys, "f") === false) {
            if (__classPrivateFieldGet(this, _SelectManager_node, "f")) {
                if (intersections.length > 0 &&
                    intersection[0].node !== __classPrivateFieldGet(this, _SelectManager_node, "f")) {
                    // case other node was clicked, deselect then select
                    this.deactivateNode(event);
                    this.activateNode(intersections[0], event, ray);
                }
                else if (intersections.length > 0 &&
                    intersection[0].node === __classPrivateFieldGet(this, _SelectManager_node, "f")) {
                    // case same node was clicked, only deselect
                    this.deactivateNode(event);
                }
                else if (intersections.length === 0 &&
                    __classPrivateFieldGet(this, _SelectManager_deselectOnEmpty, "f")) {
                    // case no node was clicked, only deselect when option is on
                    this.deactivateNode(event);
                }
            }
            else if (intersections.length > 0) {
                // easy case, no node select, just select this one
                this.activateNode(intersections[0], event, ray);
            }
        }
        else {
            const controlPressed = event.ctrlKey;
            if (__classPrivateFieldGet(this, _SelectManager_node, "f")) {
                if (intersections.length > 0 &&
                    intersection[0].node !== __classPrivateFieldGet(this, _SelectManager_node, "f")) {
                    // case other node was clicked, deselect then select
                    this.deactivateNode(event);
                    this.activateNode(intersections[0], event, ray);
                }
                else if (controlPressed &&
                    intersections.length > 0 &&
                    intersection[0].node === __classPrivateFieldGet(this, _SelectManager_node, "f")) {
                    // case same node was clicked, only deselect
                    this.deactivateNode(event);
                }
                else if (intersections.length === 0 &&
                    __classPrivateFieldGet(this, _SelectManager_deselectOnEmpty, "f")) {
                    // case no node was clicked, only deselect when option is on
                    this.deactivateNode(event);
                }
            }
            else if (intersections.length > 0) {
                // easy case, no node select, just select this one
                this.activateNode(intersections[0], event, ray);
            }
        }
    }
    onEnd(event, ray, intersection, endState) {
        if (!this.viewport) {
            __classPrivateFieldGet(this, _SelectManager_logger, "f").warn("The interaction manager does not belong to an interaction engine. Please add it to one first.");
            return;
        }
    }
    onMove(event, ray, intersection) {
        if (!this.viewport) {
            __classPrivateFieldGet(this, _SelectManager_logger, "f").warn("The interaction manager does not belong to an interaction engine. Please add it to one first.");
            return;
        }
    }
    remove() {
        if (__classPrivateFieldGet(this, _SelectManager_node, "f"))
            this.deactivateNode();
        this.viewport = undefined;
    }
    /**
     * Select a node.
     * The point and distance of the intersection can be freely chosen and are provided in the event callbacks.
     *
     * @param intersection
     */
    select(intersection) {
        if (__classPrivateFieldGet(this, _SelectManager_node, "f"))
            this.deactivateNode(undefined, true);
        this.activateNode(intersection);
    }
    // #endregion Public Methods (7)
    // #region Private Methods (2)
    /**
     * Utility function to make the node the current active node.
     * Set the according values, apply the effect and emit the event.
     *
     * @param intersection
     * @param event
     * @param ray
     */
    activateNode(intersection, event, ray) {
        if (!this.viewport) {
            __classPrivateFieldGet(this, _SelectManager_logger, "f").warn("The interaction manager does not belong to an interaction engine. Please add it to one first.");
            return;
        }
        __classPrivateFieldSet(this, _SelectManager_intersection, intersection, "f");
        __classPrivateFieldSet(this, _SelectManager_node, __classPrivateFieldGet(this, _SelectManager_intersection, "f").node, "f");
        __classPrivateFieldSet(this, _SelectManager_groupedNodes, undefined, "f");
        __classPrivateFieldSet(this, _SelectManager_groupEffectMaterialToken, undefined, "f");
        // find the interaction data
        const data = this.getInteractionData(__classPrivateFieldGet(this, _SelectManager_node, "f"));
        if (data)
            data.interactionStates.select = true;
        // find and store all nodes that are within the group
        if (data && data.groupId) {
            __classPrivateFieldSet(this, _SelectManager_groupedNodes, this.gatheredGroupedNodes[data.groupId] || [], "f");
            __classPrivateFieldSet(this, _SelectManager_groupEffectMaterialToken, [], "f");
        }
        // apply the effect material if there is something to apply
        if (this.effectMaterial) {
            __classPrivateFieldSet(this, _SelectManager_effectMaterialToken, this.interactionEffectUtils.applyEffectMaterial(__classPrivateFieldGet(this, _SelectManager_node, "f"), this.effectMaterial), "f");
            if (__classPrivateFieldGet(this, _SelectManager_groupedNodes, "f"))
                __classPrivateFieldGet(this, _SelectManager_groupedNodes, "f").forEach((n) => __classPrivateFieldGet(this, _SelectManager_groupEffectMaterialToken, "f").push(this.interactionEffectUtils.applyEffectMaterial(n, this.effectMaterial)));
        }
        else {
            __classPrivateFieldSet(this, _SelectManager_effectMaterialToken, undefined, "f");
        }
        this.viewport.updateNode(__classPrivateFieldGet(this, _SelectManager_node, "f"));
        if (__classPrivateFieldGet(this, _SelectManager_groupedNodes, "f"))
            __classPrivateFieldGet(this, _SelectManager_groupedNodes, "f").forEach((n) => this.viewport.updateNode(n));
        this.viewport.render();
        __classPrivateFieldGet(this, _SelectManager_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.INTERACTION.SELECT_ON, {
            viewportId: this.viewport.id,
            node: __classPrivateFieldGet(this, _SelectManager_node, "f"),
            intersectionPoint: __classPrivateFieldGet(this, _SelectManager_intersection, "f").point,
            ray,
            event,
            manager: this,
            groupedNodes: __classPrivateFieldGet(this, _SelectManager_groupedNodes, "f"),
        });
    }
    /**
     * Utility function to make the node inactive.
     * Set the according values, remove the effect and emit the event.
     *
     * @param event
     */
    deactivateNode(event, reselection = false) {
        if (!this.viewport) {
            __classPrivateFieldGet(this, _SelectManager_logger, "f").warn("The interaction manager does not belong to an interaction engine. Please add it to one first.");
            return;
        }
        // find the interaction data
        const data = this.getInteractionData(__classPrivateFieldGet(this, _SelectManager_node, "f"));
        if (data)
            data.interactionStates.select = false;
        if (__classPrivateFieldGet(this, _SelectManager_effectMaterialToken, "f")) {
            this.interactionEffectUtils.removeEffectMaterial(__classPrivateFieldGet(this, _SelectManager_node, "f"), __classPrivateFieldGet(this, _SelectManager_effectMaterialToken, "f"));
            __classPrivateFieldSet(this, _SelectManager_effectMaterialToken, undefined, "f");
            if (__classPrivateFieldGet(this, _SelectManager_groupedNodes, "f"))
                __classPrivateFieldGet(this, _SelectManager_groupedNodes, "f").forEach((n, i) => this.interactionEffectUtils.removeEffectMaterial(n, __classPrivateFieldGet(this, _SelectManager_groupEffectMaterialToken, "f")[i]));
            __classPrivateFieldSet(this, _SelectManager_groupEffectMaterialToken, undefined, "f");
        }
        this.viewport.updateNode(__classPrivateFieldGet(this, _SelectManager_node, "f"));
        if (__classPrivateFieldGet(this, _SelectManager_groupedNodes, "f"))
            __classPrivateFieldGet(this, _SelectManager_groupedNodes, "f").forEach((n) => this.viewport.updateNode(n));
        this.viewport.render();
        __classPrivateFieldGet(this, _SelectManager_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.INTERACTION.SELECT_OFF, {
            viewportId: this.viewport.id,
            node: __classPrivateFieldGet(this, _SelectManager_node, "f"),
            event,
            manager: this,
            groupedNodes: __classPrivateFieldGet(this, _SelectManager_groupedNodes, "f"),
            reselection,
        });
        __classPrivateFieldSet(this, _SelectManager_intersection, null, "f");
        __classPrivateFieldSet(this, _SelectManager_node, null, "f");
        __classPrivateFieldSet(this, _SelectManager_groupedNodes, undefined, "f");
        __classPrivateFieldSet(this, _SelectManager_groupEffectMaterialToken, undefined, "f");
    }
    getInteractionData(node) {
        for (let i = 0; i < node.data.length; i++) {
            if (node.data[i] instanceof InteractionData_1.InteractionData) {
                if ((node.data[i].restrictedManagers
                    .length === 0 ||
                    (node.data[i]).restrictedManagers.includes(this.id)) &&
                    node.data[i].interactionTypes.select)
                    return node.data[i];
            }
        }
    }
}
exports.SelectManager = SelectManager;
_SelectManager_eventEngine = new WeakMap(), _SelectManager_logger = new WeakMap(), _SelectManager_tree = new WeakMap(), _SelectManager_deselectOnEmpty = new WeakMap(), _SelectManager_effectMaterialToken = new WeakMap(), _SelectManager_filter = new WeakMap(), _SelectManager_groupEffectMaterialToken = new WeakMap(), _SelectManager_groupedNodes = new WeakMap(), _SelectManager_intersection = new WeakMap(), _SelectManager_node = new WeakMap(), _SelectManager_removalKey = new WeakMap(), _SelectManager_useModifierKeys = new WeakMap();
//# sourceMappingURL=SelectManager.js.map