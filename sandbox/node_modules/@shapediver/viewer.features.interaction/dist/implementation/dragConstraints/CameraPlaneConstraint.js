"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CameraPlaneConstraint_rotation;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraPlaneConstraint = void 0;
const gl_matrix_1 = require("gl-matrix");
/**
 * The camera plane constraint is used for dragging and allows to specify that the dragging happens on a plane parallel to the camera plane that passes through the origin of the node being dragged.
 * The transformation and optional rotation of this constraint get applied to the node if it is the constraint with the closest distance to the ray that was used for the drag event.
 * As this is a difficult topic, please visit our [help desk section on interactions](https://help.shapediver.com/doc/interactions-part-1) where we go through the process of setting everything up with examples.
 *
 * @deprecated This class is deprecated and will be removed in the future. Please use the `CameraPlaneRestriction` instead.
 */
class CameraPlaneConstraint {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(_rotation) {
        // #region Properties (1)
        _CameraPlaneConstraint_rotation.set(this, void 0);
        __classPrivateFieldSet(this, _CameraPlaneConstraint_rotation, _rotation || {
            axis: gl_matrix_1.vec3.fromValues(0, 0, 1),
            angle: 0,
        }, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (1)
    get rotation() {
        return __classPrivateFieldGet(this, _CameraPlaneConstraint_rotation, "f");
    }
}
exports.CameraPlaneConstraint = CameraPlaneConstraint;
_CameraPlaneConstraint_rotation = new WeakMap();
//# sourceMappingURL=CameraPlaneConstraint.js.map