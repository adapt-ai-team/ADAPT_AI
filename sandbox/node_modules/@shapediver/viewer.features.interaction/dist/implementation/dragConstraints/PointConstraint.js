"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PointConstraint_point, _PointConstraint_radius, _PointConstraint_rotation;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PointConstraint = void 0;
const gl_matrix_1 = require("gl-matrix");
/**
 * The point constraint is used for dragging and allows to specify the position where an object can be dragged to.
 * The radius defines in which distance this constraint is being considered to be chosen from the constraints defined.
 * The transformation and optional rotation of this constraint get applied to the node if it is the constraint with the closest distance to the ray that was used for the drag event.
 * As this is a difficult topic, please visit our [help desk section on interactions](https://help.shapediver.com/doc/interactions-part-1) where we go through the process of setting everything up with examples.
 *
 * @deprecated This class is deprecated and will be removed in the future. Please use the `PointRestriction` instead.
 */
class PointConstraint {
    // #endregion Properties (3)
    // #region Constructors (1)
    /**
     * @param _point the point
     * @param _radius the radius in which the point is considered
     * @param _rotation the rotation in [axis-angle representation](https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation) that is applied to the node if the drag contraint becomes active
     */
    constructor(_point, _radius = 0, _rotation) {
        // #region Properties (3)
        _PointConstraint_point.set(this, void 0);
        _PointConstraint_radius.set(this, 0);
        _PointConstraint_rotation.set(this, void 0);
        __classPrivateFieldSet(this, _PointConstraint_point, _point, "f");
        __classPrivateFieldSet(this, _PointConstraint_radius, _radius, "f");
        __classPrivateFieldSet(this, _PointConstraint_rotation, _rotation || {
            axis: gl_matrix_1.vec3.fromValues(0, 0, 1),
            angle: 0,
        }, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (3)
    get point() {
        return __classPrivateFieldGet(this, _PointConstraint_point, "f");
    }
    get radius() {
        return __classPrivateFieldGet(this, _PointConstraint_radius, "f");
    }
    get rotation() {
        return __classPrivateFieldGet(this, _PointConstraint_rotation, "f");
    }
}
exports.PointConstraint = PointConstraint;
_PointConstraint_point = new WeakMap(), _PointConstraint_radius = new WeakMap(), _PointConstraint_rotation = new WeakMap();
//# sourceMappingURL=PointConstraint.js.map