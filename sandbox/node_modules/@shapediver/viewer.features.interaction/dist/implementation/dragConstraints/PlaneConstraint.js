"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlaneConstraint_coplanarPoint, _PlaneConstraint_normal, _PlaneConstraint_rotation;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaneConstraint = void 0;
const gl_matrix_1 = require("gl-matrix");
/**
 * The plane constraint is used for dragging and allows to specify a plane on which an object can be dragged.
 * The transformation and optional rotation of this constraint get applied to the node if it is the constraint with the closest distance to the ray that was used for the drag event.
 * As this is a difficult topic, please visit our [help desk section on interactions](https://help.shapediver.com/doc/interactions-part-1) where we go through the process of setting everything up with examples.
 *
 * @deprecated This class is deprecated and will be removed in the future. Please use the `PlaneRestriction` instead.
 */
class PlaneConstraint {
    // #endregion Properties (3)
    // #region Constructors (1)
    /**
     * @param _normal the normal vector of the plane
     * @param _coplanarPoint a coplanar point on the plane
     * @param _rotation the rotation in [axis-angle representation](https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation) that is applied to the node if the drag contraint becomes active
     */
    constructor(_normal, _coplanarPoint, _rotation) {
        // #region Properties (3)
        _PlaneConstraint_coplanarPoint.set(this, void 0);
        _PlaneConstraint_normal.set(this, void 0);
        _PlaneConstraint_rotation.set(this, void 0);
        __classPrivateFieldSet(this, _PlaneConstraint_normal, _normal, "f");
        __classPrivateFieldSet(this, _PlaneConstraint_coplanarPoint, _coplanarPoint, "f");
        __classPrivateFieldSet(this, _PlaneConstraint_rotation, _rotation || {
            axis: gl_matrix_1.vec3.fromValues(0, 0, 1),
            angle: 0,
        }, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (3)
    get coplanarPoint() {
        return __classPrivateFieldGet(this, _PlaneConstraint_coplanarPoint, "f");
    }
    get normal() {
        return __classPrivateFieldGet(this, _PlaneConstraint_normal, "f");
    }
    get rotation() {
        return __classPrivateFieldGet(this, _PlaneConstraint_rotation, "f");
    }
}
exports.PlaneConstraint = PlaneConstraint;
_PlaneConstraint_coplanarPoint = new WeakMap(), _PlaneConstraint_normal = new WeakMap(), _PlaneConstraint_rotation = new WeakMap();
//# sourceMappingURL=PlaneConstraint.js.map