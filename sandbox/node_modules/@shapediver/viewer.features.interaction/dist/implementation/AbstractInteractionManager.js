"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractInteractionManager_eventEngine, _AbstractInteractionManager_id, _AbstractInteractionManager_tree, _AbstractInteractionManager_effectMaterial, _AbstractInteractionManager_gatheredGroupedNodes, _AbstractInteractionManager_interactionEffectUtils, _AbstractInteractionManager_viewport;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractInteractionManager = void 0;
const viewer_1 = require("@shapediver/viewer");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const InteractionData_1 = require("./InteractionData");
const InteractionEffectUtils_1 = require("./utils/InteractionEffectUtils");
class AbstractInteractionManager {
    // #endregion Properties (8)
    // #region Constructors (1)
    constructor(id, effectMaterial) {
        // #region Properties (8)
        _AbstractInteractionManager_eventEngine.set(this, viewer_shared_services_1.EventEngine.instance);
        _AbstractInteractionManager_id.set(this, void 0);
        _AbstractInteractionManager_tree.set(this, viewer_1.Tree.instance);
        _AbstractInteractionManager_effectMaterial.set(this, void 0);
        _AbstractInteractionManager_gatheredGroupedNodes.set(this, {});
        _AbstractInteractionManager_interactionEffectUtils.set(this, InteractionEffectUtils_1.InteractionEffectUtils.instance);
        _AbstractInteractionManager_viewport.set(this, void 0);
        __classPrivateFieldSet(this, _AbstractInteractionManager_id, id || viewer_shared_services_1.UuidGenerator.instance.create(), "f");
        __classPrivateFieldSet(this, _AbstractInteractionManager_effectMaterial, effectMaterial, "f");
        this.gatherGroupNodes();
        __classPrivateFieldGet(this, _AbstractInteractionManager_eventEngine, "f").addListener(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_UPDATED, () => {
            this.gatherGroupNodes();
        });
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (8)
    get effectMaterial() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_effectMaterial, "f");
    }
    set effectMaterial(value) {
        __classPrivateFieldSet(this, _AbstractInteractionManager_effectMaterial, value, "f");
    }
    get gatheredGroupedNodes() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_gatheredGroupedNodes, "f");
    }
    get id() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_id, "f");
    }
    get interactionEffectUtils() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_interactionEffectUtils, "f");
    }
    set interactionEffectUtils(value) {
        __classPrivateFieldSet(this, _AbstractInteractionManager_interactionEffectUtils, value, "f");
    }
    get viewport() {
        return __classPrivateFieldGet(this, _AbstractInteractionManager_viewport, "f");
    }
    set viewport(value) {
        __classPrivateFieldSet(this, _AbstractInteractionManager_viewport, value, "f");
    }
    // #endregion Public Abstract Methods (5)
    // #region Private Methods (1)
    gatherGroupNodes() {
        __classPrivateFieldSet(this, _AbstractInteractionManager_gatheredGroupedNodes, {}, "f");
        __classPrivateFieldGet(this, _AbstractInteractionManager_tree, "f").root.traverse((node) => {
            if (node.visible === false)
                return;
            if (__classPrivateFieldGet(this, _AbstractInteractionManager_viewport, "f") &&
                node.excludeViewports.includes(__classPrivateFieldGet(this, _AbstractInteractionManager_viewport, "f").id))
                return;
            if (__classPrivateFieldGet(this, _AbstractInteractionManager_viewport, "f") &&
                node.restrictViewports.length > 0 &&
                !node.restrictViewports.includes(__classPrivateFieldGet(this, _AbstractInteractionManager_viewport, "f").id))
                return;
            for (let i = 0; i < node.data.length; i++) {
                if (node.data[i] instanceof InteractionData_1.InteractionData &&
                    node.data[i].groupId) {
                    if (!__classPrivateFieldGet(this, _AbstractInteractionManager_gatheredGroupedNodes, "f")[node.data[i].groupId])
                        __classPrivateFieldGet(this, _AbstractInteractionManager_gatheredGroupedNodes, "f")[node.data[i].groupId] = [];
                    __classPrivateFieldGet(this, _AbstractInteractionManager_gatheredGroupedNodes, "f")[node.data[i].groupId].push(node);
                }
            }
        });
    }
}
exports.AbstractInteractionManager = AbstractInteractionManager;
_AbstractInteractionManager_eventEngine = new WeakMap(), _AbstractInteractionManager_id = new WeakMap(), _AbstractInteractionManager_tree = new WeakMap(), _AbstractInteractionManager_effectMaterial = new WeakMap(), _AbstractInteractionManager_gatheredGroupedNodes = new WeakMap(), _AbstractInteractionManager_interactionEffectUtils = new WeakMap(), _AbstractInteractionManager_viewport = new WeakMap();
//# sourceMappingURL=AbstractInteractionManager.js.map