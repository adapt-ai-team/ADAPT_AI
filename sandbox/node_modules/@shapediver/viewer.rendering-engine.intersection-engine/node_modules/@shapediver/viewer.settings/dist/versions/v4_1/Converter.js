"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToPrevious = exports.convertFromPrevious = void 0;
const Defaults_1 = require("../v4/Defaults");
const Defaults_2 = require("./Defaults");
const convertFromPrevious = (s, v) => {
    const settings = Defaults_2.Defaults();
    const oldSettings = s;
    /**
     * SETTINGS OBJECTS THAT DID NOT CHANGE
     */
    settings.ar = oldSettings.ar;
    settings.build_date = oldSettings.build_date;
    settings.build_version = oldSettings.build_version;
    settings.camera = oldSettings.camera;
    settings.general = oldSettings.general;
    settings.light = oldSettings.light;
    settings.session = oldSettings.session;
    settings.environment = oldSettings.environment;
    settings.environmentGeometry = oldSettings.environmentGeometry;
    settings.rendering = oldSettings.rendering;
    /**
     * SETTINGS OBJECTS THAT DID CHANGE
     */
    settings.postprocessing.antiAliasingTechnique = oldSettings.postprocessing.antiAliasingTechnique;
    settings.postprocessing.antiAliasingTechniqueMobile = oldSettings.postprocessing.antiAliasingTechniqueMobile;
    settings.postprocessing.enablePostProcessingOnMobile = oldSettings.postprocessing.enablePostProcessingOnMobile;
    settings.postprocessing.ssaaSampleLevel = oldSettings.postprocessing.ssaaSampleLevel;
    settings.postprocessing.effects = oldSettings.postprocessing.effects;
    const ssaoEffect = settings.postprocessing.effects.find(e => e.type === "ssao");
    // if no ssaoEffect, add it
    if (!ssaoEffect)
        settings.postprocessing.effects.push(Defaults_2.Defaults().postprocessing.effects.find(e => e.type === "ssao"));
    return settings;
};
exports.convertFromPrevious = convertFromPrevious;
const convertToPrevious = (s, v) => {
    const settings = Defaults_1.Defaults();
    const newSettings = s;
    /**
     * SETTINGS OBJECTS THAT DID NOT CHANGE
     */
    settings.ar = newSettings.ar;
    settings.build_date = newSettings.build_date;
    settings.build_version = newSettings.build_version;
    settings.camera = newSettings.camera;
    settings.general = newSettings.general;
    settings.light = newSettings.light;
    settings.rendering = newSettings.rendering;
    settings.session = newSettings.session;
    settings.environment = newSettings.environment;
    settings.environmentGeometry = newSettings.environmentGeometry;
    settings.postprocessing = newSettings.postprocessing;
    /**
     * SETTINGS OBJECTS THAT DID CHANGE
     */
    return settings;
};
exports.convertToPrevious = convertToPrevious;
//# sourceMappingURL=Converter.js.map