import { ITreeNodeData } from "@shapediver/viewer.shared.node-tree";
import { Color } from "../../../types";
import { IMapData, IMapDataPropertiesDefinition } from "./IMapData";
export declare type IMaterialAbstractDataProperties = Partial<IMaterialAbstractDataPropertiesGeneric<IMapData>>;
export declare type IMaterialAbstractDataPropertiesDefinition = Partial<IMaterialAbstractDataPropertiesGeneric<IMapDataPropertiesDefinition>>;
export interface IMaterialAbstractData extends ITreeNodeData, IMaterialAbstractDataPropertiesGeneric<IMapData> {
    materialOutput: boolean;
    clone(): IMaterialAbstractData;
    copy(source: IMaterialAbstractData): void;
    reset(): void;
}
export interface IMaterialAbstractDataPropertiesGeneric<T> {
    alphaCutoff: number;
    alphaMap?: T;
    alphaMode: MATERIAL_ALPHA;
    aoMap?: T;
    aoMapIntensity: number;
    bumpMap?: T;
    bumpScale: number;
    color: Color;
    depthTest?: boolean;
    depthWrite?: boolean;
    emissiveMap?: T;
    emissiveness: Color;
    map?: T;
    name?: string;
    normalMap?: T;
    normalScale: number;
    opacity: number;
    shading: MATERIAL_SHADING;
    side: MATERIAL_SIDE;
    transparent?: boolean;
    type?: MATERIAL_TYPE;
}
export declare enum MATERIAL_ALPHA {
    OPAQUE = "opaque",
    MASK = "mask",
    BLEND = "blend"
}
export declare enum MATERIAL_SHADING {
    FLAT = "flat",
    SMOOTH = "smooth"
}
export declare enum MATERIAL_SIDE {
    DOUBLE = "double",
    FRONT = "front",
    BACK = "back"
}
export declare enum MATERIAL_TYPE {
    STANDARD = "standard",
    SPECULAR_GLOSSINESS = "specular_glossiness",
    UNLIT = "unlit",
    GEM = "gem",
    LAMBERT = "lambert",
    PHONG = "phong"
}
//# sourceMappingURL=IMaterialAbstractData.d.ts.map