"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isViewerGeometryBackendResponseError = exports.isViewerGeometryBackendRequestError = exports.isViewerGeometryBackendGenericError = exports.isViewerGeometryBackendError = exports.isViewerDrawingToolsError = exports.isViewerInteractionError = exports.isViewerValidationError = exports.isARError = exports.isViewerCameraError = exports.isViewerLightError = exports.isViewerViewportError = exports.isViewerCustomizationError = exports.isViewerSessionError = exports.isViewerSettingsError = exports.isViewerWebGLError = exports.isViewerEnvironmentMapError = exports.isViewerDataProcessingError = exports.isViewerUnknownError = exports.isViewerError = void 0;
const ShapeDiverError_1 = require("./ShapeDiverError");
/** Type guard for all error types of the viewer package. */
function isViewerError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        Object.values(ShapeDiverError_1.ShapeDiverViewerErrorType).includes(e.errorType));
}
exports.isViewerError = isViewerError;
/** Type guard for an unknown viewer error. */
function isViewerUnknownError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.UNKNOWN);
}
exports.isViewerUnknownError = isViewerUnknownError;
/** Type guard for a data processing viewer error. */
function isViewerDataProcessingError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.DATA_PROCESSING_ERROR);
}
exports.isViewerDataProcessingError = isViewerDataProcessingError;
/** Type guard for a environment map viewer error. */
function isViewerEnvironmentMapError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.ENVIRONMENT_MAP_ERROR);
}
exports.isViewerEnvironmentMapError = isViewerEnvironmentMapError;
/** Type guard for a webGL viewer error. */
function isViewerWebGLError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.WEBGL_ERROR);
}
exports.isViewerWebGLError = isViewerWebGLError;
/** Type guard for a settings viewer error. */
function isViewerSettingsError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.SETTINGS_ERROR);
}
exports.isViewerSettingsError = isViewerSettingsError;
/** Type guard for a session viewer error. */
function isViewerSessionError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.SESSION_ERROR);
}
exports.isViewerSessionError = isViewerSessionError;
/** Type guard for a customization viewer error. */
function isViewerCustomizationError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.CUSTOMIZATION_ERROR);
}
exports.isViewerCustomizationError = isViewerCustomizationError;
/** Type guard for a viewport viewer error. */
function isViewerViewportError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.VIEWPORT_ERROR);
}
exports.isViewerViewportError = isViewerViewportError;
/** Type guard for a light viewer error. */
function isViewerLightError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.LIGHT_ERROR);
}
exports.isViewerLightError = isViewerLightError;
/** Type guard for a camera viewer error. */
function isViewerCameraError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.CAMERA_ERROR);
}
exports.isViewerCameraError = isViewerCameraError;
/** Type guard for an AR viewer error. */
function isARError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.AR_ERROR);
}
exports.isARError = isARError;
/** Type guard for a validation viewer error. */
function isViewerValidationError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.VALIDATION_ERROR);
}
exports.isViewerValidationError = isViewerValidationError;
/** Type guard for a interaction viewer error. */
function isViewerInteractionError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.INTERACTION_ERROR);
}
exports.isViewerInteractionError = isViewerInteractionError;
/** Type guard for a drawing tools viewer error. */
function isViewerDrawingToolsError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.DRAWING_TOOLS_ERROR);
}
exports.isViewerDrawingToolsError = isViewerDrawingToolsError;
/** Type guard for all error types of the Geometry Backend SDK package that are mapped to viewer errors. */
function isViewerGeometryBackendError(e) {
    return ((e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.GEOMETRY_BACKEND_ERROR) ||
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.GEOMETRY_BACKEND_REQUEST_ERROR ||
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.GEOMETRY_BACKEND_REQUEST_ERROR);
}
exports.isViewerGeometryBackendError = isViewerGeometryBackendError;
/** Type guard for a Geometry Backend SDK generic error that is mapped to a viewer error. */
function isViewerGeometryBackendGenericError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.GEOMETRY_BACKEND_ERROR);
}
exports.isViewerGeometryBackendGenericError = isViewerGeometryBackendGenericError;
/** Type guard for a Geometry Backend SDK request error that is mapped to a viewer error. */
function isViewerGeometryBackendRequestError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.GEOMETRY_BACKEND_REQUEST_ERROR);
}
exports.isViewerGeometryBackendRequestError = isViewerGeometryBackendRequestError;
/** Type guard for a Geometry Backend SDK response error that is mapped to a viewer error. */
function isViewerGeometryBackendResponseError(e) {
    return (e instanceof Error &&
        "errorType" in e &&
        e.errorType ===
            ShapeDiverError_1.ShapeDiverViewerErrorType.GEOMETRY_BACKEND_RESPONSE_ERROR);
}
exports.isViewerGeometryBackendResponseError = isViewerGeometryBackendResponseError;
//# sourceMappingURL=ErrorTypeGuards.js.map