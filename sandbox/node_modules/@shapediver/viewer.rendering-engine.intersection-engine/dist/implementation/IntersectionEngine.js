"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntersectionEngine = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const THREE = __importStar(require("three"));
class IntersectionEngine {
    // #endregion Properties (5)
    // #region Constructors (1)
    constructor() {
        // #region Properties (5)
        this._eventEngine = viewer_shared_services_1.EventEngine.instance;
        this._raycaster = new THREE.Raycaster();
        this._tree = viewer_shared_node_tree_1.Tree.instance;
        this._intersectNodes = [];
        this.gatherNodes();
        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_UPDATED, () => {
            this.gatherNodes();
        });
    }
    // #endregion Constructors (1)
    // #region Public Static Getters And Setters (1)
    static get instance() {
        return this._instance || (this._instance = new this());
    }
    // #endregion Public Static Getters And Setters (1)
    // #region Public Methods (2)
    intersect(ray, viewportId, filterCriteria, rayCasterParams) {
        let intersections = [];
        this._intersectNodes.forEach((i) => {
            const currentIntersections = this.intersectNode(ray, i.node, i.geometryData, viewportId, filterCriteria, rayCasterParams);
            if (currentIntersections)
                intersections = intersections.concat(currentIntersections);
        });
        intersections.sort((a, b) => {
            const distanceDiff = a.distance - b.distance;
            if (distanceDiff !== 0)
                return distanceDiff;
            // if the distance is the same, sort by the closest InteractionData within the sceneTree
            let depthA = -1;
            let depthB = -1;
            const computeDepth = (targetNode, node, depth = 0) => {
                if (targetNode === node)
                    return depth;
                if (node.parent)
                    return computeDepth(targetNode, node.parent, depth + 1);
                return -1;
            };
            if (a.geometryData) {
                a.node.traverse((node) => {
                    if (a.geometryData && node.data.includes(a.geometryData))
                        depthA = computeDepth(a.node, node);
                });
            }
            if (b.geometryData) {
                b.node.traverse((node) => {
                    if (b.geometryData && node.data.includes(b.geometryData))
                        depthB = computeDepth(b.node, node);
                });
            }
            return depthA - depthB;
        });
        return intersections;
    }
    intersectNode(ray, node, geometryData, viewportId, filterCriteria, rayCasterParams) {
        if (node.visible === false)
            return;
        if (viewportId !== undefined) {
            if (node.excludeViewports.includes(viewportId))
                return;
            if (node.restrictViewports.length > 0 &&
                !node.restrictViewports.includes(viewportId))
                return;
        }
        if (filterCriteria) {
            for (let i = 0; i < filterCriteria.length; i++) {
                // if the filter criteria returns false, skip the intersection test
                // the filter criteria per geometryData is then evaluated in the intersectionTest method
                if (filterCriteria[i](node))
                    return this.intersectionTest(ray, node, geometryData, viewportId, rayCasterParams, filterCriteria);
            }
        }
        else {
            return this.intersectionTest(ray, node, geometryData, viewportId, rayCasterParams);
        }
    }
    // #endregion Public Methods (2)
    // #region Private Methods (2)
    /**
     * Gather all nodes that contain geometry data.
     */
    gatherNodes() {
        this._intersectNodes = [];
        this._tree.root.traverse((node) => {
            if (node.visible === false)
                return;
            if (node.intersectionTest === false)
                return;
            for (let i = 0; i < node.data.length; i++) {
                if (node.data[i] instanceof viewer_shared_types_1.GeometryData) {
                    const geometryData = node.data[i];
                    let tempNode = node;
                    let visible = true, restrictViewports = [], excludeViewports = [];
                    while (tempNode.parent) {
                        visible = tempNode.visible && visible;
                        restrictViewports = restrictViewports.concat(tempNode.restrictViewports);
                        excludeViewports = excludeViewports.concat(tempNode.excludeViewports);
                        tempNode = tempNode.parent;
                    }
                    this._intersectNodes.push({
                        node,
                        geometryData: {
                            [`${geometryData.id}_${geometryData.version}`]: geometryData,
                        },
                        visible,
                        restrictViewports: [...new Set(restrictViewports)],
                        excludeViewports: [...new Set(excludeViewports)],
                    });
                }
            }
        });
    }
    /**
     * Do the intersection test with the ray and the node.
     *
     * @param ray the ray to test
     * @param node the node to test
     * @param geometryData the geometry data of the node
     * @param viewportId the viewport id
     * @returns
     */
    intersectionTest(ray, node, geometryData, viewportId, rayCasterParams, filterCriteria) {
        if (rayCasterParams)
            this._raycaster.params = rayCasterParams;
        this._raycaster.ray.direction.set(ray.direction[0], ray.direction[1], ray.direction[2]);
        this._raycaster.ray.origin.set(ray.origin[0], ray.origin[1], ray.origin[2]);
        const threeJsObject = node.convertedObject[viewportId];
        if (threeJsObject) {
            const intersectionThree = this._raycaster.intersectObject(threeJsObject);
            if (intersectionThree.length === 0)
                return;
            let intersections = intersectionThree.map((i) => {
                const intersectionDefinition = {
                    distance: i.distance,
                    point: [i.point.x, i.point.y, i.point.z],
                    node: node,
                    geometryData: geometryData[`${i.object.parent.SDid}_${i.object.parent.SDversion}`],
                };
                return intersectionDefinition;
            });
            if (filterCriteria) {
                intersections = intersections.filter((i) => {
                    for (let j = 0; j < filterCriteria.length; j++)
                        if (filterCriteria[j](i.node, i.geometryData))
                            return true;
                    return false;
                });
            }
            intersections.sort((a, b) => a.distance - b.distance);
            return intersections;
        }
    }
}
exports.IntersectionEngine = IntersectionEngine;
//# sourceMappingURL=IntersectionEngine.js.map