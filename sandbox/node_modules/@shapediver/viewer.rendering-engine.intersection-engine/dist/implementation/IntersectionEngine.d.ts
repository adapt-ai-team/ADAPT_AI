import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { GeometryData, IIntersection, IIntersectionFilter, IRay } from "@shapediver/viewer.shared.types";
import * as THREE from "three";
import { IIntersectionEngine } from "../interfaces/IIntersectionEngine";
export declare class IntersectionEngine implements IIntersectionEngine {
    private readonly _eventEngine;
    private readonly _raycaster;
    private readonly _tree;
    private static _instance;
    private _intersectNodes;
    private constructor();
    static get instance(): IntersectionEngine;
    intersect(ray: IRay, viewportId: string, filterCriteria?: IIntersectionFilter[], rayCasterParams?: THREE.RaycasterParameters): IIntersection[];
    intersectNode(ray: IRay, node: ITreeNode, geometryData: {
        [key: string]: GeometryData;
    }, viewportId: string, filterCriteria?: IIntersectionFilter[], rayCasterParams?: THREE.RaycasterParameters): IIntersection[] | undefined;
    /**
     * Gather all nodes that contain geometry data.
     */
    private gatherNodes;
    /**
     * Do the intersection test with the ray and the node.
     *
     * @param ray the ray to test
     * @param node the node to test
     * @param geometryData the geometry data of the node
     * @param viewportId the viewport id
     * @returns
     */
    private intersectionTest;
}
//# sourceMappingURL=IntersectionEngine.d.ts.map