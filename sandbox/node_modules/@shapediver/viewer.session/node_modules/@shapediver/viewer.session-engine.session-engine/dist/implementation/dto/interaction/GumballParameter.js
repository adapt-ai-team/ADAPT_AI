"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _GumballParameter_sessionEngine;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GumballParameter = void 0;
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const Parameter_1 = require("../Parameter");
class GumballParameter extends Parameter_1.Parameter {
    // #endregion Properties (1)
    // #region Constructors (1)
    constructor(paramDef, sessionEngine) {
        super(paramDef, sessionEngine);
        // #region Properties (1)
        _GumballParameter_sessionEngine.set(this, void 0);
        __classPrivateFieldSet(this, _GumballParameter_sessionEngine, sessionEngine, "f");
    }
    // #endregion Constructors (1)
    // #region Public Getters And Setters (9)
    get enableRotation() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.enableRotation;
    }
    get enableRotationAxes() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.enableRotationAxes;
    }
    get enableScaling() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.enableScaling;
    }
    get enableScalingAxes() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.enableScalingAxes;
    }
    get enableTranslation() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.enableTranslation;
    }
    get enableTranslationAxes() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.enableTranslationAxes;
    }
    get hover() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.hover;
    }
    get interactionType() {
        return "gumball";
    }
    get nameFilter() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.nameFilter;
    }
    get scale() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.scale;
    }
    get selectionColor() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.selectionColor;
    }
    get space() {
        var _a;
        return (_a = this.getGumballProperties()) === null || _a === void 0 ? void 0 : _a.space;
    }
    // #endregion Public Getters And Setters (9)
    // #region Private Methods (1)
    getGumballProperties() {
        const result = (0, viewer_shared_types_1.validateGumballParameterSettings)(this.settings);
        if (result.success) {
            return this.settings
                .props;
        }
    }
}
exports.GumballParameter = GumballParameter;
_GumballParameter_sessionEngine = new WeakMap();
//# sourceMappingURL=GumballParameter.js.map