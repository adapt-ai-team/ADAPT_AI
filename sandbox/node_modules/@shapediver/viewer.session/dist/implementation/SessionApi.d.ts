import { ShapeDiverRequestExport, ShapeDiverResponseDto, ShapeDiverResponseModelState } from "@shapediver/sdk.geometry-api-sdk-v2";
import { SessionEngine } from "@shapediver/viewer.session-engine.session-engine";
import { ITreeNode } from "@shapediver/viewer.shared.node-tree";
import { ISettingsSections } from "@shapediver/viewer.shared.types";
import { IExportApi } from "../interfaces/IExportApi";
import { IOutputApi } from "../interfaces/IOutputApi";
import { ISessionApi } from "../interfaces/ISessionApi";
import { IParameterApi } from "../interfaces/parameter/IParameterApi";
export declare class SessionApi implements ISessionApi {
    #private;
    constructor(sessionEngine: SessionEngine);
    get automaticSceneUpdate(): boolean;
    set automaticSceneUpdate(value: boolean);
    get commitParameters(): boolean;
    set commitParameters(value: boolean);
    get commitSettings(): boolean;
    set commitSettings(value: boolean);
    get customizeOnParameterChange(): boolean;
    set customizeOnParameterChange(value: boolean);
    get excludeViewports(): string[];
    set excludeViewports(value: string[]);
    get exports(): {
        [key: string]: IExportApi;
    };
    get guid(): string | undefined;
    get hasStoredSettings(): boolean;
    get id(): string;
    get initialized(): boolean;
    get jwtToken(): string | undefined;
    get loadSdtf(): boolean;
    set loadSdtf(value: boolean);
    get modelState(): ShapeDiverResponseModelState | undefined;
    get modelViewUrl(): string;
    get node(): ITreeNode;
    get outputs(): {
        [key: string]: IOutputApi;
    };
    get parameterDefaultValues(): {
        [key: string]: unknown;
    };
    get parameterSessionValues(): {
        [key: string]: unknown;
    };
    get parameterValues(): {
        [key: string]: unknown;
    };
    get parameters(): {
        [key: string]: IParameterApi<unknown>;
    };
    get refreshJwtToken(): (() => Promise<string>) | undefined;
    set refreshJwtToken(value: (() => Promise<string>) | undefined);
    get ticket(): string | undefined;
    get updateCallback(): ((newNode?: ITreeNode, oldNode?: ITreeNode) => void | Promise<void>) | null;
    set updateCallback(value: ((newNode?: ITreeNode, oldNode?: ITreeNode) => void | Promise<void>) | null);
    applySettings(response: ShapeDiverResponseDto, sections?: ISettingsSections): Promise<void>;
    canGoBack(): boolean;
    canGoForward(): boolean;
    cancelCustomization(): void;
    close(): Promise<void>;
    convertToGlTF(convertForAr?: boolean): Promise<Blob>;
    createModelState(parameterValues?: {
        [key: string]: unknown;
    }, omitSessionParameterValues?: boolean, image?: (() => string) | (() => Promise<string>) | string | Promise<string> | Blob | File, data?: Record<string, any>, arScene?: (() => Promise<ArrayBuffer>) | ArrayBuffer | (() => Promise<Blob>) | Blob | File): Promise<string>;
    customize(parameterValues?: {
        [key: string]: unknown;
    }, force?: boolean, waitForViewportUpdate?: boolean): Promise<ITreeNode>;
    customizeParallel(parameterValues: {
        [key: string]: unknown;
    }): Promise<ITreeNode>;
    customizeResult(parameterValues: {
        [key: string]: unknown;
    }): Promise<ShapeDiverResponseDto>;
    customizeWithModelState(modelState: string | ShapeDiverResponseDto): Promise<ITreeNode>;
    getExportById(id: string): IExportApi | null;
    getExportByName(name: string): IExportApi[];
    getExportByType(type: string): IExportApi[];
    getOutputByFormat(format: string): IOutputApi[];
    getOutputById(id: string): IOutputApi | null;
    getOutputByName(name: string): IOutputApi[];
    getParameterById(id: string): IParameterApi<unknown> | null;
    getParameterByName(name: string): IParameterApi<unknown>[];
    getParameterByType(type: string): IParameterApi<unknown>[];
    goBack(): Promise<ITreeNode>;
    goForward(): Promise<ITreeNode>;
    loadCachedOutputs(outputs: {
        [key: string]: string;
    }): Promise<{
        [key: string]: ITreeNode | undefined;
    }>;
    requestExports(body: ShapeDiverRequestExport, loadOutputs?: boolean, maxWaitMsec?: number): Promise<ShapeDiverResponseDto>;
    resetParameterValues(force?: boolean, waitForViewportUpdate?: boolean): Promise<ITreeNode>;
    resetSettings(sections?: ISettingsSections): Promise<void>;
    saveDefaultParameterValues(): Promise<boolean>;
    saveSettings(viewportId?: string): Promise<boolean>;
    saveUiProperties(): Promise<boolean>;
    setJwtToken(value: string): Promise<void>;
    updateOutputs(waitForViewportUpdate?: boolean): Promise<ITreeNode>;
    uploadFileParameters(values: {
        [key: string]: string | File | Blob;
    }): Promise<{
        [key: string]: string;
    }>;
}
export declare const isSessionApi: (obj: unknown) => obj is ISessionApi;
//# sourceMappingURL=SessionApi.d.ts.map